
oledplswork.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001914  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080019d4  080019d4  000119d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001a24  08001a24  00011a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001a28  08001a28  00011a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000504  20000000  08001a2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000b8  20000504  08001f30  00020504  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200005bc  08001f30  000205bc  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020504  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000b50b  00000000  00000000  0002052c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001b66  00000000  00000000  0002ba37  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000062fa  00000000  00000000  0002d59d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000790  00000000  00000000  00033898  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000be0  00000000  00000000  00034028  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004085  00000000  00000000  00034c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002b32  00000000  00000000  00038c8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003b7bf  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001760  00000000  00000000  0003b83c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000504 	.word	0x20000504
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080019bc 	.word	0x080019bc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000508 	.word	0x20000508
 8000104:	080019bc 	.word	0x080019bc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000220:	21fa      	movs	r1, #250	; 0xfa
 8000222:	4b0a      	ldr	r3, [pc, #40]	; (800024c <HAL_InitTick+0x2c>)
{
 8000224:	b570      	push	{r4, r5, r6, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000226:	0089      	lsls	r1, r1, #2
{
 8000228:	0005      	movs	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 800022a:	6818      	ldr	r0, [r3, #0]
 800022c:	f7ff ff6c 	bl	8000108 <__udivsi3>
 8000230:	f000 f86a 	bl	8000308 <HAL_SYSTICK_Config>
 8000234:	0004      	movs	r4, r0
  {
    status = HAL_ERROR;
 8000236:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000238:	2c00      	cmp	r4, #0
 800023a:	d105      	bne.n	8000248 <HAL_InitTick+0x28>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 800023c:	3802      	subs	r0, #2
 800023e:	0022      	movs	r2, r4
 8000240:	0029      	movs	r1, r5
 8000242:	f000 f827 	bl	8000294 <HAL_NVIC_SetPriority>
 8000246:	0020      	movs	r0, r4
  }

  /* Return function status */
  return status;
}
 8000248:	bd70      	pop	{r4, r5, r6, pc}
 800024a:	46c0      	nop			; (mov r8, r8)
 800024c:	20000500 	.word	0x20000500

08000250 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000250:	2340      	movs	r3, #64	; 0x40
 8000252:	4a08      	ldr	r2, [pc, #32]	; (8000274 <HAL_Init+0x24>)
{
 8000254:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000256:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000258:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800025a:	430b      	orrs	r3, r1
 800025c:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800025e:	f7ff ffdf 	bl	8000220 <HAL_InitTick>
 8000262:	1e04      	subs	r4, r0, #0
 8000264:	d103      	bne.n	800026e <HAL_Init+0x1e>
    HAL_MspInit();
 8000266:	f001 f9e5 	bl	8001634 <HAL_MspInit>
}
 800026a:	0020      	movs	r0, r4
 800026c:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800026e:	2401      	movs	r4, #1
 8000270:	e7fb      	b.n	800026a <HAL_Init+0x1a>
 8000272:	46c0      	nop			; (mov r8, r8)
 8000274:	40022000 	.word	0x40022000

08000278 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000278:	4a02      	ldr	r2, [pc, #8]	; (8000284 <HAL_IncTick+0xc>)
 800027a:	6813      	ldr	r3, [r2, #0]
 800027c:	3301      	adds	r3, #1
 800027e:	6013      	str	r3, [r2, #0]
}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	20000524 	.word	0x20000524

08000288 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000288:	4b01      	ldr	r3, [pc, #4]	; (8000290 <HAL_GetTick+0x8>)
 800028a:	6818      	ldr	r0, [r3, #0]
}
 800028c:	4770      	bx	lr
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	20000524 	.word	0x20000524

08000294 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000294:	b570      	push	{r4, r5, r6, lr}
 8000296:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000298:	2800      	cmp	r0, #0
 800029a:	da14      	bge.n	80002c6 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800029c:	230f      	movs	r3, #15
 800029e:	b2c0      	uxtb	r0, r0
 80002a0:	4003      	ands	r3, r0
 80002a2:	3b08      	subs	r3, #8
 80002a4:	4a11      	ldr	r2, [pc, #68]	; (80002ec <HAL_NVIC_SetPriority+0x58>)
 80002a6:	089b      	lsrs	r3, r3, #2
 80002a8:	009b      	lsls	r3, r3, #2
 80002aa:	189b      	adds	r3, r3, r2
 80002ac:	2203      	movs	r2, #3
 80002ae:	4010      	ands	r0, r2
 80002b0:	4090      	lsls	r0, r2
 80002b2:	32fc      	adds	r2, #252	; 0xfc
 80002b4:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002b6:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b8:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ba:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002bc:	69dc      	ldr	r4, [r3, #28]
 80002be:	43ac      	bics	r4, r5
 80002c0:	4321      	orrs	r1, r4
 80002c2:	61d9      	str	r1, [r3, #28]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80002c4:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002c6:	2503      	movs	r5, #3
 80002c8:	0883      	lsrs	r3, r0, #2
 80002ca:	4028      	ands	r0, r5
 80002cc:	40a8      	lsls	r0, r5
 80002ce:	35fc      	adds	r5, #252	; 0xfc
 80002d0:	002e      	movs	r6, r5
 80002d2:	4a07      	ldr	r2, [pc, #28]	; (80002f0 <HAL_NVIC_SetPriority+0x5c>)
 80002d4:	009b      	lsls	r3, r3, #2
 80002d6:	189b      	adds	r3, r3, r2
 80002d8:	22c0      	movs	r2, #192	; 0xc0
 80002da:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002dc:	4029      	ands	r1, r5
 80002de:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002e0:	0092      	lsls	r2, r2, #2
 80002e2:	589c      	ldr	r4, [r3, r2]
 80002e4:	43b4      	bics	r4, r6
 80002e6:	4321      	orrs	r1, r4
 80002e8:	5099      	str	r1, [r3, r2]
 80002ea:	e7eb      	b.n	80002c4 <HAL_NVIC_SetPriority+0x30>
 80002ec:	e000ed00 	.word	0xe000ed00
 80002f0:	e000e100 	.word	0xe000e100

080002f4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002f4:	231f      	movs	r3, #31
 80002f6:	4018      	ands	r0, r3
 80002f8:	3b1e      	subs	r3, #30
 80002fa:	4083      	lsls	r3, r0
 80002fc:	4a01      	ldr	r2, [pc, #4]	; (8000304 <HAL_NVIC_EnableIRQ+0x10>)
 80002fe:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000300:	4770      	bx	lr
 8000302:	46c0      	nop			; (mov r8, r8)
 8000304:	e000e100 	.word	0xe000e100

08000308 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000308:	4a09      	ldr	r2, [pc, #36]	; (8000330 <HAL_SYSTICK_Config+0x28>)
 800030a:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 800030c:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800030e:	4293      	cmp	r3, r2
 8000310:	d80d      	bhi.n	800032e <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000312:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000314:	4a07      	ldr	r2, [pc, #28]	; (8000334 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000316:	4808      	ldr	r0, [pc, #32]	; (8000338 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000318:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800031a:	6a03      	ldr	r3, [r0, #32]
 800031c:	0609      	lsls	r1, r1, #24
 800031e:	021b      	lsls	r3, r3, #8
 8000320:	0a1b      	lsrs	r3, r3, #8
 8000322:	430b      	orrs	r3, r1
 8000324:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000326:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000328:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800032a:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800032c:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800032e:	4770      	bx	lr
 8000330:	00ffffff 	.word	0x00ffffff
 8000334:	e000e010 	.word	0xe000e010
 8000338:	e000ed00 	.word	0xe000ed00

0800033c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800033c:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800033e:	4a53      	ldr	r2, [pc, #332]	; (800048c <HAL_GPIO_Init+0x150>)
  while (((GPIO_Init->Pin) >> position) != 0)
 8000340:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000342:	1882      	adds	r2, r0, r2
 8000344:	1e54      	subs	r4, r2, #1
 8000346:	41a2      	sbcs	r2, r4
{
 8000348:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 800034a:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00U;
 800034c:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800034e:	3205      	adds	r2, #5
 8000350:	9203      	str	r2, [sp, #12]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000352:	9a01      	ldr	r2, [sp, #4]
 8000354:	40da      	lsrs	r2, r3
 8000356:	d101      	bne.n	800035c <HAL_GPIO_Init+0x20>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8000358:	b005      	add	sp, #20
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800035c:	2501      	movs	r5, #1
 800035e:	409d      	lsls	r5, r3
 8000360:	9a01      	ldr	r2, [sp, #4]
 8000362:	402a      	ands	r2, r5
 8000364:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 8000366:	d100      	bne.n	800036a <HAL_GPIO_Init+0x2e>
 8000368:	e08d      	b.n	8000486 <HAL_GPIO_Init+0x14a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800036a:	684a      	ldr	r2, [r1, #4]
 800036c:	4694      	mov	ip, r2
 800036e:	2210      	movs	r2, #16
 8000370:	4664      	mov	r4, ip
 8000372:	4394      	bics	r4, r2
 8000374:	0022      	movs	r2, r4
 8000376:	3c01      	subs	r4, #1
 8000378:	2a02      	cmp	r2, #2
 800037a:	d11f      	bne.n	80003bc <HAL_GPIO_Init+0x80>
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800037c:	2407      	movs	r4, #7
 800037e:	270f      	movs	r7, #15
 8000380:	401c      	ands	r4, r3
 8000382:	00a4      	lsls	r4, r4, #2
 8000384:	40a7      	lsls	r7, r4
        temp = GPIOx->AFR[position >> 3U];
 8000386:	08da      	lsrs	r2, r3, #3
 8000388:	0092      	lsls	r2, r2, #2
 800038a:	1882      	adds	r2, r0, r2
 800038c:	6a16      	ldr	r6, [r2, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800038e:	43be      	bics	r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8000390:	690f      	ldr	r7, [r1, #16]
 8000392:	40a7      	lsls	r7, r4
 8000394:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 8000396:	6216      	str	r6, [r2, #32]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000398:	2403      	movs	r4, #3
 800039a:	005e      	lsls	r6, r3, #1
 800039c:	40b4      	lsls	r4, r6
        temp = GPIOx->OSPEEDR;
 800039e:	6882      	ldr	r2, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80003a0:	43a2      	bics	r2, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80003a2:	68cc      	ldr	r4, [r1, #12]
 80003a4:	40b4      	lsls	r4, r6
 80003a6:	4322      	orrs	r2, r4
        GPIOx->OSPEEDR = temp;
 80003a8:	6082      	str	r2, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003aa:	4662      	mov	r2, ip
 80003ac:	06d2      	lsls	r2, r2, #27
 80003ae:	0fd2      	lsrs	r2, r2, #31
 80003b0:	409a      	lsls	r2, r3
        temp= GPIOx->OTYPER;
 80003b2:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80003b4:	43ac      	bics	r4, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003b6:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80003b8:	6042      	str	r2, [r0, #4]
 80003ba:	e001      	b.n	80003c0 <HAL_GPIO_Init+0x84>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003bc:	2c01      	cmp	r4, #1
 80003be:	d9eb      	bls.n	8000398 <HAL_GPIO_Init+0x5c>
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80003c0:	2603      	movs	r6, #3
 80003c2:	0034      	movs	r4, r6
 80003c4:	005d      	lsls	r5, r3, #1
 80003c6:	40ac      	lsls	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003c8:	4662      	mov	r2, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80003ca:	43e4      	mvns	r4, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003cc:	4032      	ands	r2, r6
 80003ce:	40aa      	lsls	r2, r5
      temp = GPIOx->MODER;
 80003d0:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80003d2:	4027      	ands	r7, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003d4:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 80003d6:	6002      	str	r2, [r0, #0]
      temp = GPIOx->PUPDR;
 80003d8:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80003da:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 80003dc:	688a      	ldr	r2, [r1, #8]
 80003de:	40aa      	lsls	r2, r5
 80003e0:	4314      	orrs	r4, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003e2:	4662      	mov	r2, ip
      GPIOx->PUPDR = temp;
 80003e4:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003e6:	00d2      	lsls	r2, r2, #3
 80003e8:	d54d      	bpl.n	8000486 <HAL_GPIO_Init+0x14a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003ea:	2501      	movs	r5, #1
 80003ec:	4c28      	ldr	r4, [pc, #160]	; (8000490 <HAL_GPIO_Init+0x154>)
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80003ee:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003f0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80003f2:	432a      	orrs	r2, r5
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80003f4:	001d      	movs	r5, r3
 80003f6:	4035      	ands	r5, r6
 80003f8:	00ad      	lsls	r5, r5, #2
 80003fa:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003fc:	6362      	str	r2, [r4, #52]	; 0x34
 80003fe:	4a25      	ldr	r2, [pc, #148]	; (8000494 <HAL_GPIO_Init+0x158>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8000400:	089c      	lsrs	r4, r3, #2
 8000402:	00a4      	lsls	r4, r4, #2
 8000404:	18a4      	adds	r4, r4, r2
 8000406:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000408:	43ba      	bics	r2, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800040a:	27a0      	movs	r7, #160	; 0xa0
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800040c:	9202      	str	r2, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800040e:	05ff      	lsls	r7, r7, #23
 8000410:	2200      	movs	r2, #0
 8000412:	42b8      	cmp	r0, r7
 8000414:	d00c      	beq.n	8000430 <HAL_GPIO_Init+0xf4>
 8000416:	4f20      	ldr	r7, [pc, #128]	; (8000498 <HAL_GPIO_Init+0x15c>)
 8000418:	3201      	adds	r2, #1
 800041a:	42b8      	cmp	r0, r7
 800041c:	d008      	beq.n	8000430 <HAL_GPIO_Init+0xf4>
 800041e:	4f1f      	ldr	r7, [pc, #124]	; (800049c <HAL_GPIO_Init+0x160>)
 8000420:	3201      	adds	r2, #1
 8000422:	42b8      	cmp	r0, r7
 8000424:	d004      	beq.n	8000430 <HAL_GPIO_Init+0xf4>
 8000426:	4f1e      	ldr	r7, [pc, #120]	; (80004a0 <HAL_GPIO_Init+0x164>)
 8000428:	0032      	movs	r2, r6
 800042a:	42b8      	cmp	r0, r7
 800042c:	d000      	beq.n	8000430 <HAL_GPIO_Init+0xf4>
 800042e:	9a03      	ldr	r2, [sp, #12]
 8000430:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000432:	4667      	mov	r7, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000434:	9d02      	ldr	r5, [sp, #8]
 8000436:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000438:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 800043a:	4a1a      	ldr	r2, [pc, #104]	; (80004a4 <HAL_GPIO_Init+0x168>)
        temp &= ~((uint32_t)iocurrent);
 800043c:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->IMR;
 800043e:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8000440:	9d00      	ldr	r5, [sp, #0]
        temp &= ~((uint32_t)iocurrent);
 8000442:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8000444:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000446:	03ff      	lsls	r7, r7, #15
 8000448:	d401      	bmi.n	800044e <HAL_GPIO_Init+0x112>
        temp &= ~((uint32_t)iocurrent);
 800044a:	0035      	movs	r5, r6
 800044c:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800044e:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 8000450:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000452:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8000454:	9d00      	ldr	r5, [sp, #0]
 8000456:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000458:	03bf      	lsls	r7, r7, #14
 800045a:	d401      	bmi.n	8000460 <HAL_GPIO_Init+0x124>
        temp &= ~((uint32_t)iocurrent);
 800045c:	0035      	movs	r5, r6
 800045e:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000460:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 8000462:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000464:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8000466:	9d00      	ldr	r5, [sp, #0]
 8000468:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800046a:	02ff      	lsls	r7, r7, #11
 800046c:	d401      	bmi.n	8000472 <HAL_GPIO_Init+0x136>
        temp &= ~((uint32_t)iocurrent);
 800046e:	0035      	movs	r5, r6
 8000470:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000472:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8000474:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000476:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8000478:	9e00      	ldr	r6, [sp, #0]
 800047a:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800047c:	02bf      	lsls	r7, r7, #10
 800047e:	d401      	bmi.n	8000484 <HAL_GPIO_Init+0x148>
        temp &= ~((uint32_t)iocurrent);
 8000480:	4025      	ands	r5, r4
 8000482:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8000484:	60d6      	str	r6, [r2, #12]
    position++;
 8000486:	3301      	adds	r3, #1
 8000488:	e763      	b.n	8000352 <HAL_GPIO_Init+0x16>
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	afffe400 	.word	0xafffe400
 8000490:	40021000 	.word	0x40021000
 8000494:	40010000 	.word	0x40010000
 8000498:	50000400 	.word	0x50000400
 800049c:	50000800 	.word	0x50000800
 80004a0:	50000c00 	.word	0x50000c00
 80004a4:	40010400 	.word	0x40010400

080004a8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d001      	beq.n	80004b0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 80004ac:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80004ae:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 80004b0:	6281      	str	r1, [r0, #40]	; 0x28
}
 80004b2:	e7fc      	b.n	80004ae <HAL_GPIO_WritePin+0x6>

080004b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 80004b4:	4b04      	ldr	r3, [pc, #16]	; (80004c8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 80004b6:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 80004b8:	695a      	ldr	r2, [r3, #20]
 80004ba:	4210      	tst	r0, r2
 80004bc:	d002      	beq.n	80004c4 <HAL_GPIO_EXTI_IRQHandler+0x10>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80004be:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80004c0:	f000 ff48 	bl	8001354 <HAL_GPIO_EXTI_Callback>
  }
}
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	40010400 	.word	0x40010400

080004cc <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80004cc:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 80004ce:	4b18      	ldr	r3, [pc, #96]	; (8000530 <HAL_RCC_GetSysClockFreq+0x64>)
{
 80004d0:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 80004d2:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 80004d4:	400a      	ands	r2, r1
 80004d6:	2a08      	cmp	r2, #8
 80004d8:	d026      	beq.n	8000528 <HAL_RCC_GetSysClockFreq+0x5c>
 80004da:	2a0c      	cmp	r2, #12
 80004dc:	d006      	beq.n	80004ec <HAL_RCC_GetSysClockFreq+0x20>
 80004de:	2a04      	cmp	r2, #4
 80004e0:	d11a      	bne.n	8000518 <HAL_RCC_GetSysClockFreq+0x4c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	06db      	lsls	r3, r3, #27
 80004e6:	d421      	bmi.n	800052c <HAL_RCC_GetSysClockFreq+0x60>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 80004e8:	4812      	ldr	r0, [pc, #72]	; (8000534 <HAL_RCC_GetSysClockFreq+0x68>)
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 80004ea:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80004ec:	028a      	lsls	r2, r1, #10
 80004ee:	4812      	ldr	r0, [pc, #72]	; (8000538 <HAL_RCC_GetSysClockFreq+0x6c>)
 80004f0:	0f12      	lsrs	r2, r2, #28
 80004f2:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80004f4:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80004f6:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80004f8:	0f89      	lsrs	r1, r1, #30
 80004fa:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80004fc:	03c0      	lsls	r0, r0, #15
 80004fe:	d504      	bpl.n	800050a <HAL_RCC_GetSysClockFreq+0x3e>
        pllvco = (HSE_VALUE * pllm) / plld;
 8000500:	480e      	ldr	r0, [pc, #56]	; (800053c <HAL_RCC_GetSysClockFreq+0x70>)
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8000502:	4350      	muls	r0, r2
 8000504:	f7ff fe00 	bl	8000108 <__udivsi3>
 8000508:	e7ef      	b.n	80004ea <HAL_RCC_GetSysClockFreq+0x1e>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	06db      	lsls	r3, r3, #27
 800050e:	d501      	bpl.n	8000514 <HAL_RCC_GetSysClockFreq+0x48>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8000510:	480b      	ldr	r0, [pc, #44]	; (8000540 <HAL_RCC_GetSysClockFreq+0x74>)
 8000512:	e7f6      	b.n	8000502 <HAL_RCC_GetSysClockFreq+0x36>
         pllvco = (HSI_VALUE * pllm) / plld;
 8000514:	4807      	ldr	r0, [pc, #28]	; (8000534 <HAL_RCC_GetSysClockFreq+0x68>)
 8000516:	e7f4      	b.n	8000502 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000518:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800051a:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800051c:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800051e:	041b      	lsls	r3, r3, #16
 8000520:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000522:	3301      	adds	r3, #1
 8000524:	4098      	lsls	r0, r3
 8000526:	e7e0      	b.n	80004ea <HAL_RCC_GetSysClockFreq+0x1e>
      sysclockfreq = HSE_VALUE;
 8000528:	4804      	ldr	r0, [pc, #16]	; (800053c <HAL_RCC_GetSysClockFreq+0x70>)
 800052a:	e7de      	b.n	80004ea <HAL_RCC_GetSysClockFreq+0x1e>
        sysclockfreq =  (HSI_VALUE >> 2);
 800052c:	4804      	ldr	r0, [pc, #16]	; (8000540 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 800052e:	e7dc      	b.n	80004ea <HAL_RCC_GetSysClockFreq+0x1e>
 8000530:	40021000 	.word	0x40021000
 8000534:	00f42400 	.word	0x00f42400
 8000538:	08001a19 	.word	0x08001a19
 800053c:	007a1200 	.word	0x007a1200
 8000540:	003d0900 	.word	0x003d0900

08000544 <HAL_RCC_OscConfig>:
{
 8000544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000546:	0005      	movs	r5, r0
 8000548:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 800054a:	2800      	cmp	r0, #0
 800054c:	d102      	bne.n	8000554 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 800054e:	2001      	movs	r0, #1
}
 8000550:	b007      	add	sp, #28
 8000552:	bdf0      	pop	{r4, r5, r6, r7, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000554:	230c      	movs	r3, #12
 8000556:	4cbe      	ldr	r4, [pc, #760]	; (8000850 <HAL_RCC_OscConfig+0x30c>)
 8000558:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800055a:	68e2      	ldr	r2, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800055c:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800055e:	2380      	movs	r3, #128	; 0x80
 8000560:	025b      	lsls	r3, r3, #9
 8000562:	401a      	ands	r2, r3
 8000564:	9201      	str	r2, [sp, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000566:	6802      	ldr	r2, [r0, #0]
 8000568:	07d2      	lsls	r2, r2, #31
 800056a:	d441      	bmi.n	80005f0 <HAL_RCC_OscConfig+0xac>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800056c:	682b      	ldr	r3, [r5, #0]
 800056e:	079b      	lsls	r3, r3, #30
 8000570:	d500      	bpl.n	8000574 <HAL_RCC_OscConfig+0x30>
 8000572:	e087      	b.n	8000684 <HAL_RCC_OscConfig+0x140>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000574:	682b      	ldr	r3, [r5, #0]
 8000576:	06db      	lsls	r3, r3, #27
 8000578:	d528      	bpl.n	80005cc <HAL_RCC_OscConfig+0x88>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 800057a:	2e00      	cmp	r6, #0
 800057c:	d000      	beq.n	8000580 <HAL_RCC_OscConfig+0x3c>
 800057e:	e0d9      	b.n	8000734 <HAL_RCC_OscConfig+0x1f0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000580:	6823      	ldr	r3, [r4, #0]
 8000582:	059b      	lsls	r3, r3, #22
 8000584:	d502      	bpl.n	800058c <HAL_RCC_OscConfig+0x48>
 8000586:	69eb      	ldr	r3, [r5, #28]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d0e0      	beq.n	800054e <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800058c:	6862      	ldr	r2, [r4, #4]
 800058e:	49b1      	ldr	r1, [pc, #708]	; (8000854 <HAL_RCC_OscConfig+0x310>)
 8000590:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000592:	400a      	ands	r2, r1
 8000594:	431a      	orrs	r2, r3
 8000596:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000598:	6861      	ldr	r1, [r4, #4]
 800059a:	6a2a      	ldr	r2, [r5, #32]
 800059c:	0209      	lsls	r1, r1, #8
 800059e:	0a09      	lsrs	r1, r1, #8
 80005a0:	0612      	lsls	r2, r2, #24
 80005a2:	430a      	orrs	r2, r1
 80005a4:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80005a6:	2280      	movs	r2, #128	; 0x80
 80005a8:	0b5b      	lsrs	r3, r3, #13
 80005aa:	3301      	adds	r3, #1
 80005ac:	0212      	lsls	r2, r2, #8
 80005ae:	409a      	lsls	r2, r3
 80005b0:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80005b2:	68e1      	ldr	r1, [r4, #12]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80005b4:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80005b6:	060a      	lsls	r2, r1, #24
 80005b8:	49a7      	ldr	r1, [pc, #668]	; (8000858 <HAL_RCC_OscConfig+0x314>)
 80005ba:	0f12      	lsrs	r2, r2, #28
 80005bc:	5c8a      	ldrb	r2, [r1, r2]
 80005be:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80005c0:	4aa6      	ldr	r2, [pc, #664]	; (800085c <HAL_RCC_OscConfig+0x318>)
 80005c2:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80005c4:	f7ff fe2c 	bl	8000220 <HAL_InitTick>
        if(status != HAL_OK)
 80005c8:	2800      	cmp	r0, #0
 80005ca:	d1c1      	bne.n	8000550 <HAL_RCC_OscConfig+0xc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80005cc:	682b      	ldr	r3, [r5, #0]
 80005ce:	071b      	lsls	r3, r3, #28
 80005d0:	d500      	bpl.n	80005d4 <HAL_RCC_OscConfig+0x90>
 80005d2:	e0e6      	b.n	80007a2 <HAL_RCC_OscConfig+0x25e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80005d4:	682b      	ldr	r3, [r5, #0]
 80005d6:	075b      	lsls	r3, r3, #29
 80005d8:	d500      	bpl.n	80005dc <HAL_RCC_OscConfig+0x98>
 80005da:	e108      	b.n	80007ee <HAL_RCC_OscConfig+0x2aa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80005dc:	682b      	ldr	r3, [r5, #0]
 80005de:	069b      	lsls	r3, r3, #26
 80005e0:	d500      	bpl.n	80005e4 <HAL_RCC_OscConfig+0xa0>
 80005e2:	e18d      	b.n	8000900 <HAL_RCC_OscConfig+0x3bc>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80005e4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d000      	beq.n	80005ec <HAL_RCC_OscConfig+0xa8>
 80005ea:	e1bc      	b.n	8000966 <HAL_RCC_OscConfig+0x422>
  return HAL_OK;
 80005ec:	2000      	movs	r0, #0
 80005ee:	e7af      	b.n	8000550 <HAL_RCC_OscConfig+0xc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80005f0:	2e08      	cmp	r6, #8
 80005f2:	d004      	beq.n	80005fe <HAL_RCC_OscConfig+0xba>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80005f4:	2e0c      	cmp	r6, #12
 80005f6:	d109      	bne.n	800060c <HAL_RCC_OscConfig+0xc8>
 80005f8:	9a01      	ldr	r2, [sp, #4]
 80005fa:	2a00      	cmp	r2, #0
 80005fc:	d006      	beq.n	800060c <HAL_RCC_OscConfig+0xc8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80005fe:	6823      	ldr	r3, [r4, #0]
 8000600:	039b      	lsls	r3, r3, #14
 8000602:	d5b3      	bpl.n	800056c <HAL_RCC_OscConfig+0x28>
 8000604:	686b      	ldr	r3, [r5, #4]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d1b0      	bne.n	800056c <HAL_RCC_OscConfig+0x28>
 800060a:	e7a0      	b.n	800054e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800060c:	686a      	ldr	r2, [r5, #4]
 800060e:	429a      	cmp	r2, r3
 8000610:	d111      	bne.n	8000636 <HAL_RCC_OscConfig+0xf2>
 8000612:	6822      	ldr	r2, [r4, #0]
 8000614:	4313      	orrs	r3, r2
 8000616:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000618:	f7ff fe36 	bl	8000288 <HAL_GetTick>
 800061c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800061e:	2280      	movs	r2, #128	; 0x80
 8000620:	6823      	ldr	r3, [r4, #0]
 8000622:	0292      	lsls	r2, r2, #10
 8000624:	4213      	tst	r3, r2
 8000626:	d1a1      	bne.n	800056c <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000628:	f7ff fe2e 	bl	8000288 <HAL_GetTick>
 800062c:	1bc0      	subs	r0, r0, r7
 800062e:	2864      	cmp	r0, #100	; 0x64
 8000630:	d9f5      	bls.n	800061e <HAL_RCC_OscConfig+0xda>
            return HAL_TIMEOUT;
 8000632:	2003      	movs	r0, #3
 8000634:	e78c      	b.n	8000550 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000636:	21a0      	movs	r1, #160	; 0xa0
 8000638:	02c9      	lsls	r1, r1, #11
 800063a:	428a      	cmp	r2, r1
 800063c:	d105      	bne.n	800064a <HAL_RCC_OscConfig+0x106>
 800063e:	2280      	movs	r2, #128	; 0x80
 8000640:	6821      	ldr	r1, [r4, #0]
 8000642:	02d2      	lsls	r2, r2, #11
 8000644:	430a      	orrs	r2, r1
 8000646:	6022      	str	r2, [r4, #0]
 8000648:	e7e3      	b.n	8000612 <HAL_RCC_OscConfig+0xce>
 800064a:	6821      	ldr	r1, [r4, #0]
 800064c:	4884      	ldr	r0, [pc, #528]	; (8000860 <HAL_RCC_OscConfig+0x31c>)
 800064e:	4001      	ands	r1, r0
 8000650:	6021      	str	r1, [r4, #0]
 8000652:	6821      	ldr	r1, [r4, #0]
 8000654:	400b      	ands	r3, r1
 8000656:	9305      	str	r3, [sp, #20]
 8000658:	9b05      	ldr	r3, [sp, #20]
 800065a:	4982      	ldr	r1, [pc, #520]	; (8000864 <HAL_RCC_OscConfig+0x320>)
 800065c:	6823      	ldr	r3, [r4, #0]
 800065e:	400b      	ands	r3, r1
 8000660:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000662:	2a00      	cmp	r2, #0
 8000664:	d1d8      	bne.n	8000618 <HAL_RCC_OscConfig+0xd4>
        tickstart = HAL_GetTick();
 8000666:	f7ff fe0f 	bl	8000288 <HAL_GetTick>
 800066a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800066c:	2280      	movs	r2, #128	; 0x80
 800066e:	6823      	ldr	r3, [r4, #0]
 8000670:	0292      	lsls	r2, r2, #10
 8000672:	4213      	tst	r3, r2
 8000674:	d100      	bne.n	8000678 <HAL_RCC_OscConfig+0x134>
 8000676:	e779      	b.n	800056c <HAL_RCC_OscConfig+0x28>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000678:	f7ff fe06 	bl	8000288 <HAL_GetTick>
 800067c:	1bc0      	subs	r0, r0, r7
 800067e:	2864      	cmp	r0, #100	; 0x64
 8000680:	d9f4      	bls.n	800066c <HAL_RCC_OscConfig+0x128>
 8000682:	e7d6      	b.n	8000632 <HAL_RCC_OscConfig+0xee>
    hsi_state = RCC_OscInitStruct->HSIState;
 8000684:	68ea      	ldr	r2, [r5, #12]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000686:	2e04      	cmp	r6, #4
 8000688:	d004      	beq.n	8000694 <HAL_RCC_OscConfig+0x150>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800068a:	2e0c      	cmp	r6, #12
 800068c:	d125      	bne.n	80006da <HAL_RCC_OscConfig+0x196>
 800068e:	9b01      	ldr	r3, [sp, #4]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d122      	bne.n	80006da <HAL_RCC_OscConfig+0x196>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000694:	6823      	ldr	r3, [r4, #0]
 8000696:	075b      	lsls	r3, r3, #29
 8000698:	d502      	bpl.n	80006a0 <HAL_RCC_OscConfig+0x15c>
 800069a:	2a00      	cmp	r2, #0
 800069c:	d100      	bne.n	80006a0 <HAL_RCC_OscConfig+0x15c>
 800069e:	e756      	b.n	800054e <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80006a0:	6861      	ldr	r1, [r4, #4]
 80006a2:	692b      	ldr	r3, [r5, #16]
 80006a4:	4870      	ldr	r0, [pc, #448]	; (8000868 <HAL_RCC_OscConfig+0x324>)
 80006a6:	021b      	lsls	r3, r3, #8
 80006a8:	4001      	ands	r1, r0
 80006aa:	430b      	orrs	r3, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80006ac:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80006ae:	6063      	str	r3, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80006b0:	6823      	ldr	r3, [r4, #0]
 80006b2:	438b      	bics	r3, r1
 80006b4:	4313      	orrs	r3, r2
 80006b6:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80006b8:	f7ff ff08 	bl	80004cc <HAL_RCC_GetSysClockFreq>
 80006bc:	68e3      	ldr	r3, [r4, #12]
 80006be:	4a66      	ldr	r2, [pc, #408]	; (8000858 <HAL_RCC_OscConfig+0x314>)
 80006c0:	061b      	lsls	r3, r3, #24
 80006c2:	0f1b      	lsrs	r3, r3, #28
 80006c4:	5cd3      	ldrb	r3, [r2, r3]
 80006c6:	40d8      	lsrs	r0, r3
 80006c8:	4b64      	ldr	r3, [pc, #400]	; (800085c <HAL_RCC_OscConfig+0x318>)
 80006ca:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 80006cc:	2000      	movs	r0, #0
 80006ce:	f7ff fda7 	bl	8000220 <HAL_InitTick>
      if(status != HAL_OK)
 80006d2:	2800      	cmp	r0, #0
 80006d4:	d100      	bne.n	80006d8 <HAL_RCC_OscConfig+0x194>
 80006d6:	e74d      	b.n	8000574 <HAL_RCC_OscConfig+0x30>
 80006d8:	e73a      	b.n	8000550 <HAL_RCC_OscConfig+0xc>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80006da:	6823      	ldr	r3, [r4, #0]
      if(hsi_state != RCC_HSI_OFF)
 80006dc:	2a00      	cmp	r2, #0
 80006de:	d018      	beq.n	8000712 <HAL_RCC_OscConfig+0x1ce>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80006e0:	2109      	movs	r1, #9
 80006e2:	438b      	bics	r3, r1
 80006e4:	4313      	orrs	r3, r2
 80006e6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80006e8:	f7ff fdce 	bl	8000288 <HAL_GetTick>
 80006ec:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80006ee:	2204      	movs	r2, #4
 80006f0:	6823      	ldr	r3, [r4, #0]
 80006f2:	4213      	tst	r3, r2
 80006f4:	d007      	beq.n	8000706 <HAL_RCC_OscConfig+0x1c2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80006f6:	6862      	ldr	r2, [r4, #4]
 80006f8:	692b      	ldr	r3, [r5, #16]
 80006fa:	495b      	ldr	r1, [pc, #364]	; (8000868 <HAL_RCC_OscConfig+0x324>)
 80006fc:	021b      	lsls	r3, r3, #8
 80006fe:	400a      	ands	r2, r1
 8000700:	4313      	orrs	r3, r2
 8000702:	6063      	str	r3, [r4, #4]
 8000704:	e736      	b.n	8000574 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000706:	f7ff fdbf 	bl	8000288 <HAL_GetTick>
 800070a:	1bc0      	subs	r0, r0, r7
 800070c:	2802      	cmp	r0, #2
 800070e:	d9ee      	bls.n	80006ee <HAL_RCC_OscConfig+0x1aa>
 8000710:	e78f      	b.n	8000632 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_DISABLE();
 8000712:	2201      	movs	r2, #1
 8000714:	4393      	bics	r3, r2
 8000716:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000718:	f7ff fdb6 	bl	8000288 <HAL_GetTick>
 800071c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800071e:	2204      	movs	r2, #4
 8000720:	6823      	ldr	r3, [r4, #0]
 8000722:	4213      	tst	r3, r2
 8000724:	d100      	bne.n	8000728 <HAL_RCC_OscConfig+0x1e4>
 8000726:	e725      	b.n	8000574 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000728:	f7ff fdae 	bl	8000288 <HAL_GetTick>
 800072c:	1bc0      	subs	r0, r0, r7
 800072e:	2802      	cmp	r0, #2
 8000730:	d9f5      	bls.n	800071e <HAL_RCC_OscConfig+0x1da>
 8000732:	e77e      	b.n	8000632 <HAL_RCC_OscConfig+0xee>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000734:	69eb      	ldr	r3, [r5, #28]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d020      	beq.n	800077c <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_MSI_ENABLE();
 800073a:	2380      	movs	r3, #128	; 0x80
 800073c:	6822      	ldr	r2, [r4, #0]
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	4313      	orrs	r3, r2
 8000742:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000744:	f7ff fda0 	bl	8000288 <HAL_GetTick>
 8000748:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800074a:	2280      	movs	r2, #128	; 0x80
 800074c:	6823      	ldr	r3, [r4, #0]
 800074e:	0092      	lsls	r2, r2, #2
 8000750:	4213      	tst	r3, r2
 8000752:	d00d      	beq.n	8000770 <HAL_RCC_OscConfig+0x22c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000754:	6863      	ldr	r3, [r4, #4]
 8000756:	4a3f      	ldr	r2, [pc, #252]	; (8000854 <HAL_RCC_OscConfig+0x310>)
 8000758:	4013      	ands	r3, r2
 800075a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800075c:	4313      	orrs	r3, r2
 800075e:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000760:	6862      	ldr	r2, [r4, #4]
 8000762:	6a2b      	ldr	r3, [r5, #32]
 8000764:	0212      	lsls	r2, r2, #8
 8000766:	061b      	lsls	r3, r3, #24
 8000768:	0a12      	lsrs	r2, r2, #8
 800076a:	4313      	orrs	r3, r2
 800076c:	6063      	str	r3, [r4, #4]
 800076e:	e72d      	b.n	80005cc <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000770:	f7ff fd8a 	bl	8000288 <HAL_GetTick>
 8000774:	1bc0      	subs	r0, r0, r7
 8000776:	2802      	cmp	r0, #2
 8000778:	d9e7      	bls.n	800074a <HAL_RCC_OscConfig+0x206>
 800077a:	e75a      	b.n	8000632 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_MSI_DISABLE();
 800077c:	6823      	ldr	r3, [r4, #0]
 800077e:	4a3b      	ldr	r2, [pc, #236]	; (800086c <HAL_RCC_OscConfig+0x328>)
 8000780:	4013      	ands	r3, r2
 8000782:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000784:	f7ff fd80 	bl	8000288 <HAL_GetTick>
 8000788:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800078a:	2280      	movs	r2, #128	; 0x80
 800078c:	6823      	ldr	r3, [r4, #0]
 800078e:	0092      	lsls	r2, r2, #2
 8000790:	4213      	tst	r3, r2
 8000792:	d100      	bne.n	8000796 <HAL_RCC_OscConfig+0x252>
 8000794:	e71a      	b.n	80005cc <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000796:	f7ff fd77 	bl	8000288 <HAL_GetTick>
 800079a:	1bc0      	subs	r0, r0, r7
 800079c:	2802      	cmp	r0, #2
 800079e:	d9f4      	bls.n	800078a <HAL_RCC_OscConfig+0x246>
 80007a0:	e747      	b.n	8000632 <HAL_RCC_OscConfig+0xee>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80007a2:	696a      	ldr	r2, [r5, #20]
 80007a4:	2301      	movs	r3, #1
 80007a6:	2a00      	cmp	r2, #0
 80007a8:	d010      	beq.n	80007cc <HAL_RCC_OscConfig+0x288>
      __HAL_RCC_LSI_ENABLE();
 80007aa:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80007ac:	4313      	orrs	r3, r2
 80007ae:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80007b0:	f7ff fd6a 	bl	8000288 <HAL_GetTick>
 80007b4:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80007b6:	2202      	movs	r2, #2
 80007b8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80007ba:	4213      	tst	r3, r2
 80007bc:	d000      	beq.n	80007c0 <HAL_RCC_OscConfig+0x27c>
 80007be:	e709      	b.n	80005d4 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007c0:	f7ff fd62 	bl	8000288 <HAL_GetTick>
 80007c4:	1bc0      	subs	r0, r0, r7
 80007c6:	2802      	cmp	r0, #2
 80007c8:	d9f5      	bls.n	80007b6 <HAL_RCC_OscConfig+0x272>
 80007ca:	e732      	b.n	8000632 <HAL_RCC_OscConfig+0xee>
      __HAL_RCC_LSI_DISABLE();
 80007cc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80007ce:	439a      	bics	r2, r3
 80007d0:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80007d2:	f7ff fd59 	bl	8000288 <HAL_GetTick>
 80007d6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80007d8:	2202      	movs	r2, #2
 80007da:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80007dc:	4213      	tst	r3, r2
 80007de:	d100      	bne.n	80007e2 <HAL_RCC_OscConfig+0x29e>
 80007e0:	e6f8      	b.n	80005d4 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007e2:	f7ff fd51 	bl	8000288 <HAL_GetTick>
 80007e6:	1bc0      	subs	r0, r0, r7
 80007e8:	2802      	cmp	r0, #2
 80007ea:	d9f5      	bls.n	80007d8 <HAL_RCC_OscConfig+0x294>
 80007ec:	e721      	b.n	8000632 <HAL_RCC_OscConfig+0xee>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80007ee:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80007f0:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80007f2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80007f4:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 80007f6:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80007f8:	421a      	tst	r2, r3
 80007fa:	d104      	bne.n	8000806 <HAL_RCC_OscConfig+0x2c2>
      __HAL_RCC_PWR_CLK_ENABLE();
 80007fc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80007fe:	4313      	orrs	r3, r2
 8000800:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8000802:	2301      	movs	r3, #1
 8000804:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000806:	2280      	movs	r2, #128	; 0x80
 8000808:	4f19      	ldr	r7, [pc, #100]	; (8000870 <HAL_RCC_OscConfig+0x32c>)
 800080a:	0052      	lsls	r2, r2, #1
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	4213      	tst	r3, r2
 8000810:	d008      	beq.n	8000824 <HAL_RCC_OscConfig+0x2e0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000812:	2280      	movs	r2, #128	; 0x80
 8000814:	68ab      	ldr	r3, [r5, #8]
 8000816:	0052      	lsls	r2, r2, #1
 8000818:	4293      	cmp	r3, r2
 800081a:	d12b      	bne.n	8000874 <HAL_RCC_OscConfig+0x330>
 800081c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800081e:	4313      	orrs	r3, r2
 8000820:	6523      	str	r3, [r4, #80]	; 0x50
 8000822:	e04c      	b.n	80008be <HAL_RCC_OscConfig+0x37a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000824:	2280      	movs	r2, #128	; 0x80
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	0052      	lsls	r2, r2, #1
 800082a:	4313      	orrs	r3, r2
 800082c:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800082e:	f7ff fd2b 	bl	8000288 <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000832:	2380      	movs	r3, #128	; 0x80
 8000834:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 8000836:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000838:	9303      	str	r3, [sp, #12]
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	9a03      	ldr	r2, [sp, #12]
 800083e:	4213      	tst	r3, r2
 8000840:	d1e7      	bne.n	8000812 <HAL_RCC_OscConfig+0x2ce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000842:	f7ff fd21 	bl	8000288 <HAL_GetTick>
 8000846:	9b02      	ldr	r3, [sp, #8]
 8000848:	1ac0      	subs	r0, r0, r3
 800084a:	2864      	cmp	r0, #100	; 0x64
 800084c:	d9f5      	bls.n	800083a <HAL_RCC_OscConfig+0x2f6>
 800084e:	e6f0      	b.n	8000632 <HAL_RCC_OscConfig+0xee>
 8000850:	40021000 	.word	0x40021000
 8000854:	ffff1fff 	.word	0xffff1fff
 8000858:	08001a09 	.word	0x08001a09
 800085c:	20000500 	.word	0x20000500
 8000860:	fffeffff 	.word	0xfffeffff
 8000864:	fffbffff 	.word	0xfffbffff
 8000868:	ffffe0ff 	.word	0xffffe0ff
 800086c:	fffffeff 	.word	0xfffffeff
 8000870:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000874:	2b00      	cmp	r3, #0
 8000876:	d116      	bne.n	80008a6 <HAL_RCC_OscConfig+0x362>
 8000878:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800087a:	4a6c      	ldr	r2, [pc, #432]	; (8000a2c <HAL_RCC_OscConfig+0x4e8>)
 800087c:	4013      	ands	r3, r2
 800087e:	6523      	str	r3, [r4, #80]	; 0x50
 8000880:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000882:	4a6b      	ldr	r2, [pc, #428]	; (8000a30 <HAL_RCC_OscConfig+0x4ec>)
 8000884:	4013      	ands	r3, r2
 8000886:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000888:	f7ff fcfe 	bl	8000288 <HAL_GetTick>
 800088c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800088e:	2280      	movs	r2, #128	; 0x80
 8000890:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000892:	0092      	lsls	r2, r2, #2
 8000894:	4213      	tst	r3, r2
 8000896:	d02a      	beq.n	80008ee <HAL_RCC_OscConfig+0x3aa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000898:	f7ff fcf6 	bl	8000288 <HAL_GetTick>
 800089c:	4b65      	ldr	r3, [pc, #404]	; (8000a34 <HAL_RCC_OscConfig+0x4f0>)
 800089e:	1bc0      	subs	r0, r0, r7
 80008a0:	4298      	cmp	r0, r3
 80008a2:	d9f4      	bls.n	800088e <HAL_RCC_OscConfig+0x34a>
 80008a4:	e6c5      	b.n	8000632 <HAL_RCC_OscConfig+0xee>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008a6:	21a0      	movs	r1, #160	; 0xa0
 80008a8:	00c9      	lsls	r1, r1, #3
 80008aa:	428b      	cmp	r3, r1
 80008ac:	d10b      	bne.n	80008c6 <HAL_RCC_OscConfig+0x382>
 80008ae:	2380      	movs	r3, #128	; 0x80
 80008b0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80008b2:	00db      	lsls	r3, r3, #3
 80008b4:	430b      	orrs	r3, r1
 80008b6:	6523      	str	r3, [r4, #80]	; 0x50
 80008b8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80008ba:	431a      	orrs	r2, r3
 80008bc:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80008be:	f7ff fce3 	bl	8000288 <HAL_GetTick>
 80008c2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80008c4:	e00e      	b.n	80008e4 <HAL_RCC_OscConfig+0x3a0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008c6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80008c8:	4a58      	ldr	r2, [pc, #352]	; (8000a2c <HAL_RCC_OscConfig+0x4e8>)
 80008ca:	4013      	ands	r3, r2
 80008cc:	6523      	str	r3, [r4, #80]	; 0x50
 80008ce:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80008d0:	4a57      	ldr	r2, [pc, #348]	; (8000a30 <HAL_RCC_OscConfig+0x4ec>)
 80008d2:	4013      	ands	r3, r2
 80008d4:	e7a4      	b.n	8000820 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008d6:	f7ff fcd7 	bl	8000288 <HAL_GetTick>
 80008da:	4b56      	ldr	r3, [pc, #344]	; (8000a34 <HAL_RCC_OscConfig+0x4f0>)
 80008dc:	1bc0      	subs	r0, r0, r7
 80008de:	4298      	cmp	r0, r3
 80008e0:	d900      	bls.n	80008e4 <HAL_RCC_OscConfig+0x3a0>
 80008e2:	e6a6      	b.n	8000632 <HAL_RCC_OscConfig+0xee>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80008e4:	2280      	movs	r2, #128	; 0x80
 80008e6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80008e8:	0092      	lsls	r2, r2, #2
 80008ea:	4213      	tst	r3, r2
 80008ec:	d0f3      	beq.n	80008d6 <HAL_RCC_OscConfig+0x392>
    if(pwrclkchanged == SET)
 80008ee:	9b01      	ldr	r3, [sp, #4]
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d000      	beq.n	80008f6 <HAL_RCC_OscConfig+0x3b2>
 80008f4:	e672      	b.n	80005dc <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_PWR_CLK_DISABLE();
 80008f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80008f8:	4a4f      	ldr	r2, [pc, #316]	; (8000a38 <HAL_RCC_OscConfig+0x4f4>)
 80008fa:	4013      	ands	r3, r2
 80008fc:	63a3      	str	r3, [r4, #56]	; 0x38
 80008fe:	e66d      	b.n	80005dc <HAL_RCC_OscConfig+0x98>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000900:	69a9      	ldr	r1, [r5, #24]
 8000902:	2301      	movs	r3, #1
 8000904:	4a4d      	ldr	r2, [pc, #308]	; (8000a3c <HAL_RCC_OscConfig+0x4f8>)
 8000906:	2900      	cmp	r1, #0
 8000908:	d018      	beq.n	800093c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_HSI48_ENABLE();
 800090a:	68a1      	ldr	r1, [r4, #8]
 800090c:	4319      	orrs	r1, r3
 800090e:	60a1      	str	r1, [r4, #8]
 8000910:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000912:	430b      	orrs	r3, r1
 8000914:	6363      	str	r3, [r4, #52]	; 0x34
 8000916:	2380      	movs	r3, #128	; 0x80
 8000918:	6a11      	ldr	r1, [r2, #32]
 800091a:	019b      	lsls	r3, r3, #6
 800091c:	430b      	orrs	r3, r1
 800091e:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8000920:	f7ff fcb2 	bl	8000288 <HAL_GetTick>
 8000924:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8000926:	2202      	movs	r2, #2
 8000928:	68a3      	ldr	r3, [r4, #8]
 800092a:	4213      	tst	r3, r2
 800092c:	d000      	beq.n	8000930 <HAL_RCC_OscConfig+0x3ec>
 800092e:	e659      	b.n	80005e4 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000930:	f7ff fcaa 	bl	8000288 <HAL_GetTick>
 8000934:	1bc0      	subs	r0, r0, r7
 8000936:	2802      	cmp	r0, #2
 8000938:	d9f5      	bls.n	8000926 <HAL_RCC_OscConfig+0x3e2>
 800093a:	e67a      	b.n	8000632 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI48_DISABLE();
 800093c:	68a1      	ldr	r1, [r4, #8]
 800093e:	4399      	bics	r1, r3
 8000940:	60a1      	str	r1, [r4, #8]
 8000942:	6a13      	ldr	r3, [r2, #32]
 8000944:	493e      	ldr	r1, [pc, #248]	; (8000a40 <HAL_RCC_OscConfig+0x4fc>)
 8000946:	400b      	ands	r3, r1
 8000948:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 800094a:	f7ff fc9d 	bl	8000288 <HAL_GetTick>
 800094e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000950:	2202      	movs	r2, #2
 8000952:	68a3      	ldr	r3, [r4, #8]
 8000954:	4213      	tst	r3, r2
 8000956:	d100      	bne.n	800095a <HAL_RCC_OscConfig+0x416>
 8000958:	e644      	b.n	80005e4 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800095a:	f7ff fc95 	bl	8000288 <HAL_GetTick>
 800095e:	1bc0      	subs	r0, r0, r7
 8000960:	2802      	cmp	r0, #2
 8000962:	d9f5      	bls.n	8000950 <HAL_RCC_OscConfig+0x40c>
 8000964:	e665      	b.n	8000632 <HAL_RCC_OscConfig+0xee>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000966:	2e0c      	cmp	r6, #12
 8000968:	d043      	beq.n	80009f2 <HAL_RCC_OscConfig+0x4ae>
 800096a:	4a36      	ldr	r2, [pc, #216]	; (8000a44 <HAL_RCC_OscConfig+0x500>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800096c:	2b02      	cmp	r3, #2
 800096e:	d12e      	bne.n	80009ce <HAL_RCC_OscConfig+0x48a>
        __HAL_RCC_PLL_DISABLE();
 8000970:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000972:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8000974:	4013      	ands	r3, r2
 8000976:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000978:	f7ff fc86 	bl	8000288 <HAL_GetTick>
 800097c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800097e:	04b6      	lsls	r6, r6, #18
 8000980:	6823      	ldr	r3, [r4, #0]
 8000982:	4233      	tst	r3, r6
 8000984:	d11d      	bne.n	80009c2 <HAL_RCC_OscConfig+0x47e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000986:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8000988:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800098a:	68e2      	ldr	r2, [r4, #12]
 800098c:	430b      	orrs	r3, r1
 800098e:	492e      	ldr	r1, [pc, #184]	; (8000a48 <HAL_RCC_OscConfig+0x504>)
 8000990:	400a      	ands	r2, r1
 8000992:	4313      	orrs	r3, r2
 8000994:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8000996:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000998:	4313      	orrs	r3, r2
 800099a:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 800099c:	2380      	movs	r3, #128	; 0x80
 800099e:	6822      	ldr	r2, [r4, #0]
 80009a0:	045b      	lsls	r3, r3, #17
 80009a2:	4313      	orrs	r3, r2
 80009a4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80009a6:	f7ff fc6f 	bl	8000288 <HAL_GetTick>
 80009aa:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80009ac:	04ad      	lsls	r5, r5, #18
 80009ae:	6823      	ldr	r3, [r4, #0]
 80009b0:	422b      	tst	r3, r5
 80009b2:	d000      	beq.n	80009b6 <HAL_RCC_OscConfig+0x472>
 80009b4:	e61a      	b.n	80005ec <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009b6:	f7ff fc67 	bl	8000288 <HAL_GetTick>
 80009ba:	1b80      	subs	r0, r0, r6
 80009bc:	2802      	cmp	r0, #2
 80009be:	d9f6      	bls.n	80009ae <HAL_RCC_OscConfig+0x46a>
 80009c0:	e637      	b.n	8000632 <HAL_RCC_OscConfig+0xee>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009c2:	f7ff fc61 	bl	8000288 <HAL_GetTick>
 80009c6:	1bc0      	subs	r0, r0, r7
 80009c8:	2802      	cmp	r0, #2
 80009ca:	d9d9      	bls.n	8000980 <HAL_RCC_OscConfig+0x43c>
 80009cc:	e631      	b.n	8000632 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_PLL_DISABLE();
 80009ce:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80009d0:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80009d2:	4013      	ands	r3, r2
 80009d4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80009d6:	f7ff fc57 	bl	8000288 <HAL_GetTick>
 80009da:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80009dc:	04ad      	lsls	r5, r5, #18
 80009de:	6823      	ldr	r3, [r4, #0]
 80009e0:	422b      	tst	r3, r5
 80009e2:	d100      	bne.n	80009e6 <HAL_RCC_OscConfig+0x4a2>
 80009e4:	e602      	b.n	80005ec <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009e6:	f7ff fc4f 	bl	8000288 <HAL_GetTick>
 80009ea:	1b80      	subs	r0, r0, r6
 80009ec:	2802      	cmp	r0, #2
 80009ee:	d9f6      	bls.n	80009de <HAL_RCC_OscConfig+0x49a>
 80009f0:	e61f      	b.n	8000632 <HAL_RCC_OscConfig+0xee>
        return HAL_ERROR;
 80009f2:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d100      	bne.n	80009fa <HAL_RCC_OscConfig+0x4b6>
 80009f8:	e5aa      	b.n	8000550 <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80009fa:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 80009fc:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80009fe:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8000a00:	0252      	lsls	r2, r2, #9
 8000a02:	401a      	ands	r2, r3
        return HAL_ERROR;
 8000a04:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000a06:	428a      	cmp	r2, r1
 8000a08:	d000      	beq.n	8000a0c <HAL_RCC_OscConfig+0x4c8>
 8000a0a:	e5a1      	b.n	8000550 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000a0c:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000a0e:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000a10:	0392      	lsls	r2, r2, #14
 8000a12:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000a14:	428a      	cmp	r2, r1
 8000a16:	d000      	beq.n	8000a1a <HAL_RCC_OscConfig+0x4d6>
 8000a18:	e59a      	b.n	8000550 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8000a1a:	20c0      	movs	r0, #192	; 0xc0
 8000a1c:	0400      	lsls	r0, r0, #16
 8000a1e:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000a20:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8000a22:	1a18      	subs	r0, r3, r0
 8000a24:	1e43      	subs	r3, r0, #1
 8000a26:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8000a28:	b2c0      	uxtb	r0, r0
 8000a2a:	e591      	b.n	8000550 <HAL_RCC_OscConfig+0xc>
 8000a2c:	fffffeff 	.word	0xfffffeff
 8000a30:	fffffbff 	.word	0xfffffbff
 8000a34:	00001388 	.word	0x00001388
 8000a38:	efffffff 	.word	0xefffffff
 8000a3c:	40010000 	.word	0x40010000
 8000a40:	ffffdfff 	.word	0xffffdfff
 8000a44:	feffffff 	.word	0xfeffffff
 8000a48:	ff02ffff 	.word	0xff02ffff

08000a4c <HAL_RCC_ClockConfig>:
{
 8000a4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000a4e:	1e06      	subs	r6, r0, #0
 8000a50:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8000a52:	d101      	bne.n	8000a58 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8000a54:	2001      	movs	r0, #1
}
 8000a56:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000a58:	2201      	movs	r2, #1
 8000a5a:	4c51      	ldr	r4, [pc, #324]	; (8000ba0 <HAL_RCC_ClockConfig+0x154>)
 8000a5c:	9901      	ldr	r1, [sp, #4]
 8000a5e:	6823      	ldr	r3, [r4, #0]
 8000a60:	4013      	ands	r3, r2
 8000a62:	428b      	cmp	r3, r1
 8000a64:	d327      	bcc.n	8000ab6 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a66:	6832      	ldr	r2, [r6, #0]
 8000a68:	0793      	lsls	r3, r2, #30
 8000a6a:	d42f      	bmi.n	8000acc <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a6c:	07d3      	lsls	r3, r2, #31
 8000a6e:	d435      	bmi.n	8000adc <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000a70:	2301      	movs	r3, #1
 8000a72:	6822      	ldr	r2, [r4, #0]
 8000a74:	9901      	ldr	r1, [sp, #4]
 8000a76:	401a      	ands	r2, r3
 8000a78:	4291      	cmp	r1, r2
 8000a7a:	d200      	bcs.n	8000a7e <HAL_RCC_ClockConfig+0x32>
 8000a7c:	e081      	b.n	8000b82 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a7e:	6832      	ldr	r2, [r6, #0]
 8000a80:	4c48      	ldr	r4, [pc, #288]	; (8000ba4 <HAL_RCC_ClockConfig+0x158>)
 8000a82:	0753      	lsls	r3, r2, #29
 8000a84:	d500      	bpl.n	8000a88 <HAL_RCC_ClockConfig+0x3c>
 8000a86:	e084      	b.n	8000b92 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a88:	0713      	lsls	r3, r2, #28
 8000a8a:	d506      	bpl.n	8000a9a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000a8c:	68e2      	ldr	r2, [r4, #12]
 8000a8e:	6933      	ldr	r3, [r6, #16]
 8000a90:	4945      	ldr	r1, [pc, #276]	; (8000ba8 <HAL_RCC_ClockConfig+0x15c>)
 8000a92:	00db      	lsls	r3, r3, #3
 8000a94:	400a      	ands	r2, r1
 8000a96:	4313      	orrs	r3, r2
 8000a98:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000a9a:	f7ff fd17 	bl	80004cc <HAL_RCC_GetSysClockFreq>
 8000a9e:	68e3      	ldr	r3, [r4, #12]
 8000aa0:	4a42      	ldr	r2, [pc, #264]	; (8000bac <HAL_RCC_ClockConfig+0x160>)
 8000aa2:	061b      	lsls	r3, r3, #24
 8000aa4:	0f1b      	lsrs	r3, r3, #28
 8000aa6:	5cd3      	ldrb	r3, [r2, r3]
 8000aa8:	40d8      	lsrs	r0, r3
 8000aaa:	4b41      	ldr	r3, [pc, #260]	; (8000bb0 <HAL_RCC_ClockConfig+0x164>)
 8000aac:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f7ff fbb6 	bl	8000220 <HAL_InitTick>
 8000ab4:	e7cf      	b.n	8000a56 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ab6:	6823      	ldr	r3, [r4, #0]
 8000ab8:	9901      	ldr	r1, [sp, #4]
 8000aba:	4393      	bics	r3, r2
 8000abc:	430b      	orrs	r3, r1
 8000abe:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ac0:	6823      	ldr	r3, [r4, #0]
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	9a01      	ldr	r2, [sp, #4]
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d1c4      	bne.n	8000a54 <HAL_RCC_ClockConfig+0x8>
 8000aca:	e7cc      	b.n	8000a66 <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000acc:	20f0      	movs	r0, #240	; 0xf0
 8000ace:	4935      	ldr	r1, [pc, #212]	; (8000ba4 <HAL_RCC_ClockConfig+0x158>)
 8000ad0:	68cb      	ldr	r3, [r1, #12]
 8000ad2:	4383      	bics	r3, r0
 8000ad4:	68b0      	ldr	r0, [r6, #8]
 8000ad6:	4303      	orrs	r3, r0
 8000ad8:	60cb      	str	r3, [r1, #12]
 8000ada:	e7c7      	b.n	8000a6c <HAL_RCC_ClockConfig+0x20>
 8000adc:	4d31      	ldr	r5, [pc, #196]	; (8000ba4 <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ade:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000ae0:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ae2:	2a02      	cmp	r2, #2
 8000ae4:	d119      	bne.n	8000b1a <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000ae6:	039b      	lsls	r3, r3, #14
 8000ae8:	d5b4      	bpl.n	8000a54 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000aea:	2103      	movs	r1, #3
 8000aec:	68eb      	ldr	r3, [r5, #12]
 8000aee:	438b      	bics	r3, r1
 8000af0:	4313      	orrs	r3, r2
 8000af2:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8000af4:	f7ff fbc8 	bl	8000288 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000af8:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000afa:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000afc:	2b02      	cmp	r3, #2
 8000afe:	d119      	bne.n	8000b34 <HAL_RCC_ClockConfig+0xe8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b00:	220c      	movs	r2, #12
 8000b02:	68eb      	ldr	r3, [r5, #12]
 8000b04:	4013      	ands	r3, r2
 8000b06:	2b08      	cmp	r3, #8
 8000b08:	d0b2      	beq.n	8000a70 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b0a:	f7ff fbbd 	bl	8000288 <HAL_GetTick>
 8000b0e:	4b29      	ldr	r3, [pc, #164]	; (8000bb4 <HAL_RCC_ClockConfig+0x168>)
 8000b10:	1bc0      	subs	r0, r0, r7
 8000b12:	4298      	cmp	r0, r3
 8000b14:	d9f4      	bls.n	8000b00 <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 8000b16:	2003      	movs	r0, #3
 8000b18:	e79d      	b.n	8000a56 <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b1a:	2a03      	cmp	r2, #3
 8000b1c:	d102      	bne.n	8000b24 <HAL_RCC_ClockConfig+0xd8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000b1e:	019b      	lsls	r3, r3, #6
 8000b20:	d4e3      	bmi.n	8000aea <HAL_RCC_ClockConfig+0x9e>
 8000b22:	e797      	b.n	8000a54 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000b24:	2a01      	cmp	r2, #1
 8000b26:	d102      	bne.n	8000b2e <HAL_RCC_ClockConfig+0xe2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000b28:	075b      	lsls	r3, r3, #29
 8000b2a:	d4de      	bmi.n	8000aea <HAL_RCC_ClockConfig+0x9e>
 8000b2c:	e792      	b.n	8000a54 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000b2e:	059b      	lsls	r3, r3, #22
 8000b30:	d4db      	bmi.n	8000aea <HAL_RCC_ClockConfig+0x9e>
 8000b32:	e78f      	b.n	8000a54 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b34:	2b03      	cmp	r3, #3
 8000b36:	d10b      	bne.n	8000b50 <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b38:	220c      	movs	r2, #12
 8000b3a:	68eb      	ldr	r3, [r5, #12]
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d096      	beq.n	8000a70 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b42:	f7ff fba1 	bl	8000288 <HAL_GetTick>
 8000b46:	4b1b      	ldr	r3, [pc, #108]	; (8000bb4 <HAL_RCC_ClockConfig+0x168>)
 8000b48:	1bc0      	subs	r0, r0, r7
 8000b4a:	4298      	cmp	r0, r3
 8000b4c:	d9f4      	bls.n	8000b38 <HAL_RCC_ClockConfig+0xec>
 8000b4e:	e7e2      	b.n	8000b16 <HAL_RCC_ClockConfig+0xca>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d010      	beq.n	8000b76 <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8000b54:	220c      	movs	r2, #12
 8000b56:	68eb      	ldr	r3, [r5, #12]
 8000b58:	4213      	tst	r3, r2
 8000b5a:	d089      	beq.n	8000a70 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b5c:	f7ff fb94 	bl	8000288 <HAL_GetTick>
 8000b60:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <HAL_RCC_ClockConfig+0x168>)
 8000b62:	1bc0      	subs	r0, r0, r7
 8000b64:	4298      	cmp	r0, r3
 8000b66:	d9f5      	bls.n	8000b54 <HAL_RCC_ClockConfig+0x108>
 8000b68:	e7d5      	b.n	8000b16 <HAL_RCC_ClockConfig+0xca>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b6a:	f7ff fb8d 	bl	8000288 <HAL_GetTick>
 8000b6e:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <HAL_RCC_ClockConfig+0x168>)
 8000b70:	1bc0      	subs	r0, r0, r7
 8000b72:	4298      	cmp	r0, r3
 8000b74:	d8cf      	bhi.n	8000b16 <HAL_RCC_ClockConfig+0xca>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b76:	220c      	movs	r2, #12
 8000b78:	68eb      	ldr	r3, [r5, #12]
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	2b04      	cmp	r3, #4
 8000b7e:	d1f4      	bne.n	8000b6a <HAL_RCC_ClockConfig+0x11e>
 8000b80:	e776      	b.n	8000a70 <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b82:	6822      	ldr	r2, [r4, #0]
 8000b84:	439a      	bics	r2, r3
 8000b86:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000b88:	6822      	ldr	r2, [r4, #0]
 8000b8a:	421a      	tst	r2, r3
 8000b8c:	d000      	beq.n	8000b90 <HAL_RCC_ClockConfig+0x144>
 8000b8e:	e761      	b.n	8000a54 <HAL_RCC_ClockConfig+0x8>
 8000b90:	e775      	b.n	8000a7e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000b92:	68e3      	ldr	r3, [r4, #12]
 8000b94:	4908      	ldr	r1, [pc, #32]	; (8000bb8 <HAL_RCC_ClockConfig+0x16c>)
 8000b96:	400b      	ands	r3, r1
 8000b98:	68f1      	ldr	r1, [r6, #12]
 8000b9a:	430b      	orrs	r3, r1
 8000b9c:	60e3      	str	r3, [r4, #12]
 8000b9e:	e773      	b.n	8000a88 <HAL_RCC_ClockConfig+0x3c>
 8000ba0:	40022000 	.word	0x40022000
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	ffffc7ff 	.word	0xffffc7ff
 8000bac:	08001a09 	.word	0x08001a09
 8000bb0:	20000500 	.word	0x20000500
 8000bb4:	00001388 	.word	0x00001388
 8000bb8:	fffff8ff 	.word	0xfffff8ff

08000bbc <SPI_WaitFlagStateUntilTimeout.constprop.8>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8000bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bbe:	0004      	movs	r4, r0
 8000bc0:	000d      	movs	r5, r1
 8000bc2:	0016      	movs	r6, r2
 8000bc4:	001f      	movs	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000bc6:	6822      	ldr	r2, [r4, #0]
 8000bc8:	6893      	ldr	r3, [r2, #8]
 8000bca:	402b      	ands	r3, r5
 8000bcc:	429d      	cmp	r5, r3
 8000bce:	d001      	beq.n	8000bd4 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	e031      	b.n	8000c38 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x7c>
    if (Timeout != HAL_MAX_DELAY)
 8000bd4:	1c73      	adds	r3, r6, #1
 8000bd6:	d0f7      	beq.n	8000bc8 <SPI_WaitFlagStateUntilTimeout.constprop.8+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8000bd8:	f7ff fb56 	bl	8000288 <HAL_GetTick>
 8000bdc:	1bc0      	subs	r0, r0, r7
 8000bde:	4286      	cmp	r6, r0
 8000be0:	d8f1      	bhi.n	8000bc6 <SPI_WaitFlagStateUntilTimeout.constprop.8+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000be2:	21e0      	movs	r1, #224	; 0xe0
 8000be4:	6823      	ldr	r3, [r4, #0]
 8000be6:	685a      	ldr	r2, [r3, #4]
 8000be8:	438a      	bics	r2, r1
 8000bea:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000bec:	2282      	movs	r2, #130	; 0x82
 8000bee:	6861      	ldr	r1, [r4, #4]
 8000bf0:	0052      	lsls	r2, r2, #1
 8000bf2:	4291      	cmp	r1, r2
 8000bf4:	d10c      	bne.n	8000c10 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x54>
 8000bf6:	2180      	movs	r1, #128	; 0x80
 8000bf8:	68a2      	ldr	r2, [r4, #8]
 8000bfa:	0209      	lsls	r1, r1, #8
 8000bfc:	428a      	cmp	r2, r1
 8000bfe:	d003      	beq.n	8000c08 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x4c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000c00:	2180      	movs	r1, #128	; 0x80
 8000c02:	00c9      	lsls	r1, r1, #3
 8000c04:	428a      	cmp	r2, r1
 8000c06:	d103      	bne.n	8000c10 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x54>
          __HAL_SPI_DISABLE(hspi);
 8000c08:	2140      	movs	r1, #64	; 0x40
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	438a      	bics	r2, r1
 8000c0e:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000c10:	2180      	movs	r1, #128	; 0x80
 8000c12:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000c14:	0189      	lsls	r1, r1, #6
 8000c16:	428a      	cmp	r2, r1
 8000c18:	d106      	bne.n	8000c28 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x6c>
          SPI_RESET_CRC(hspi);
 8000c1a:	6819      	ldr	r1, [r3, #0]
 8000c1c:	4807      	ldr	r0, [pc, #28]	; (8000c3c <SPI_WaitFlagStateUntilTimeout.constprop.8+0x80>)
 8000c1e:	4001      	ands	r1, r0
 8000c20:	6019      	str	r1, [r3, #0]
 8000c22:	6819      	ldr	r1, [r3, #0]
 8000c24:	430a      	orrs	r2, r1
 8000c26:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8000c28:	0023      	movs	r3, r4
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	3351      	adds	r3, #81	; 0x51
 8000c2e:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 8000c30:	2300      	movs	r3, #0
 8000c32:	2003      	movs	r0, #3
 8000c34:	3450      	adds	r4, #80	; 0x50
 8000c36:	7023      	strb	r3, [r4, #0]
}
 8000c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	ffffdfff 	.word	0xffffdfff

08000c40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000c40:	0013      	movs	r3, r2
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000c42:	2282      	movs	r2, #130	; 0x82
{
 8000c44:	b510      	push	{r4, lr}
 8000c46:	0004      	movs	r4, r0
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000c48:	6840      	ldr	r0, [r0, #4]
 8000c4a:	0052      	lsls	r2, r2, #1
 8000c4c:	4290      	cmp	r0, r2
 8000c4e:	d108      	bne.n	8000c62 <SPI_EndRxTxTransaction+0x22>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000c50:	000a      	movs	r2, r1
 8000c52:	2180      	movs	r1, #128	; 0x80
 8000c54:	0020      	movs	r0, r4
 8000c56:	f7ff ffb1 	bl	8000bbc <SPI_WaitFlagStateUntilTimeout.constprop.8>
 8000c5a:	2800      	cmp	r0, #0
 8000c5c:	d109      	bne.n	8000c72 <SPI_EndRxTxTransaction+0x32>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8000c5e:	2000      	movs	r0, #0
}
 8000c60:	bd10      	pop	{r4, pc}
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 8000c62:	0022      	movs	r2, r4
 8000c64:	3251      	adds	r2, #81	; 0x51
 8000c66:	7812      	ldrb	r2, [r2, #0]
 8000c68:	2a05      	cmp	r2, #5
 8000c6a:	d1f8      	bne.n	8000c5e <SPI_EndRxTxTransaction+0x1e>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8000c6c:	000a      	movs	r2, r1
 8000c6e:	2101      	movs	r1, #1
 8000c70:	e7f0      	b.n	8000c54 <SPI_EndRxTxTransaction+0x14>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000c72:	2320      	movs	r3, #32
 8000c74:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8000c76:	2003      	movs	r0, #3
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8000c7c:	e7f0      	b.n	8000c60 <SPI_EndRxTxTransaction+0x20>
	...

08000c80 <HAL_SPI_Init>:
{
 8000c80:	b570      	push	{r4, r5, r6, lr}
 8000c82:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000c84:	2001      	movs	r0, #1
  if (hspi == NULL)
 8000c86:	2c00      	cmp	r4, #0
 8000c88:	d037      	beq.n	8000cfa <HAL_SPI_Init+0x7a>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c8a:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8000c8c:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c8e:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8000c90:	3551      	adds	r5, #81	; 0x51
 8000c92:	782b      	ldrb	r3, [r5, #0]
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d105      	bne.n	8000ca6 <HAL_SPI_Init+0x26>
    hspi->Lock = HAL_UNLOCKED;
 8000c9a:	0022      	movs	r2, r4
 8000c9c:	3250      	adds	r2, #80	; 0x50
 8000c9e:	7013      	strb	r3, [r2, #0]
    HAL_SPI_MspInit(hspi);
 8000ca0:	0020      	movs	r0, r4
 8000ca2:	f000 fcd5 	bl	8001650 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8000ca6:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8000ca8:	2240      	movs	r2, #64	; 0x40
 8000caa:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000cac:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8000cae:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000cb0:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8000cb2:	4393      	bics	r3, r2
 8000cb4:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000cb6:	6863      	ldr	r3, [r4, #4]
 8000cb8:	69a2      	ldr	r2, [r4, #24]
 8000cba:	4303      	orrs	r3, r0
 8000cbc:	68e0      	ldr	r0, [r4, #12]
 8000cbe:	4303      	orrs	r3, r0
 8000cc0:	6920      	ldr	r0, [r4, #16]
 8000cc2:	4303      	orrs	r3, r0
 8000cc4:	6960      	ldr	r0, [r4, #20]
 8000cc6:	4303      	orrs	r3, r0
 8000cc8:	69e0      	ldr	r0, [r4, #28]
 8000cca:	4303      	orrs	r3, r0
 8000ccc:	6a20      	ldr	r0, [r4, #32]
 8000cce:	4303      	orrs	r3, r0
 8000cd0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000cd2:	4303      	orrs	r3, r0
 8000cd4:	2080      	movs	r0, #128	; 0x80
 8000cd6:	0080      	lsls	r0, r0, #2
 8000cd8:	4010      	ands	r0, r2
 8000cda:	4303      	orrs	r3, r0
 8000cdc:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000cde:	2304      	movs	r3, #4
 8000ce0:	0c12      	lsrs	r2, r2, #16
 8000ce2:	401a      	ands	r2, r3
 8000ce4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000ce6:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000ce8:	431a      	orrs	r2, r3
 8000cea:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000cec:	69cb      	ldr	r3, [r1, #28]
 8000cee:	4a03      	ldr	r2, [pc, #12]	; (8000cfc <HAL_SPI_Init+0x7c>)
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8000cf4:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000cf6:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000cf8:	702b      	strb	r3, [r5, #0]
}
 8000cfa:	bd70      	pop	{r4, r5, r6, pc}
 8000cfc:	fffff7ff 	.word	0xfffff7ff

08000d00 <HAL_SPI_Transmit>:
{
 8000d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d02:	b087      	sub	sp, #28
 8000d04:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hspi);
 8000d06:	0003      	movs	r3, r0
 8000d08:	3350      	adds	r3, #80	; 0x50
 8000d0a:	9303      	str	r3, [sp, #12]
 8000d0c:	781b      	ldrb	r3, [r3, #0]
{
 8000d0e:	0004      	movs	r4, r0
 8000d10:	000e      	movs	r6, r1
 8000d12:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 8000d14:	2502      	movs	r5, #2
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d079      	beq.n	8000e0e <HAL_SPI_Transmit+0x10e>
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	9a03      	ldr	r2, [sp, #12]
 8000d1e:	7013      	strb	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8000d20:	f7ff fab2 	bl	8000288 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8000d24:	0022      	movs	r2, r4
  tickstart = HAL_GetTick();
 8000d26:	9002      	str	r0, [sp, #8]
  if (hspi->State != HAL_SPI_STATE_READY)
 8000d28:	3251      	adds	r2, #81	; 0x51
 8000d2a:	7813      	ldrb	r3, [r2, #0]
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d167      	bne.n	8000e02 <HAL_SPI_Transmit+0x102>
    errorcode = HAL_ERROR;
 8000d32:	001d      	movs	r5, r3
  if ((pData == NULL) || (Size == 0U))
 8000d34:	2e00      	cmp	r6, #0
 8000d36:	d064      	beq.n	8000e02 <HAL_SPI_Transmit+0x102>
 8000d38:	2f00      	cmp	r7, #0
 8000d3a:	d062      	beq.n	8000e02 <HAL_SPI_Transmit+0x102>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8000d3c:	3302      	adds	r3, #2
 8000d3e:	7013      	strb	r3, [r2, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000d40:	2300      	movs	r3, #0
 8000d42:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8000d44:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8000d46:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8000d48:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8000d4a:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8000d4c:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8000d4e:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000d50:	2380      	movs	r3, #128	; 0x80
 8000d52:	68a2      	ldr	r2, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8000d54:	6326      	str	r6, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8000d56:	86a7      	strh	r7, [r4, #52]	; 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000d58:	021b      	lsls	r3, r3, #8
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d105      	bne.n	8000d6a <HAL_SPI_Transmit+0x6a>
    SPI_1LINE_TX(hspi);
 8000d5e:	2380      	movs	r3, #128	; 0x80
 8000d60:	6822      	ldr	r2, [r4, #0]
 8000d62:	01db      	lsls	r3, r3, #7
 8000d64:	6811      	ldr	r1, [r2, #0]
 8000d66:	430b      	orrs	r3, r1
 8000d68:	6013      	str	r3, [r2, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000d6a:	2240      	movs	r2, #64	; 0x40
 8000d6c:	6823      	ldr	r3, [r4, #0]
 8000d6e:	6819      	ldr	r1, [r3, #0]
 8000d70:	4211      	tst	r1, r2
 8000d72:	d102      	bne.n	8000d7a <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 8000d74:	6819      	ldr	r1, [r3, #0]
 8000d76:	430a      	orrs	r2, r1
 8000d78:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000d7a:	2180      	movs	r1, #128	; 0x80
 8000d7c:	68e0      	ldr	r0, [r4, #12]
 8000d7e:	0109      	lsls	r1, r1, #4
 8000d80:	6862      	ldr	r2, [r4, #4]
 8000d82:	4288      	cmp	r0, r1
 8000d84:	d146      	bne.n	8000e14 <HAL_SPI_Transmit+0x114>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000d86:	2a00      	cmp	r2, #0
 8000d88:	d001      	beq.n	8000d8e <HAL_SPI_Transmit+0x8e>
 8000d8a:	2f01      	cmp	r7, #1
 8000d8c:	d107      	bne.n	8000d9e <HAL_SPI_Transmit+0x9e>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000d8e:	8832      	ldrh	r2, [r6, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8000d90:	3602      	adds	r6, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000d92:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8000d94:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8000d96:	6326      	str	r6, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8000d98:	3b01      	subs	r3, #1
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	86e3      	strh	r3, [r4, #54]	; 0x36
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000d9e:	2502      	movs	r5, #2
    while (hspi->TxXferCount > 0U)
 8000da0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d115      	bne.n	8000dd2 <HAL_SPI_Transmit+0xd2>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8000da6:	9a02      	ldr	r2, [sp, #8]
 8000da8:	9901      	ldr	r1, [sp, #4]
 8000daa:	0020      	movs	r0, r4
 8000dac:	f7ff ff48 	bl	8000c40 <SPI_EndRxTxTransaction>
 8000db0:	2800      	cmp	r0, #0
 8000db2:	d159      	bne.n	8000e68 <HAL_SPI_Transmit+0x168>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000db4:	68a3      	ldr	r3, [r4, #8]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d106      	bne.n	8000dc8 <HAL_SPI_Transmit+0xc8>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000dba:	9305      	str	r3, [sp, #20]
 8000dbc:	6823      	ldr	r3, [r4, #0]
 8000dbe:	68da      	ldr	r2, [r3, #12]
 8000dc0:	9205      	str	r2, [sp, #20]
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	9305      	str	r3, [sp, #20]
 8000dc6:	9b05      	ldr	r3, [sp, #20]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000dc8:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8000dca:	1e6b      	subs	r3, r5, #1
 8000dcc:	419d      	sbcs	r5, r3
    errorcode = HAL_BUSY;
 8000dce:	b2ed      	uxtb	r5, r5
 8000dd0:	e017      	b.n	8000e02 <HAL_SPI_Transmit+0x102>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000dd2:	6822      	ldr	r2, [r4, #0]
 8000dd4:	6893      	ldr	r3, [r2, #8]
 8000dd6:	422b      	tst	r3, r5
 8000dd8:	d009      	beq.n	8000dee <HAL_SPI_Transmit+0xee>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000dda:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ddc:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8000dde:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000de0:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8000de2:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8000de4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000de6:	3b01      	subs	r3, #1
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	86e3      	strh	r3, [r4, #54]	; 0x36
 8000dec:	e7d8      	b.n	8000da0 <HAL_SPI_Transmit+0xa0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8000dee:	f7ff fa4b 	bl	8000288 <HAL_GetTick>
 8000df2:	9b02      	ldr	r3, [sp, #8]
 8000df4:	1ac0      	subs	r0, r0, r3
 8000df6:	9b01      	ldr	r3, [sp, #4]
 8000df8:	4298      	cmp	r0, r3
 8000dfa:	d3d1      	bcc.n	8000da0 <HAL_SPI_Transmit+0xa0>
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	d0cf      	beq.n	8000da0 <HAL_SPI_Transmit+0xa0>
          errorcode = HAL_TIMEOUT;
 8000e00:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 8000e02:	2301      	movs	r3, #1
 8000e04:	3451      	adds	r4, #81	; 0x51
 8000e06:	7023      	strb	r3, [r4, #0]
  __HAL_UNLOCK(hspi);
 8000e08:	2300      	movs	r3, #0
 8000e0a:	9a03      	ldr	r2, [sp, #12]
 8000e0c:	7013      	strb	r3, [r2, #0]
}
 8000e0e:	0028      	movs	r0, r5
 8000e10:	b007      	add	sp, #28
 8000e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	d001      	beq.n	8000e1c <HAL_SPI_Transmit+0x11c>
 8000e18:	2f01      	cmp	r7, #1
 8000e1a:	d108      	bne.n	8000e2e <HAL_SPI_Transmit+0x12e>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8000e1c:	7832      	ldrb	r2, [r6, #0]
 8000e1e:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8000e20:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e22:	3301      	adds	r3, #1
 8000e24:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8000e26:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000e28:	3b01      	subs	r3, #1
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	86e3      	strh	r3, [r4, #54]	; 0x36
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000e2e:	2502      	movs	r5, #2
    while (hspi->TxXferCount > 0U)
 8000e30:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d0b7      	beq.n	8000da6 <HAL_SPI_Transmit+0xa6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000e36:	6823      	ldr	r3, [r4, #0]
 8000e38:	689a      	ldr	r2, [r3, #8]
 8000e3a:	422a      	tst	r2, r5
 8000e3c:	d00a      	beq.n	8000e54 <HAL_SPI_Transmit+0x154>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8000e3e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000e40:	7812      	ldrb	r2, [r2, #0]
 8000e42:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8000e44:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e46:	3301      	adds	r3, #1
 8000e48:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8000e4a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	86e3      	strh	r3, [r4, #54]	; 0x36
 8000e52:	e7ed      	b.n	8000e30 <HAL_SPI_Transmit+0x130>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8000e54:	f7ff fa18 	bl	8000288 <HAL_GetTick>
 8000e58:	9b02      	ldr	r3, [sp, #8]
 8000e5a:	1ac0      	subs	r0, r0, r3
 8000e5c:	9b01      	ldr	r3, [sp, #4]
 8000e5e:	4283      	cmp	r3, r0
 8000e60:	d8e6      	bhi.n	8000e30 <HAL_SPI_Transmit+0x130>
 8000e62:	3301      	adds	r3, #1
 8000e64:	d0e4      	beq.n	8000e30 <HAL_SPI_Transmit+0x130>
 8000e66:	e7cb      	b.n	8000e00 <HAL_SPI_Transmit+0x100>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000e68:	2320      	movs	r3, #32
 8000e6a:	6563      	str	r3, [r4, #84]	; 0x54
 8000e6c:	e7a2      	b.n	8000db4 <HAL_SPI_Transmit+0xb4>
	...

08000e70 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000e70:	2280      	movs	r2, #128	; 0x80
{
 8000e72:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8000e74:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000e76:	05d2      	lsls	r2, r2, #23
 8000e78:	4290      	cmp	r0, r2
 8000e7a:	d005      	beq.n	8000e88 <TIM_Base_SetConfig+0x18>
 8000e7c:	4c10      	ldr	r4, [pc, #64]	; (8000ec0 <TIM_Base_SetConfig+0x50>)
 8000e7e:	42a0      	cmp	r0, r4
 8000e80:	d002      	beq.n	8000e88 <TIM_Base_SetConfig+0x18>
 8000e82:	4c10      	ldr	r4, [pc, #64]	; (8000ec4 <TIM_Base_SetConfig+0x54>)
 8000e84:	42a0      	cmp	r0, r4
 8000e86:	d10f      	bne.n	8000ea8 <TIM_Base_SetConfig+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000e88:	2470      	movs	r4, #112	; 0x70
 8000e8a:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8000e8c:	684c      	ldr	r4, [r1, #4]
 8000e8e:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000e90:	4290      	cmp	r0, r2
 8000e92:	d005      	beq.n	8000ea0 <TIM_Base_SetConfig+0x30>
 8000e94:	4a0a      	ldr	r2, [pc, #40]	; (8000ec0 <TIM_Base_SetConfig+0x50>)
 8000e96:	4290      	cmp	r0, r2
 8000e98:	d002      	beq.n	8000ea0 <TIM_Base_SetConfig+0x30>
 8000e9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <TIM_Base_SetConfig+0x54>)
 8000e9c:	4290      	cmp	r0, r2
 8000e9e:	d103      	bne.n	8000ea8 <TIM_Base_SetConfig+0x38>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8000ea0:	4a09      	ldr	r2, [pc, #36]	; (8000ec8 <TIM_Base_SetConfig+0x58>)
 8000ea2:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000ea4:	68ca      	ldr	r2, [r1, #12]
 8000ea6:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000ea8:	2280      	movs	r2, #128	; 0x80
 8000eaa:	4393      	bics	r3, r2
 8000eac:	690a      	ldr	r2, [r1, #16]
 8000eae:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8000eb0:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000eb2:	688b      	ldr	r3, [r1, #8]
 8000eb4:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8000eb6:	680b      	ldr	r3, [r1, #0]
 8000eb8:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	6143      	str	r3, [r0, #20]
}
 8000ebe:	bd10      	pop	{r4, pc}
 8000ec0:	40010800 	.word	0x40010800
 8000ec4:	40011400 	.word	0x40011400
 8000ec8:	fffffcff 	.word	0xfffffcff

08000ecc <HAL_TIM_Base_Init>:
{
 8000ecc:	b570      	push	{r4, r5, r6, lr}
 8000ece:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000ed0:	2001      	movs	r0, #1
  if (htim == NULL)
 8000ed2:	2c00      	cmp	r4, #0
 8000ed4:	d014      	beq.n	8000f00 <HAL_TIM_Base_Init+0x34>
  if (htim->State == HAL_TIM_STATE_RESET)
 8000ed6:	0025      	movs	r5, r4
 8000ed8:	3539      	adds	r5, #57	; 0x39
 8000eda:	782b      	ldrb	r3, [r5, #0]
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d105      	bne.n	8000eee <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8000ee2:	0022      	movs	r2, r4
 8000ee4:	3238      	adds	r2, #56	; 0x38
 8000ee6:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 8000ee8:	0020      	movs	r0, r4
 8000eea:	f000 fbdd 	bl	80016a8 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8000eee:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000ef0:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8000ef2:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000ef4:	1d21      	adds	r1, r4, #4
 8000ef6:	f7ff ffbb 	bl	8000e70 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8000efa:	2301      	movs	r3, #1
  return HAL_OK;
 8000efc:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8000efe:	702b      	strb	r3, [r5, #0]
}
 8000f00:	bd70      	pop	{r4, r5, r6, pc}

08000f02 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000f02:	2201      	movs	r2, #1
 8000f04:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000f06:	2007      	movs	r0, #7
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000f08:	68d9      	ldr	r1, [r3, #12]
 8000f0a:	4311      	orrs	r1, r2
 8000f0c:	60d9      	str	r1, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000f0e:	6899      	ldr	r1, [r3, #8]
 8000f10:	4001      	ands	r1, r0
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000f12:	2906      	cmp	r1, #6
 8000f14:	d002      	beq.n	8000f1c <HAL_TIM_Base_Start_IT+0x1a>
    __HAL_TIM_ENABLE(htim);
 8000f16:	6819      	ldr	r1, [r3, #0]
 8000f18:	430a      	orrs	r2, r1
 8000f1a:	601a      	str	r2, [r3, #0]
}
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	4770      	bx	lr

08000f20 <HAL_TIM_ConfigClockSource>:
{
 8000f20:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8000f22:	0004      	movs	r4, r0
 8000f24:	2202      	movs	r2, #2
 8000f26:	3438      	adds	r4, #56	; 0x38
 8000f28:	7825      	ldrb	r5, [r4, #0]
{
 8000f2a:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8000f2c:	0010      	movs	r0, r2
 8000f2e:	2d01      	cmp	r5, #1
 8000f30:	d017      	beq.n	8000f62 <HAL_TIM_ConfigClockSource+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 8000f32:	001d      	movs	r5, r3
  __HAL_LOCK(htim);
 8000f34:	2701      	movs	r7, #1
  tmpsmcr = htim->Instance->SMCR;
 8000f36:	681b      	ldr	r3, [r3, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8000f38:	3539      	adds	r5, #57	; 0x39
  __HAL_LOCK(htim);
 8000f3a:	7027      	strb	r7, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8000f3c:	702a      	strb	r2, [r5, #0]
  tmpsmcr = htim->Instance->SMCR;
 8000f3e:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000f40:	4845      	ldr	r0, [pc, #276]	; (8001058 <HAL_TIM_ConfigClockSource+0x138>)
 8000f42:	4002      	ands	r2, r0
  htim->Instance->SMCR = tmpsmcr;
 8000f44:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8000f46:	680a      	ldr	r2, [r1, #0]
 8000f48:	2a40      	cmp	r2, #64	; 0x40
 8000f4a:	d100      	bne.n	8000f4e <HAL_TIM_ConfigClockSource+0x2e>
 8000f4c:	e06d      	b.n	800102a <HAL_TIM_ConfigClockSource+0x10a>
 8000f4e:	d814      	bhi.n	8000f7a <HAL_TIM_ConfigClockSource+0x5a>
 8000f50:	2a10      	cmp	r2, #16
 8000f52:	d00b      	beq.n	8000f6c <HAL_TIM_ConfigClockSource+0x4c>
 8000f54:	d806      	bhi.n	8000f64 <HAL_TIM_ConfigClockSource+0x44>
 8000f56:	2a00      	cmp	r2, #0
 8000f58:	d008      	beq.n	8000f6c <HAL_TIM_ConfigClockSource+0x4c>
  htim->State = HAL_TIM_STATE_READY;
 8000f5a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8000f5c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8000f5e:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8000f60:	7020      	strb	r0, [r4, #0]
}
 8000f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 8000f64:	2a20      	cmp	r2, #32
 8000f66:	d001      	beq.n	8000f6c <HAL_TIM_ConfigClockSource+0x4c>
 8000f68:	2a30      	cmp	r2, #48	; 0x30
 8000f6a:	d1f6      	bne.n	8000f5a <HAL_TIM_ConfigClockSource+0x3a>
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8000f6c:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8000f6e:	6898      	ldr	r0, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8000f70:	4388      	bics	r0, r1
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8000f72:	3969      	subs	r1, #105	; 0x69
 8000f74:	430a      	orrs	r2, r1
 8000f76:	4302      	orrs	r2, r0
 8000f78:	e03d      	b.n	8000ff6 <HAL_TIM_ConfigClockSource+0xd6>
  switch (sClockSourceConfig->ClockSource)
 8000f7a:	2a60      	cmp	r2, #96	; 0x60
 8000f7c:	d03d      	beq.n	8000ffa <HAL_TIM_ConfigClockSource+0xda>
 8000f7e:	d817      	bhi.n	8000fb0 <HAL_TIM_ConfigClockSource+0x90>
 8000f80:	2a50      	cmp	r2, #80	; 0x50
 8000f82:	d1ea      	bne.n	8000f5a <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000f84:	6848      	ldr	r0, [r1, #4]
 8000f86:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 8000f88:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000f8a:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000f8c:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000f8e:	43be      	bics	r6, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000f90:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000f92:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000f94:	699e      	ldr	r6, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000f96:	43be      	bics	r6, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000f98:	4332      	orrs	r2, r6
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000f9a:	260a      	movs	r6, #10
 8000f9c:	43b1      	bics	r1, r6
  tmpccer |= TIM_ICPolarity;
 8000f9e:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8000fa0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000fa2:	6219      	str	r1, [r3, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8000fa4:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8000fa6:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8000fa8:	438a      	bics	r2, r1
 8000faa:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8000fac:	2257      	movs	r2, #87	; 0x57
 8000fae:	e021      	b.n	8000ff4 <HAL_TIM_ConfigClockSource+0xd4>
  switch (sClockSourceConfig->ClockSource)
 8000fb0:	2a70      	cmp	r2, #112	; 0x70
 8000fb2:	d012      	beq.n	8000fda <HAL_TIM_ConfigClockSource+0xba>
 8000fb4:	2080      	movs	r0, #128	; 0x80
 8000fb6:	0180      	lsls	r0, r0, #6
 8000fb8:	4282      	cmp	r2, r0
 8000fba:	d1ce      	bne.n	8000f5a <HAL_TIM_ConfigClockSource+0x3a>
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8000fbc:	689a      	ldr	r2, [r3, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000fbe:	4827      	ldr	r0, [pc, #156]	; (800105c <HAL_TIM_ConfigClockSource+0x13c>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000fc0:	684e      	ldr	r6, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000fc2:	4010      	ands	r0, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000fc4:	688a      	ldr	r2, [r1, #8]
 8000fc6:	68c9      	ldr	r1, [r1, #12]
 8000fc8:	4332      	orrs	r2, r6
 8000fca:	0209      	lsls	r1, r1, #8
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	4302      	orrs	r2, r0

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000fd0:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000fd2:	2280      	movs	r2, #128	; 0x80
 8000fd4:	6899      	ldr	r1, [r3, #8]
 8000fd6:	01d2      	lsls	r2, r2, #7
 8000fd8:	e00c      	b.n	8000ff4 <HAL_TIM_ConfigClockSource+0xd4>
  tmpsmcr = TIMx->SMCR;
 8000fda:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000fdc:	481f      	ldr	r0, [pc, #124]	; (800105c <HAL_TIM_ConfigClockSource+0x13c>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000fde:	684e      	ldr	r6, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000fe0:	4010      	ands	r0, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000fe2:	688a      	ldr	r2, [r1, #8]
 8000fe4:	68c9      	ldr	r1, [r1, #12]
 8000fe6:	4332      	orrs	r2, r6
 8000fe8:	0209      	lsls	r1, r1, #8
 8000fea:	430a      	orrs	r2, r1
 8000fec:	4302      	orrs	r2, r0
  TIMx->SMCR = tmpsmcr;
 8000fee:	609a      	str	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000ff0:	2277      	movs	r2, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 8000ff2:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8000ff4:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	e7af      	b.n	8000f5a <HAL_TIM_ConfigClockSource+0x3a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000ffa:	2610      	movs	r6, #16
 8000ffc:	6a18      	ldr	r0, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000ffe:	684a      	ldr	r2, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001000:	43b0      	bics	r0, r6
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001002:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001004:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001006:	699e      	ldr	r6, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001008:	4f15      	ldr	r7, [pc, #84]	; (8001060 <HAL_TIM_ConfigClockSource+0x140>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800100a:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800100c:	403e      	ands	r6, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800100e:	4331      	orrs	r1, r6
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001010:	26a0      	movs	r6, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8001012:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8001014:	6199      	str	r1, [r3, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001016:	2170      	movs	r1, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001018:	43b0      	bics	r0, r6
  tmpccer |= (TIM_ICPolarity << 4U);
 800101a:	0112      	lsls	r2, r2, #4
 800101c:	4302      	orrs	r2, r0
  TIMx->CCER = tmpccer;
 800101e:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8001020:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001022:	438a      	bics	r2, r1
 8001024:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001026:	2267      	movs	r2, #103	; 0x67
 8001028:	e7e4      	b.n	8000ff4 <HAL_TIM_ConfigClockSource+0xd4>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800102a:	6848      	ldr	r0, [r1, #4]
 800102c:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 800102e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001030:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001032:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001034:	43be      	bics	r6, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001036:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001038:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800103a:	699e      	ldr	r6, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800103c:	43be      	bics	r6, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800103e:	4332      	orrs	r2, r6
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001040:	260a      	movs	r6, #10
 8001042:	43b1      	bics	r1, r6
  tmpccer |= TIM_ICPolarity;
 8001044:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8001046:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001048:	6219      	str	r1, [r3, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 800104a:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 800104c:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800104e:	438a      	bics	r2, r1
 8001050:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001052:	2247      	movs	r2, #71	; 0x47
 8001054:	e7ce      	b.n	8000ff4 <HAL_TIM_ConfigClockSource+0xd4>
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	ffff0088 	.word	0xffff0088
 800105c:	ffff00ff 	.word	0xffff00ff
 8001060:	ffff0fff 	.word	0xffff0fff

08001064 <HAL_TIM_PeriodElapsedCallback>:
 8001064:	4770      	bx	lr

08001066 <HAL_TIM_OC_DelayElapsedCallback>:
 8001066:	4770      	bx	lr

08001068 <HAL_TIM_IC_CaptureCallback>:
 8001068:	4770      	bx	lr

0800106a <HAL_TIM_PWM_PulseFinishedCallback>:
 800106a:	4770      	bx	lr

0800106c <HAL_TIM_TriggerCallback>:
 800106c:	4770      	bx	lr

0800106e <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800106e:	2202      	movs	r2, #2
 8001070:	6803      	ldr	r3, [r0, #0]
{
 8001072:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001074:	6919      	ldr	r1, [r3, #16]
{
 8001076:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001078:	4211      	tst	r1, r2
 800107a:	d00d      	beq.n	8001098 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800107c:	68d9      	ldr	r1, [r3, #12]
 800107e:	4211      	tst	r1, r2
 8001080:	d00a      	beq.n	8001098 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001082:	3a05      	subs	r2, #5
 8001084:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001086:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001088:	3204      	adds	r2, #4
 800108a:	7602      	strb	r2, [r0, #24]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800108c:	079b      	lsls	r3, r3, #30
 800108e:	d05e      	beq.n	800114e <HAL_TIM_IRQHandler+0xe0>
          HAL_TIM_IC_CaptureCallback(htim);
 8001090:	f7ff ffea 	bl	8001068 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001094:	2300      	movs	r3, #0
 8001096:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001098:	2204      	movs	r2, #4
 800109a:	6823      	ldr	r3, [r4, #0]
 800109c:	6919      	ldr	r1, [r3, #16]
 800109e:	4211      	tst	r1, r2
 80010a0:	d010      	beq.n	80010c4 <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80010a2:	68d9      	ldr	r1, [r3, #12]
 80010a4:	4211      	tst	r1, r2
 80010a6:	d00d      	beq.n	80010c4 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80010a8:	3a09      	subs	r2, #9
 80010aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80010ac:	3207      	adds	r2, #7
 80010ae:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80010b0:	699a      	ldr	r2, [r3, #24]
 80010b2:	23c0      	movs	r3, #192	; 0xc0
 80010b4:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80010b6:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80010b8:	421a      	tst	r2, r3
 80010ba:	d04e      	beq.n	800115a <HAL_TIM_IRQHandler+0xec>
        HAL_TIM_IC_CaptureCallback(htim);
 80010bc:	f7ff ffd4 	bl	8001068 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010c0:	2300      	movs	r3, #0
 80010c2:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80010c4:	2208      	movs	r2, #8
 80010c6:	6823      	ldr	r3, [r4, #0]
 80010c8:	6919      	ldr	r1, [r3, #16]
 80010ca:	4211      	tst	r1, r2
 80010cc:	d00e      	beq.n	80010ec <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80010ce:	68d9      	ldr	r1, [r3, #12]
 80010d0:	4211      	tst	r1, r2
 80010d2:	d00b      	beq.n	80010ec <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80010d4:	3a11      	subs	r2, #17
 80010d6:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80010d8:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80010da:	320d      	adds	r2, #13
 80010dc:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80010de:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80010e0:	079b      	lsls	r3, r3, #30
 80010e2:	d040      	beq.n	8001166 <HAL_TIM_IRQHandler+0xf8>
        HAL_TIM_IC_CaptureCallback(htim);
 80010e4:	f7ff ffc0 	bl	8001068 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010e8:	2300      	movs	r3, #0
 80010ea:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80010ec:	2210      	movs	r2, #16
 80010ee:	6823      	ldr	r3, [r4, #0]
 80010f0:	6919      	ldr	r1, [r3, #16]
 80010f2:	4211      	tst	r1, r2
 80010f4:	d010      	beq.n	8001118 <HAL_TIM_IRQHandler+0xaa>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80010f6:	68d9      	ldr	r1, [r3, #12]
 80010f8:	4211      	tst	r1, r2
 80010fa:	d00d      	beq.n	8001118 <HAL_TIM_IRQHandler+0xaa>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80010fc:	3a21      	subs	r2, #33	; 0x21
 80010fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001100:	3219      	adds	r2, #25
 8001102:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001104:	69da      	ldr	r2, [r3, #28]
 8001106:	23c0      	movs	r3, #192	; 0xc0
 8001108:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800110a:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800110c:	421a      	tst	r2, r3
 800110e:	d030      	beq.n	8001172 <HAL_TIM_IRQHandler+0x104>
        HAL_TIM_IC_CaptureCallback(htim);
 8001110:	f7ff ffaa 	bl	8001068 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001114:	2300      	movs	r3, #0
 8001116:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001118:	2201      	movs	r2, #1
 800111a:	6823      	ldr	r3, [r4, #0]
 800111c:	6919      	ldr	r1, [r3, #16]
 800111e:	4211      	tst	r1, r2
 8001120:	d007      	beq.n	8001132 <HAL_TIM_IRQHandler+0xc4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001122:	68d9      	ldr	r1, [r3, #12]
 8001124:	4211      	tst	r1, r2
 8001126:	d004      	beq.n	8001132 <HAL_TIM_IRQHandler+0xc4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001128:	3a03      	subs	r2, #3
 800112a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800112c:	0020      	movs	r0, r4
 800112e:	f7ff ff99 	bl	8001064 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001132:	2240      	movs	r2, #64	; 0x40
 8001134:	6823      	ldr	r3, [r4, #0]
 8001136:	6919      	ldr	r1, [r3, #16]
 8001138:	4211      	tst	r1, r2
 800113a:	d007      	beq.n	800114c <HAL_TIM_IRQHandler+0xde>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800113c:	68d9      	ldr	r1, [r3, #12]
 800113e:	4211      	tst	r1, r2
 8001140:	d004      	beq.n	800114c <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001142:	3a81      	subs	r2, #129	; 0x81
 8001144:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001146:	0020      	movs	r0, r4
 8001148:	f7ff ff90 	bl	800106c <HAL_TIM_TriggerCallback>
}
 800114c:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800114e:	f7ff ff8a 	bl	8001066 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001152:	0020      	movs	r0, r4
 8001154:	f7ff ff89 	bl	800106a <HAL_TIM_PWM_PulseFinishedCallback>
 8001158:	e79c      	b.n	8001094 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800115a:	f7ff ff84 	bl	8001066 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800115e:	0020      	movs	r0, r4
 8001160:	f7ff ff83 	bl	800106a <HAL_TIM_PWM_PulseFinishedCallback>
 8001164:	e7ac      	b.n	80010c0 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001166:	f7ff ff7e 	bl	8001066 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800116a:	0020      	movs	r0, r4
 800116c:	f7ff ff7d 	bl	800106a <HAL_TIM_PWM_PulseFinishedCallback>
 8001170:	e7ba      	b.n	80010e8 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001172:	f7ff ff78 	bl	8001066 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001176:	0020      	movs	r0, r4
 8001178:	f7ff ff77 	bl	800106a <HAL_TIM_PWM_PulseFinishedCallback>
 800117c:	e7ca      	b.n	8001114 <HAL_TIM_IRQHandler+0xa6>

0800117e <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800117e:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001180:	0004      	movs	r4, r0
 8001182:	3438      	adds	r4, #56	; 0x38
 8001184:	7822      	ldrb	r2, [r4, #0]
{
 8001186:	0003      	movs	r3, r0
 8001188:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 800118a:	2a01      	cmp	r2, #1
 800118c:	d013      	beq.n	80011b6 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800118e:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001190:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8001192:	3539      	adds	r5, #57	; 0x39
 8001194:	7028      	strb	r0, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 8001196:	6818      	ldr	r0, [r3, #0]
 8001198:	6842      	ldr	r2, [r0, #4]
  tmpsmcr = htim->Instance->SMCR;
 800119a:	6883      	ldr	r3, [r0, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 800119c:	43b2      	bics	r2, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800119e:	680e      	ldr	r6, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80011a0:	6849      	ldr	r1, [r1, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80011a2:	4332      	orrs	r2, r6
  tmpsmcr &= ~TIM_SMCR_MSM;
 80011a4:	2680      	movs	r6, #128	; 0x80
 80011a6:	43b3      	bics	r3, r6
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80011a8:	430b      	orrs	r3, r1

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80011aa:	6042      	str	r2, [r0, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80011ac:	6083      	str	r3, [r0, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80011ae:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 80011b0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80011b2:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 80011b4:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 80011b6:	bd70      	pop	{r4, r5, r6, pc}

080011b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b8:	b510      	push	{r4, lr}
 80011ba:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011bc:	2238      	movs	r2, #56	; 0x38
 80011be:	2100      	movs	r1, #0
 80011c0:	a806      	add	r0, sp, #24
 80011c2:	f000 fbf2 	bl	80019aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c6:	2214      	movs	r2, #20
 80011c8:	2100      	movs	r1, #0
 80011ca:	a801      	add	r0, sp, #4
 80011cc:	f000 fbed 	bl	80019aa <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011d0:	4910      	ldr	r1, [pc, #64]	; (8001214 <SystemClock_Config+0x5c>)
 80011d2:	4a11      	ldr	r2, [pc, #68]	; (8001218 <SystemClock_Config+0x60>)
 80011d4:	680b      	ldr	r3, [r1, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80011d6:	2400      	movs	r4, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011d8:	401a      	ands	r2, r3
 80011da:	2380      	movs	r3, #128	; 0x80
 80011dc:	011b      	lsls	r3, r3, #4
 80011de:	4313      	orrs	r3, r2
 80011e0:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80011e2:	2310      	movs	r3, #16
 80011e4:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80011e6:	3b0f      	subs	r3, #15
 80011e8:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80011ea:	23a0      	movs	r3, #160	; 0xa0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ec:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80011ee:	021b      	lsls	r3, r3, #8
 80011f0:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80011f2:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011f4:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f6:	f7ff f9a5 	bl	8000544 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011fa:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011fc:	0021      	movs	r1, r4
 80011fe:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001200:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001202:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001204:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001206:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001208:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800120a:	f7ff fc1f 	bl	8000a4c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800120e:	b014      	add	sp, #80	; 0x50
 8001210:	bd10      	pop	{r4, pc}
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	40007000 	.word	0x40007000
 8001218:	ffffe7ff 	.word	0xffffe7ff

0800121c <main>:
{
 800121c:	b5f0      	push	{r4, r5, r6, r7, lr}
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800121e:	2501      	movs	r5, #1
{
 8001220:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8001222:	f7ff f815 	bl	8000250 <HAL_Init>
  SystemClock_Config();
 8001226:	f7ff ffc7 	bl	80011b8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122a:	2214      	movs	r2, #20
 800122c:	2100      	movs	r1, #0
 800122e:	a805      	add	r0, sp, #20
 8001230:	f000 fbbb 	bl	80019aa <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001234:	2102      	movs	r1, #2

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, oled_NSS_Pin|ole_RES_Pin, GPIO_PIN_RESET);
 8001236:	27a0      	movs	r7, #160	; 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001238:	4b40      	ldr	r3, [pc, #256]	; (800133c <main+0x120>)
  HAL_GPIO_WritePin(GPIOB, oled_NSS_Pin|ole_RES_Pin, GPIO_PIN_RESET);
 800123a:	01ff      	lsls	r7, r7, #7
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800123c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOB, oled_NSS_Pin|ole_RES_Pin, GPIO_PIN_RESET);
 800123e:	4840      	ldr	r0, [pc, #256]	; (8001340 <main+0x124>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001240:	432a      	orrs	r2, r5
 8001242:	62da      	str	r2, [r3, #44]	; 0x2c
 8001244:	6ada      	ldr	r2, [r3, #44]	; 0x2c

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(oled_DC_GPIO_Port, oled_DC_Pin, GPIO_PIN_RESET);
 8001246:	2680      	movs	r6, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001248:	402a      	ands	r2, r5
 800124a:	9201      	str	r2, [sp, #4]
 800124c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800124e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(oled_DC_GPIO_Port, oled_DC_Pin, GPIO_PIN_RESET);
 8001250:	0076      	lsls	r6, r6, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001252:	430a      	orrs	r2, r1
 8001254:	62da      	str	r2, [r3, #44]	; 0x2c
 8001256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOB, oled_NSS_Pin|ole_RES_Pin, GPIO_PIN_RESET);
 8001258:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800125a:	400b      	ands	r3, r1
 800125c:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, oled_NSS_Pin|ole_RES_Pin, GPIO_PIN_RESET);
 800125e:	0039      	movs	r1, r7
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001260:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, oled_NSS_Pin|ole_RES_Pin, GPIO_PIN_RESET);
 8001262:	f7ff f921 	bl	80004a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(oled_DC_GPIO_Port, oled_DC_Pin, GPIO_PIN_RESET);
 8001266:	20a0      	movs	r0, #160	; 0xa0
 8001268:	2200      	movs	r2, #0
 800126a:	0031      	movs	r1, r6
 800126c:	05c0      	lsls	r0, r0, #23
 800126e:	f7ff f91b 	bl	80004a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : dim_Pin */
  GPIO_InitStruct.Pin = dim_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(dim_GPIO_Port, &GPIO_InitStruct);
 8001272:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001276:	4b33      	ldr	r3, [pc, #204]	; (8001344 <main+0x128>)
  HAL_GPIO_Init(dim_GPIO_Port, &GPIO_InitStruct);
 8001278:	a905      	add	r1, sp, #20
 800127a:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800127c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin = dim_Pin;
 800127e:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(dim_GPIO_Port, &GPIO_InitStruct);
 8001282:	f7ff f85b 	bl	800033c <HAL_GPIO_Init>
  /*Configure GPIO pins : oled_NSS_Pin ole_RES_Pin */
  GPIO_InitStruct.Pin = oled_NSS_Pin|ole_RES_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001286:	a905      	add	r1, sp, #20
 8001288:	482d      	ldr	r0, [pc, #180]	; (8001340 <main+0x124>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128a:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pin = oled_NSS_Pin|ole_RES_Pin;
 800128c:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001290:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001292:	f7ff f853 	bl	800033c <HAL_GPIO_Init>
  /*Configure GPIO pin : oled_DC_Pin */
  GPIO_InitStruct.Pin = oled_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(oled_DC_GPIO_Port, &GPIO_InitStruct);
 8001296:	20a0      	movs	r0, #160	; 0xa0
 8001298:	a905      	add	r1, sp, #20
 800129a:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129c:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pin = oled_DC_Pin;
 800129e:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a2:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(oled_DC_GPIO_Port, &GPIO_InitStruct);
 80012a4:	f7ff f84a 	bl	800033c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80012a8:	0022      	movs	r2, r4
 80012aa:	0021      	movs	r1, r4
 80012ac:	2005      	movs	r0, #5
 80012ae:	f7fe fff1 	bl	8000294 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80012b2:	2005      	movs	r0, #5
 80012b4:	f7ff f81e 	bl	80002f4 <HAL_NVIC_EnableIRQ>
  hspi2.Instance = SPI2;
 80012b8:	4823      	ldr	r0, [pc, #140]	; (8001348 <main+0x12c>)
 80012ba:	4b24      	ldr	r3, [pc, #144]	; (800134c <main+0x130>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80012bc:	6084      	str	r4, [r0, #8]
  hspi2.Instance = SPI2;
 80012be:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80012c0:	2382      	movs	r3, #130	; 0x82
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	6043      	str	r3, [r0, #4]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80012c6:	33fc      	adds	r3, #252	; 0xfc
 80012c8:	6183      	str	r3, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80012ca:	3bd1      	subs	r3, #209	; 0xd1
 80012cc:	3bff      	subs	r3, #255	; 0xff
 80012ce:	61c3      	str	r3, [r0, #28]
  hspi2.Init.CRCPolynomial = 7;
 80012d0:	3b29      	subs	r3, #41	; 0x29
 80012d2:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80012d4:	60c4      	str	r4, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012d6:	6104      	str	r4, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012d8:	6144      	str	r4, [r0, #20]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012da:	6204      	str	r4, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80012dc:	6244      	str	r4, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012de:	6284      	str	r4, [r0, #40]	; 0x28
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80012e0:	f7ff fcce 	bl	8000c80 <HAL_SPI_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012e4:	2210      	movs	r2, #16
 80012e6:	0021      	movs	r1, r4
 80012e8:	a805      	add	r0, sp, #20
 80012ea:	f000 fb5e 	bl	80019aa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ee:	2208      	movs	r2, #8
 80012f0:	0021      	movs	r1, r4
 80012f2:	a803      	add	r0, sp, #12
 80012f4:	f000 fb59 	bl	80019aa <memset>
  htim2.Instance = TIM2;
 80012f8:	2380      	movs	r3, #128	; 0x80
 80012fa:	4d15      	ldr	r5, [pc, #84]	; (8001350 <main+0x134>)
 80012fc:	05db      	lsls	r3, r3, #23
 80012fe:	602b      	str	r3, [r5, #0]
  htim2.Init.Prescaler = 20096;
 8001300:	239d      	movs	r3, #157	; 0x9d
 8001302:	01db      	lsls	r3, r3, #7
 8001304:	606b      	str	r3, [r5, #4]
  htim2.Init.Period = 100;
 8001306:	2364      	movs	r3, #100	; 0x64
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001308:	0028      	movs	r0, r5
  htim2.Init.Period = 100;
 800130a:	60eb      	str	r3, [r5, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130c:	60ac      	str	r4, [r5, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800130e:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001310:	616c      	str	r4, [r5, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001312:	f7ff fddb 	bl	8000ecc <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001316:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001318:	a905      	add	r1, sp, #20
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800131a:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800131c:	0028      	movs	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800131e:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001320:	f7ff fdfe 	bl	8000f20 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001324:	a903      	add	r1, sp, #12
 8001326:	0028      	movs	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001328:	9403      	str	r4, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800132a:	9404      	str	r4, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800132c:	f7ff ff27 	bl	800117e <HAL_TIMEx_MasterConfigSynchronization>
  turnOnScreen();
 8001330:	f000 f870 	bl	8001414 <turnOnScreen>
  HAL_TIM_Base_Start_IT(&htim2);
 8001334:	0028      	movs	r0, r5
 8001336:	f7ff fde4 	bl	8000f02 <HAL_TIM_Base_Start_IT>
 800133a:	e7fe      	b.n	800133a <main+0x11e>
 800133c:	40021000 	.word	0x40021000
 8001340:	50000400 	.word	0x50000400
 8001344:	10210000 	.word	0x10210000
 8001348:	20000528 	.word	0x20000528
 800134c:	40003800 	.word	0x40003800
 8001350:	20000580 	.word	0x20000580

08001354 <HAL_GPIO_EXTI_Callback>:

}

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001354:	b510      	push	{r4, lr}
	if(isDim){
 8001356:	4c08      	ldr	r4, [pc, #32]	; (8001378 <HAL_GPIO_EXTI_Callback+0x24>)

			sendCMD(contrastHigh, (uint16_t)sizeof(contrastHigh));
 8001358:	2102      	movs	r1, #2
	if(isDim){
 800135a:	7823      	ldrb	r3, [r4, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d005      	beq.n	800136c <HAL_GPIO_EXTI_Callback+0x18>
			sendCMD(contrastHigh, (uint16_t)sizeof(contrastHigh));
 8001360:	4806      	ldr	r0, [pc, #24]	; (800137c <HAL_GPIO_EXTI_Callback+0x28>)
 8001362:	f000 f80f 	bl	8001384 <sendCMD>
			isDim = 0;
 8001366:	2300      	movs	r3, #0
		}
	else{

			 sendCMD(contrastLow, (uint16_t)sizeof(contrastLow));
			 isDim=1;
 8001368:	7023      	strb	r3, [r4, #0]
		}
}
 800136a:	bd10      	pop	{r4, pc}
			 sendCMD(contrastLow, (uint16_t)sizeof(contrastLow));
 800136c:	4804      	ldr	r0, [pc, #16]	; (8001380 <HAL_GPIO_EXTI_Callback+0x2c>)
 800136e:	f000 f809 	bl	8001384 <sendCMD>
			 isDim=1;
 8001372:	2301      	movs	r3, #1
 8001374:	e7f8      	b.n	8001368 <HAL_GPIO_EXTI_Callback+0x14>
 8001376:	46c0      	nop			; (mov r8, r8)
 8001378:	20000520 	.word	0x20000520
 800137c:	20000000 	.word	0x20000000
 8001380:	20000002 	.word	0x20000002

08001384 <sendCMD>:


	  sendDATA(MARSBMP, (uint16_t)sizeof(MARSBMP));
}

void sendCMD(uint8_t *cmd, uint16_t size) {
 8001384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001386:	0006      	movs	r6, r0
 8001388:	000f      	movs	r7, r1
	//set dc low
	HAL_GPIO_WritePin(oled_DC_GPIO_Port,  oled_DC_Pin, GPIO_PIN_RESET);
 800138a:	20a0      	movs	r0, #160	; 0xa0
 800138c:	2180      	movs	r1, #128	; 0x80
	//set CS low

	HAL_GPIO_WritePin(oled_NSS_GPIO_Port,  oled_NSS_Pin, GPIO_PIN_RESET);
 800138e:	2580      	movs	r5, #128	; 0x80
 8001390:	4c0c      	ldr	r4, [pc, #48]	; (80013c4 <sendCMD+0x40>)
 8001392:	016d      	lsls	r5, r5, #5
	HAL_GPIO_WritePin(oled_DC_GPIO_Port,  oled_DC_Pin, GPIO_PIN_RESET);
 8001394:	2200      	movs	r2, #0
 8001396:	0049      	lsls	r1, r1, #1
 8001398:	05c0      	lsls	r0, r0, #23
 800139a:	f7ff f885 	bl	80004a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(oled_NSS_GPIO_Port,  oled_NSS_Pin, GPIO_PIN_RESET);
 800139e:	0029      	movs	r1, r5
 80013a0:	0020      	movs	r0, r4
 80013a2:	2200      	movs	r2, #0
 80013a4:	f7ff f880 	bl	80004a8 <HAL_GPIO_WritePin>
	//send cmd
	HAL_SPI_Transmit(&hspi2, cmd, size, 1000);
 80013a8:	23fa      	movs	r3, #250	; 0xfa
 80013aa:	003a      	movs	r2, r7
 80013ac:	0031      	movs	r1, r6
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	4805      	ldr	r0, [pc, #20]	; (80013c8 <sendCMD+0x44>)
 80013b2:	f7ff fca5 	bl	8000d00 <HAL_SPI_Transmit>
	//set CS high

	HAL_GPIO_WritePin(oled_NSS_GPIO_Port,  oled_NSS_Pin, GPIO_PIN_SET);
 80013b6:	0029      	movs	r1, r5
 80013b8:	2201      	movs	r2, #1
 80013ba:	0020      	movs	r0, r4
 80013bc:	f7ff f874 	bl	80004a8 <HAL_GPIO_WritePin>

}
 80013c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013c2:	46c0      	nop			; (mov r8, r8)
 80013c4:	50000400 	.word	0x50000400
 80013c8:	20000528 	.word	0x20000528

080013cc <sendDATA>:

void sendDATA(uint8_t *data, uint16_t size) {
 80013cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ce:	0006      	movs	r6, r0
 80013d0:	000f      	movs	r7, r1
	//send and go through buffer
	//set dc high

	HAL_GPIO_WritePin(oled_DC_GPIO_Port, oled_DC_Pin, GPIO_PIN_SET);
 80013d2:	20a0      	movs	r0, #160	; 0xa0
 80013d4:	2180      	movs	r1, #128	; 0x80
	//set CS low

	HAL_GPIO_WritePin(oled_NSS_GPIO_Port,  oled_NSS_Pin, GPIO_PIN_RESET);
 80013d6:	2580      	movs	r5, #128	; 0x80
 80013d8:	4c0c      	ldr	r4, [pc, #48]	; (800140c <sendDATA+0x40>)
 80013da:	016d      	lsls	r5, r5, #5
	HAL_GPIO_WritePin(oled_DC_GPIO_Port, oled_DC_Pin, GPIO_PIN_SET);
 80013dc:	2201      	movs	r2, #1
 80013de:	0049      	lsls	r1, r1, #1
 80013e0:	05c0      	lsls	r0, r0, #23
 80013e2:	f7ff f861 	bl	80004a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(oled_NSS_GPIO_Port,  oled_NSS_Pin, GPIO_PIN_RESET);
 80013e6:	0029      	movs	r1, r5
 80013e8:	0020      	movs	r0, r4
 80013ea:	2200      	movs	r2, #0
 80013ec:	f7ff f85c 	bl	80004a8 <HAL_GPIO_WritePin>
	//sendData
	//for(int i=0; i<dataSize;i++);
	HAL_SPI_Transmit(&hspi2, data, size, 1000);
 80013f0:	23fa      	movs	r3, #250	; 0xfa
 80013f2:	003a      	movs	r2, r7
 80013f4:	0031      	movs	r1, r6
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	4805      	ldr	r0, [pc, #20]	; (8001410 <sendDATA+0x44>)
 80013fa:	f7ff fc81 	bl	8000d00 <HAL_SPI_Transmit>
	//set CS high
	HAL_GPIO_WritePin(oled_NSS_GPIO_Port,  oled_NSS_Pin, GPIO_PIN_SET);
 80013fe:	0029      	movs	r1, r5
 8001400:	2201      	movs	r2, #1
 8001402:	0020      	movs	r0, r4
 8001404:	f7ff f850 	bl	80004a8 <HAL_GPIO_WritePin>
	//set dc high

	//HAL_GPIO_WritePin(oled_DC_GPIO_Port, oled_DC_Pin, GPIO_PIN_RESET);
}
 8001408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800140a:	46c0      	nop			; (mov r8, r8)
 800140c:	50000400 	.word	0x50000400
 8001410:	20000528 	.word	0x20000528

08001414 <turnOnScreen>:
HAL_GPIO_WritePin(GPIOB, oled_NSS_Pin|ole_RES_Pin, GPIO_PIN_SET);
 8001414:	21a0      	movs	r1, #160	; 0xa0
void turnOnScreen(){
 8001416:	b530      	push	{r4, r5, lr}
	uint8_t turnOn[] = {0xA8, 0x3F, 0xD3, 0x00, 0x20,0x10, 0xAF, 0xAC};// 0xAF}; //need to change
 8001418:	2508      	movs	r5, #8
void turnOnScreen(){
 800141a:	b085      	sub	sp, #20
HAL_GPIO_WritePin(GPIOB, oled_NSS_Pin|ole_RES_Pin, GPIO_PIN_SET);
 800141c:	2201      	movs	r2, #1
 800141e:	01c9      	lsls	r1, r1, #7
 8001420:	480e      	ldr	r0, [pc, #56]	; (800145c <turnOnScreen+0x48>)
 8001422:	f7ff f841 	bl	80004a8 <HAL_GPIO_WritePin>
	uint8_t turnOn[] = {0xA8, 0x3F, 0xD3, 0x00, 0x20,0x10, 0xAF, 0xAC};// 0xAF}; //need to change
 8001426:	4c0e      	ldr	r4, [pc, #56]	; (8001460 <turnOnScreen+0x4c>)
 8001428:	002a      	movs	r2, r5
 800142a:	0021      	movs	r1, r4
 800142c:	a802      	add	r0, sp, #8
 800142e:	f000 fab3 	bl	8001998 <memcpy>
	uint8_t orientation[]={0xC8, 0xA1};
 8001432:	1961      	adds	r1, r4, r5
 8001434:	2402      	movs	r4, #2
 8001436:	a801      	add	r0, sp, #4
 8001438:	0022      	movs	r2, r4
 800143a:	f000 faad 	bl	8001998 <memcpy>
	 sendCMD(turnOn, (uint16_t)sizeof(turnOn));
 800143e:	0029      	movs	r1, r5
 8001440:	a802      	add	r0, sp, #8
 8001442:	f7ff ff9f 	bl	8001384 <sendCMD>
	  sendCMD(orientation, (uint16_t)sizeof(orientation));
 8001446:	0021      	movs	r1, r4
 8001448:	a801      	add	r0, sp, #4
 800144a:	f7ff ff9b 	bl	8001384 <sendCMD>
	  sendDATA(MARSBMP, (uint16_t)sizeof(MARSBMP));
 800144e:	2180      	movs	r1, #128	; 0x80
 8001450:	4804      	ldr	r0, [pc, #16]	; (8001464 <turnOnScreen+0x50>)
 8001452:	00c9      	lsls	r1, r1, #3
 8001454:	f7ff ffba 	bl	80013cc <sendDATA>
}
 8001458:	b005      	add	sp, #20
 800145a:	bd30      	pop	{r4, r5, pc}
 800145c:	50000400 	.word	0x50000400
 8001460:	080019d4 	.word	0x080019d4
 8001464:	20000004 	.word	0x20000004

08001468 <clearScreen>:

void clearScreen(){
 8001468:	b510      	push	{r4, lr}
 800146a:	2480      	movs	r4, #128	; 0x80
 800146c:	00e4      	lsls	r4, r4, #3
	for (int i=0; i<1024; i++){
		  sendDATA(space, (uint16_t)sizeof(space));
 800146e:	2101      	movs	r1, #1
 8001470:	4803      	ldr	r0, [pc, #12]	; (8001480 <clearScreen+0x18>)
 8001472:	3c01      	subs	r4, #1
 8001474:	f7ff ffaa 	bl	80013cc <sendDATA>
	for (int i=0; i<1024; i++){
 8001478:	2c00      	cmp	r4, #0
 800147a:	d1f8      	bne.n	800146e <clearScreen+0x6>
	  }
}
 800147c:	bd10      	pop	{r4, pc}
 800147e:	46c0      	nop			; (mov r8, r8)
 8001480:	20000521 	.word	0x20000521

08001484 <sendString>:

void sendString(char *string, uint8_t header){
 8001484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001486:	0005      	movs	r5, r0
			wordSize = (uint16_t)sizeof(letter);
			if (string[i]>='A' && string[i] <= 'Z'){
				letter[j] = fonts[(string[i]-'A')*6+j];
			}
			else if(string[i] >= '0' && string[i] <= '9'){
				letter[j] = fonts[(string[i]-'0'+26)*6+j];
 8001488:	2406      	movs	r4, #6
				letter[j] = fonts[38*6+j];
				//wordSize=2;
			}
			else if(string[i]=='@'){
				letter[j] = fonts[38*6+j];
				wordSize=2;
 800148a:	2602      	movs	r6, #2
void sendString(char *string, uint8_t header){
 800148c:	b089      	sub	sp, #36	; 0x24
 800148e:	9103      	str	r1, [sp, #12]
	for(int i =0; string[i]!='\0'; i++){
 8001490:	782a      	ldrb	r2, [r5, #0]
 8001492:	2a00      	cmp	r2, #0
 8001494:	d060      	beq.n	8001558 <sendString+0xd4>
				letter[j] = fonts[(string[i]-'0'+26)*6+j];
 8001496:	0013      	movs	r3, r2
 8001498:	3b16      	subs	r3, #22
 800149a:	4363      	muls	r3, r4
				letter[j] = fonts[(string[i]-'A')*6+j];
 800149c:	0011      	movs	r1, r2
				letter[j] = fonts[(string[i]-'0'+26)*6+j];
 800149e:	9301      	str	r3, [sp, #4]
				letter[j] = fonts[(string[i]-'A')*6+j];
 80014a0:	0023      	movs	r3, r4
 80014a2:	3941      	subs	r1, #65	; 0x41
 80014a4:	434b      	muls	r3, r1
			else if(string[i] >= '0' && string[i] <= '9'){
 80014a6:	0010      	movs	r0, r2
				letter[j] = fonts[(string[i]-'A')*6+j];
 80014a8:	9302      	str	r3, [sp, #8]
 80014aa:	2300      	movs	r3, #0
			if (string[i]>='A' && string[i] <= 'Z'){
 80014ac:	b2c9      	uxtb	r1, r1
			else if(string[i] >= '0' && string[i] <= '9'){
 80014ae:	3830      	subs	r0, #48	; 0x30
			if (string[i]>='A' && string[i] <= 'Z'){
 80014b0:	9104      	str	r1, [sp, #16]
			else if(string[i] >= '0' && string[i] <= '9'){
 80014b2:	b2c1      	uxtb	r1, r0
 80014b4:	9105      	str	r1, [sp, #20]
			if (string[i]>='A' && string[i] <= 'Z'){
 80014b6:	9904      	ldr	r1, [sp, #16]
 80014b8:	2919      	cmp	r1, #25
 80014ba:	d807      	bhi.n	80014cc <sendString+0x48>
				letter[j] = fonts[(string[i]-'A')*6+j];
 80014bc:	4927      	ldr	r1, [pc, #156]	; (800155c <sendString+0xd8>)
 80014be:	9802      	ldr	r0, [sp, #8]
				letter[j] = fonts[(string[i]-'0'+26)*6+j];
 80014c0:	1809      	adds	r1, r1, r0
 80014c2:	5cc9      	ldrb	r1, [r1, r3]
			}
			else if(string[i]=='*'){
				letter[j] = fonts[37*6+j];
 80014c4:	a806      	add	r0, sp, #24
 80014c6:	54c1      	strb	r1, [r0, r3]
			wordSize = (uint16_t)sizeof(letter);
 80014c8:	0021      	movs	r1, r4
 80014ca:	e019      	b.n	8001500 <sendString+0x7c>
			else if(string[i] >= '0' && string[i] <= '9'){
 80014cc:	9905      	ldr	r1, [sp, #20]
 80014ce:	2909      	cmp	r1, #9
 80014d0:	d802      	bhi.n	80014d8 <sendString+0x54>
				letter[j] = fonts[(string[i]-'0'+26)*6+j];
 80014d2:	4922      	ldr	r1, [pc, #136]	; (800155c <sendString+0xd8>)
 80014d4:	9801      	ldr	r0, [sp, #4]
 80014d6:	e7f3      	b.n	80014c0 <sendString+0x3c>
			else if(string[i]=='%'){
 80014d8:	2a25      	cmp	r2, #37	; 0x25
 80014da:	d106      	bne.n	80014ea <sendString+0x66>
				letter[j] = fonts[36*6+j];
 80014dc:	491f      	ldr	r1, [pc, #124]	; (800155c <sendString+0xd8>)
 80014de:	468c      	mov	ip, r1
 80014e0:	0019      	movs	r1, r3
 80014e2:	31d8      	adds	r1, #216	; 0xd8
				letter[j] = fonts[37*6+j];
 80014e4:	4660      	mov	r0, ip
 80014e6:	5c41      	ldrb	r1, [r0, r1]
 80014e8:	e7ec      	b.n	80014c4 <sendString+0x40>
			else if(string[i]==':'){
 80014ea:	2a3a      	cmp	r2, #58	; 0x3a
 80014ec:	d117      	bne.n	800151e <sendString+0x9a>
				letter[j]=fonts[39*6+j];
 80014ee:	491b      	ldr	r1, [pc, #108]	; (800155c <sendString+0xd8>)
 80014f0:	468c      	mov	ip, r1
 80014f2:	0019      	movs	r1, r3
 80014f4:	31ea      	adds	r1, #234	; 0xea
				letter[j] = fonts[38*6+j];
 80014f6:	4660      	mov	r0, ip
 80014f8:	5c41      	ldrb	r1, [r0, r1]
 80014fa:	a806      	add	r0, sp, #24
 80014fc:	54c1      	strb	r1, [r0, r3]
				wordSize=2;
 80014fe:	0031      	movs	r1, r6
			}
			letter[j]=letter[j]|header;
 8001500:	a806      	add	r0, sp, #24
 8001502:	5c18      	ldrb	r0, [r3, r0]
 8001504:	9f03      	ldr	r7, [sp, #12]
 8001506:	4338      	orrs	r0, r7
 8001508:	4684      	mov	ip, r0
 800150a:	4667      	mov	r7, ip
 800150c:	a806      	add	r0, sp, #24
 800150e:	541f      	strb	r7, [r3, r0]
		for(int j =0; j<6; j++){
 8001510:	3301      	adds	r3, #1
 8001512:	2b06      	cmp	r3, #6
 8001514:	d1cf      	bne.n	80014b6 <sendString+0x32>
		}
		sendDATA(letter, wordSize);
 8001516:	f7ff ff59 	bl	80013cc <sendDATA>
 800151a:	3501      	adds	r5, #1
 800151c:	e7b8      	b.n	8001490 <sendString+0xc>
			else if(string[i]=='.'){
 800151e:	2a2e      	cmp	r2, #46	; 0x2e
 8001520:	d104      	bne.n	800152c <sendString+0xa8>
				letter[j]=fonts[39*6+2+j];
 8001522:	490e      	ldr	r1, [pc, #56]	; (800155c <sendString+0xd8>)
 8001524:	468c      	mov	ip, r1
 8001526:	0019      	movs	r1, r3
 8001528:	31ec      	adds	r1, #236	; 0xec
 800152a:	e7e4      	b.n	80014f6 <sendString+0x72>
			else if(string[i]==' '){
 800152c:	2a20      	cmp	r2, #32
 800152e:	d104      	bne.n	800153a <sendString+0xb6>
				letter[j] = fonts[38*6+j];
 8001530:	490a      	ldr	r1, [pc, #40]	; (800155c <sendString+0xd8>)
 8001532:	468c      	mov	ip, r1
 8001534:	0019      	movs	r1, r3
 8001536:	31e4      	adds	r1, #228	; 0xe4
 8001538:	e7d4      	b.n	80014e4 <sendString+0x60>
			else if(string[i]=='@'){
 800153a:	2a40      	cmp	r2, #64	; 0x40
 800153c:	d104      	bne.n	8001548 <sendString+0xc4>
				letter[j] = fonts[38*6+j];
 800153e:	4907      	ldr	r1, [pc, #28]	; (800155c <sendString+0xd8>)
 8001540:	468c      	mov	ip, r1
 8001542:	0019      	movs	r1, r3
 8001544:	31e4      	adds	r1, #228	; 0xe4
 8001546:	e7d6      	b.n	80014f6 <sendString+0x72>
			wordSize = (uint16_t)sizeof(letter);
 8001548:	0021      	movs	r1, r4
			else if(string[i]=='*'){
 800154a:	2a2a      	cmp	r2, #42	; 0x2a
 800154c:	d1d8      	bne.n	8001500 <sendString+0x7c>
				letter[j] = fonts[37*6+j];
 800154e:	4903      	ldr	r1, [pc, #12]	; (800155c <sendString+0xd8>)
 8001550:	468c      	mov	ip, r1
 8001552:	0019      	movs	r1, r3
 8001554:	31de      	adds	r1, #222	; 0xde
 8001556:	e7c5      	b.n	80014e4 <sendString+0x60>
	}
}
 8001558:	b009      	add	sp, #36	; 0x24
 800155a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800155c:	20000404 	.word	0x20000404

08001560 <updateScreen>:

void updateScreen(char* hr, char* spo2, char* distance, char* user){
 8001560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001562:	001e      	movs	r6, r3

	uint8_t page[] = {0x22, 0x00,0x00};
 8001564:	2500      	movs	r5, #0
 8001566:	2322      	movs	r3, #34	; 0x22
void updateScreen(char* hr, char* spo2, char* distance, char* user){
 8001568:	b087      	sub	sp, #28
 800156a:	9101      	str	r1, [sp, #4]

	uint8_t col[]= {0x21, 0x00, 0x7F};
 800156c:	4930      	ldr	r1, [pc, #192]	; (8001630 <updateScreen+0xd0>)
void updateScreen(char* hr, char* spo2, char* distance, char* user){
 800156e:	9203      	str	r2, [sp, #12]
	uint8_t col[]= {0x21, 0x00, 0x7F};
 8001570:	ac05      	add	r4, sp, #20
	uint8_t page[] = {0x22, 0x00,0x00};
 8001572:	aa04      	add	r2, sp, #16
 8001574:	7013      	strb	r3, [r2, #0]
 8001576:	7055      	strb	r5, [r2, #1]
 8001578:	7095      	strb	r5, [r2, #2]
void updateScreen(char* hr, char* spo2, char* distance, char* user){
 800157a:	0007      	movs	r7, r0
	uint8_t col[]= {0x21, 0x00, 0x7F};
 800157c:	2203      	movs	r2, #3
 800157e:	310a      	adds	r1, #10
 8001580:	0020      	movs	r0, r4
 8001582:	f000 fa09 	bl	8001998 <memcpy>

	//hr col is 0-18
	//spo2 col is - 33-51
	//distance col is for
	if(user[0]=='1'){
 8001586:	7833      	ldrb	r3, [r6, #0]
 8001588:	2b31      	cmp	r3, #49	; 0x31
 800158a:	d11d      	bne.n	80015c8 <updateScreen+0x68>
		page[1]=0x00;
		page[2]=0x00;
		col[1]=0x00;
		col[2]=0x12;
 800158c:	3b1f      	subs	r3, #31
		sendCMD(page,(uint16_t)sizeof(page));
 800158e:	2103      	movs	r1, #3
 8001590:	a804      	add	r0, sp, #16
		col[2]=0x12;
 8001592:	70a3      	strb	r3, [r4, #2]
		sendCMD(page,(uint16_t)sizeof(page));
 8001594:	f7ff fef6 	bl	8001384 <sendCMD>
		sendCMD(col, (uint16_t)sizeof(col));
 8001598:	2103      	movs	r1, #3
 800159a:	0020      	movs	r0, r4
 800159c:	f7ff fef2 	bl	8001384 <sendCMD>
		sendString(hr,0x00);
 80015a0:	0029      	movs	r1, r5
 80015a2:	0038      	movs	r0, r7
 80015a4:	f7ff ff6e 	bl	8001484 <sendString>
		col[1]=0x21;
 80015a8:	2321      	movs	r3, #33	; 0x21
		col[2]=0x32;
		sendCMD(page,(uint16_t)sizeof(page));
 80015aa:	2103      	movs	r1, #3
		col[1]=0x21;
 80015ac:	7063      	strb	r3, [r4, #1]
		sendCMD(page,(uint16_t)sizeof(page));
 80015ae:	a804      	add	r0, sp, #16
		col[2]=0x32;
 80015b0:	3311      	adds	r3, #17
 80015b2:	70a3      	strb	r3, [r4, #2]
		sendCMD(page,(uint16_t)sizeof(page));
 80015b4:	f7ff fee6 	bl	8001384 <sendCMD>

		sendCMD(col, (uint16_t)sizeof(col));
 80015b8:	2103      	movs	r1, #3
 80015ba:	0020      	movs	r0, r4
 80015bc:	f7ff fee2 	bl	8001384 <sendCMD>
		sendString(spo2,0x00);
 80015c0:	0029      	movs	r1, r5
 80015c2:	9801      	ldr	r0, [sp, #4]
 80015c4:	f7ff ff5e 	bl	8001484 <sendString>


	}
	if(user[0]=='2'){
 80015c8:	7833      	ldrb	r3, [r6, #0]
 80015ca:	9302      	str	r3, [sp, #8]
 80015cc:	2b32      	cmp	r3, #50	; 0x32
 80015ce:	d12c      	bne.n	800162a <updateScreen+0xca>

		page[1]=0x03;
 80015d0:	2503      	movs	r5, #3
 80015d2:	ab04      	add	r3, sp, #16
		page[2]=0x03;
		col[1]=0x00;
 80015d4:	2600      	movs	r6, #0
		page[1]=0x03;
 80015d6:	705d      	strb	r5, [r3, #1]
		page[2]=0x03;
 80015d8:	709d      	strb	r5, [r3, #2]
		col[2]=0x12;
 80015da:	2312      	movs	r3, #18
		sendCMD(page,(uint16_t)sizeof(page));
 80015dc:	0029      	movs	r1, r5
 80015de:	a804      	add	r0, sp, #16
		col[2]=0x12;
 80015e0:	70a3      	strb	r3, [r4, #2]
		col[1]=0x00;
 80015e2:	7066      	strb	r6, [r4, #1]
		sendCMD(page,(uint16_t)sizeof(page));
 80015e4:	f7ff fece 	bl	8001384 <sendCMD>
		sendCMD(col, (uint16_t)sizeof(col));
 80015e8:	0029      	movs	r1, r5
 80015ea:	0020      	movs	r0, r4
 80015ec:	f7ff feca 	bl	8001384 <sendCMD>
		sendString(hr,0x00);
 80015f0:	0031      	movs	r1, r6
 80015f2:	0038      	movs	r0, r7
 80015f4:	f7ff ff46 	bl	8001484 <sendString>
		col[1]=0x21;
 80015f8:	2321      	movs	r3, #33	; 0x21
 80015fa:	7063      	strb	r3, [r4, #1]
		col[2]=0x32;
 80015fc:	466b      	mov	r3, sp
 80015fe:	7a1b      	ldrb	r3, [r3, #8]
		sendCMD(col, (uint16_t)sizeof(col));
 8001600:	0029      	movs	r1, r5
 8001602:	0020      	movs	r0, r4
		col[2]=0x32;
 8001604:	70a3      	strb	r3, [r4, #2]
		sendCMD(col, (uint16_t)sizeof(col));
 8001606:	f7ff febd 	bl	8001384 <sendCMD>
		sendString(spo2,0x00);
 800160a:	0031      	movs	r1, r6
 800160c:	9801      	ldr	r0, [sp, #4]
 800160e:	f7ff ff39 	bl	8001484 <sendString>
		col[1]=0x41;
 8001612:	2341      	movs	r3, #65	; 0x41
		col[2]=0x59;
		sendCMD(col, (uint16_t)sizeof(col));
 8001614:	0029      	movs	r1, r5
		col[1]=0x41;
 8001616:	7063      	strb	r3, [r4, #1]
		sendCMD(col, (uint16_t)sizeof(col));
 8001618:	0020      	movs	r0, r4
		col[2]=0x59;
 800161a:	3318      	adds	r3, #24
 800161c:	70a3      	strb	r3, [r4, #2]
		sendCMD(col, (uint16_t)sizeof(col));
 800161e:	f7ff feb1 	bl	8001384 <sendCMD>
		sendString(distance,0x00);
 8001622:	0031      	movs	r1, r6
 8001624:	9803      	ldr	r0, [sp, #12]
 8001626:	f7ff ff2d 	bl	8001484 <sendString>
	}
}
 800162a:	b007      	add	sp, #28
 800162c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800162e:	46c0      	nop			; (mov r8, r8)
 8001630:	080019d4 	.word	0x080019d4

08001634 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001634:	2201      	movs	r2, #1
 8001636:	4b05      	ldr	r3, [pc, #20]	; (800164c <HAL_MspInit+0x18>)
 8001638:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800163a:	430a      	orrs	r2, r1
 800163c:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800163e:	2280      	movs	r2, #128	; 0x80
 8001640:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001642:	0552      	lsls	r2, r2, #21
 8001644:	430a      	orrs	r2, r1
 8001646:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001648:	4770      	bx	lr
 800164a:	46c0      	nop			; (mov r8, r8)
 800164c:	40021000 	.word	0x40021000

08001650 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001650:	b510      	push	{r4, lr}
 8001652:	0004      	movs	r4, r0
 8001654:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001656:	2214      	movs	r2, #20
 8001658:	2100      	movs	r1, #0
 800165a:	a801      	add	r0, sp, #4
 800165c:	f000 f9a5 	bl	80019aa <memset>
  if(hspi->Instance==SPI2)
 8001660:	4b0e      	ldr	r3, [pc, #56]	; (800169c <HAL_SPI_MspInit+0x4c>)
 8001662:	6822      	ldr	r2, [r4, #0]
 8001664:	429a      	cmp	r2, r3
 8001666:	d117      	bne.n	8001698 <HAL_SPI_MspInit+0x48>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001668:	2280      	movs	r2, #128	; 0x80
 800166a:	4b0d      	ldr	r3, [pc, #52]	; (80016a0 <HAL_SPI_MspInit+0x50>)
 800166c:	01d2      	lsls	r2, r2, #7
 800166e:	6b99      	ldr	r1, [r3, #56]	; 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001670:	480c      	ldr	r0, [pc, #48]	; (80016a4 <HAL_SPI_MspInit+0x54>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001672:	430a      	orrs	r2, r1
 8001674:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001676:	2202      	movs	r2, #2
 8001678:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800167a:	4311      	orrs	r1, r2
 800167c:	62d9      	str	r1, [r3, #44]	; 0x2c
 800167e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001680:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001682:	4013      	ands	r3, r2
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001688:	23a0      	movs	r3, #160	; 0xa0
 800168a:	021b      	lsls	r3, r3, #8
 800168c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168e:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001690:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001692:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001694:	f7fe fe52 	bl	800033c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001698:	b006      	add	sp, #24
 800169a:	bd10      	pop	{r4, pc}
 800169c:	40003800 	.word	0x40003800
 80016a0:	40021000 	.word	0x40021000
 80016a4:	50000400 	.word	0x50000400

080016a8 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 80016a8:	2380      	movs	r3, #128	; 0x80
 80016aa:	6802      	ldr	r2, [r0, #0]
{
 80016ac:	b510      	push	{r4, lr}
  if(htim_base->Instance==TIM2)
 80016ae:	05db      	lsls	r3, r3, #23
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d10c      	bne.n	80016ce <HAL_TIM_Base_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016b4:	2301      	movs	r3, #1
 80016b6:	4a06      	ldr	r2, [pc, #24]	; (80016d0 <HAL_TIM_Base_MspInit+0x28>)
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016b8:	200f      	movs	r0, #15
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016ba:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80016bc:	430b      	orrs	r3, r1
 80016be:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016c0:	2200      	movs	r2, #0
 80016c2:	0011      	movs	r1, r2
 80016c4:	f7fe fde6 	bl	8000294 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016c8:	200f      	movs	r0, #15
 80016ca:	f7fe fe13 	bl	80002f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016ce:	bd10      	pop	{r4, pc}
 80016d0:	40021000 	.word	0x40021000

080016d4 <NMI_Handler>:
 80016d4:	4770      	bx	lr

080016d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016d6:	e7fe      	b.n	80016d6 <HardFault_Handler>

080016d8 <SVC_Handler>:
 80016d8:	4770      	bx	lr

080016da <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016da:	4770      	bx	lr

080016dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016dc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016de:	f7fe fdcb 	bl	8000278 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016e2:	bd10      	pop	{r4, pc}

080016e4 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80016e4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80016e6:	2001      	movs	r0, #1
 80016e8:	f7fe fee4 	bl	80004b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80016ec:	bd10      	pop	{r4, pc}
	...

080016f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

	uint8_t page[] = {0x22, 0x00,0x00};
 80016f2:	2322      	movs	r3, #34	; 0x22
 80016f4:	466a      	mov	r2, sp
 80016f6:	2500      	movs	r5, #0

	uint8_t col[]= {0x21, 0x00, 0x7F};
 80016f8:	ac01      	add	r4, sp, #4
	uint8_t page[] = {0x22, 0x00,0x00};
 80016fa:	7013      	strb	r3, [r2, #0]
 80016fc:	7055      	strb	r5, [r2, #1]
 80016fe:	7095      	strb	r5, [r2, #2]
	uint8_t col[]= {0x21, 0x00, 0x7F};
 8001700:	495b      	ldr	r1, [pc, #364]	; (8001870 <TIM2_IRQHandler+0x180>)
 8001702:	2203      	movs	r2, #3
 8001704:	0020      	movs	r0, r4
 8001706:	f000 f947 	bl	8001998 <memcpy>


	char* message = "                      ";

	if(isSelfSetup){
 800170a:	4f5a      	ldr	r7, [pc, #360]	; (8001874 <TIM2_IRQHandler+0x184>)
 800170c:	783b      	ldrb	r3, [r7, #0]
 800170e:	42ab      	cmp	r3, r5
 8001710:	d02e      	beq.n	8001770 <TIM2_IRQHandler+0x80>
		clearScreen();
 8001712:	f7ff fea9 	bl	8001468 <clearScreen>
		sendCMD(page,(uint16_t)sizeof(page));
 8001716:	2103      	movs	r1, #3
 8001718:	4668      	mov	r0, sp
 800171a:	f7ff fe33 	bl	8001384 <sendCMD>

		sendCMD(col, (uint16_t)sizeof(col));
 800171e:	2103      	movs	r1, #3
 8001720:	0020      	movs	r0, r4
 8001722:	f7ff fe2f 	bl	8001384 <sendCMD>
		sendString(message,0x00);
 8001726:	0029      	movs	r1, r5
 8001728:	4853      	ldr	r0, [pc, #332]	; (8001878 <TIM2_IRQHandler+0x188>)
 800172a:	f7ff feab 	bl	8001484 <sendString>
		col[1]=0x13;
 800172e:	2313      	movs	r3, #19
		col[2]=0x32;
		message = "@* ";

		sendCMD(page,(uint16_t)sizeof(page));
 8001730:	2103      	movs	r1, #3
		col[1]=0x13;
 8001732:	7063      	strb	r3, [r4, #1]
		sendCMD(page,(uint16_t)sizeof(page));
 8001734:	4668      	mov	r0, sp
		col[2]=0x32;
 8001736:	331f      	adds	r3, #31
 8001738:	70a3      	strb	r3, [r4, #2]
		sendCMD(page,(uint16_t)sizeof(page));
 800173a:	f7ff fe23 	bl	8001384 <sendCMD>

		sendCMD(col, (uint16_t)sizeof(col));
 800173e:	2103      	movs	r1, #3
 8001740:	0020      	movs	r0, r4
 8001742:	f7ff fe1f 	bl	8001384 <sendCMD>
		sendString(message,0x00);
 8001746:	0029      	movs	r1, r5
 8001748:	484c      	ldr	r0, [pc, #304]	; (800187c <TIM2_IRQHandler+0x18c>)
 800174a:	f7ff fe9b 	bl	8001484 <sendString>

		col[1]=0x33;
 800174e:	2333      	movs	r3, #51	; 0x33
		col[2]=0x39;
		message = "%";

		sendCMD(page,(uint16_t)sizeof(page));
 8001750:	2103      	movs	r1, #3
		col[1]=0x33;
 8001752:	7063      	strb	r3, [r4, #1]
		sendCMD(page,(uint16_t)sizeof(page));
 8001754:	4668      	mov	r0, sp
		col[2]=0x39;
 8001756:	3306      	adds	r3, #6
 8001758:	70a3      	strb	r3, [r4, #2]
		sendCMD(page,(uint16_t)sizeof(page));
 800175a:	f7ff fe13 	bl	8001384 <sendCMD>

		sendCMD(col, (uint16_t)sizeof(col));
 800175e:	2103      	movs	r1, #3
 8001760:	0020      	movs	r0, r4
 8001762:	f7ff fe0f 	bl	8001384 <sendCMD>
		sendString(message,0x00);
 8001766:	0029      	movs	r1, r5
 8001768:	4845      	ldr	r0, [pc, #276]	; (8001880 <TIM2_IRQHandler+0x190>)
 800176a:	f7ff fe8b 	bl	8001484 <sendString>
		isSelfSetup = 0;
 800176e:	703d      	strb	r5, [r7, #0]


	}
	if(isOtherSetup){
 8001770:	4b44      	ldr	r3, [pc, #272]	; (8001884 <TIM2_IRQHandler+0x194>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d048      	beq.n	800180a <TIM2_IRQHandler+0x11a>
		// user name

		message = "TOTO ";
		page[1]=0x02;
 8001778:	466a      	mov	r2, sp
 800177a:	2302      	movs	r3, #2
		page[2]=0x02;

		col[1]=0x00;
 800177c:	2600      	movs	r6, #0
		page[1]=0x02;
 800177e:	7053      	strb	r3, [r2, #1]
		page[2]=0x02;
 8001780:	7093      	strb	r3, [r2, #2]
		col[2]=0x7F;
		sendCMD(page,(uint16_t)sizeof(page));
 8001782:	2103      	movs	r1, #3
		col[2]=0x7F;
 8001784:	337d      	adds	r3, #125	; 0x7d
		sendCMD(page,(uint16_t)sizeof(page));
 8001786:	4668      	mov	r0, sp
		col[2]=0x7F;
 8001788:	70a3      	strb	r3, [r4, #2]
		col[1]=0x00;
 800178a:	7066      	strb	r6, [r4, #1]
		sendCMD(page,(uint16_t)sizeof(page));
 800178c:	f7ff fdfa 	bl	8001384 <sendCMD>

		sendCMD(col, (uint16_t)sizeof(col));
 8001790:	2103      	movs	r1, #3
 8001792:	0020      	movs	r0, r4
 8001794:	f7ff fdf6 	bl	8001384 <sendCMD>
		sendString(message,0x00);
 8001798:	0031      	movs	r1, r6
 800179a:	483b      	ldr	r0, [pc, #236]	; (8001888 <TIM2_IRQHandler+0x198>)
 800179c:	f7ff fe72 	bl	8001484 <sendString>

		page[1]=0x03;
 80017a0:	2503      	movs	r5, #3
 80017a2:	466b      	mov	r3, sp
 80017a4:	705d      	strb	r5, [r3, #1]
		page[2]=0x03;
 80017a6:	709d      	strb	r5, [r3, #2]
		col[1]=0x13;
 80017a8:	2313      	movs	r3, #19
		col[2]=0x20;
		message = "@* ";
		sendCMD(page,(uint16_t)sizeof(page));
 80017aa:	0029      	movs	r1, r5
		col[1]=0x13;
 80017ac:	7063      	strb	r3, [r4, #1]
		sendCMD(page,(uint16_t)sizeof(page));
 80017ae:	4668      	mov	r0, sp
		col[2]=0x20;
 80017b0:	330d      	adds	r3, #13
 80017b2:	70a3      	strb	r3, [r4, #2]
		sendCMD(page,(uint16_t)sizeof(page));
 80017b4:	f7ff fde6 	bl	8001384 <sendCMD>
		sendCMD(col, (uint16_t)sizeof(col));
 80017b8:	0029      	movs	r1, r5
 80017ba:	0020      	movs	r0, r4
 80017bc:	f7ff fde2 	bl	8001384 <sendCMD>
		sendString(message,0x00);
 80017c0:	0031      	movs	r1, r6
 80017c2:	482e      	ldr	r0, [pc, #184]	; (800187c <TIM2_IRQHandler+0x18c>)
 80017c4:	f7ff fe5e 	bl	8001484 <sendString>
		col[1]=0x33;
 80017c8:	2333      	movs	r3, #51	; 0x33
		col[2]=0x39;
		message = "%";
		sendCMD(page,(uint16_t)sizeof(page));
 80017ca:	0029      	movs	r1, r5
		col[1]=0x33;
 80017cc:	7063      	strb	r3, [r4, #1]
		sendCMD(page,(uint16_t)sizeof(page));
 80017ce:	4668      	mov	r0, sp
		col[2]=0x39;
 80017d0:	3306      	adds	r3, #6
 80017d2:	70a3      	strb	r3, [r4, #2]
		sendCMD(page,(uint16_t)sizeof(page));
 80017d4:	f7ff fdd6 	bl	8001384 <sendCMD>
		sendCMD(col, (uint16_t)sizeof(col));
 80017d8:	0029      	movs	r1, r5
 80017da:	0020      	movs	r0, r4
 80017dc:	f7ff fdd2 	bl	8001384 <sendCMD>
		sendString(message,0x00);
 80017e0:	0031      	movs	r1, r6
 80017e2:	4827      	ldr	r0, [pc, #156]	; (8001880 <TIM2_IRQHandler+0x190>)
 80017e4:	f7ff fe4e 	bl	8001484 <sendString>

		col[1]=0x5A;
 80017e8:	235a      	movs	r3, #90	; 0x5a
		col[2]=0x60;
		message ="M";

		sendCMD(page,(uint16_t)sizeof(page));
 80017ea:	0029      	movs	r1, r5
		col[1]=0x5A;
 80017ec:	7063      	strb	r3, [r4, #1]
		sendCMD(page,(uint16_t)sizeof(page));
 80017ee:	4668      	mov	r0, sp
		col[2]=0x60;
 80017f0:	3306      	adds	r3, #6
 80017f2:	70a3      	strb	r3, [r4, #2]
		sendCMD(page,(uint16_t)sizeof(page));
 80017f4:	f7ff fdc6 	bl	8001384 <sendCMD>
		sendCMD(col, (uint16_t)sizeof(col));
 80017f8:	0029      	movs	r1, r5
 80017fa:	0020      	movs	r0, r4
 80017fc:	f7ff fdc2 	bl	8001384 <sendCMD>
		sendString(message,0x00);
 8001800:	0031      	movs	r1, r6
 8001802:	4822      	ldr	r0, [pc, #136]	; (800188c <TIM2_IRQHandler+0x19c>)
 8001804:	f7ff fe3e 	bl	8001484 <sendString>
		isSelfSetup = 0;
 8001808:	703e      	strb	r6, [r7, #0]
	}
	if(hr[2]=='9'){
 800180a:	4c21      	ldr	r4, [pc, #132]	; (8001890 <TIM2_IRQHandler+0x1a0>)
 800180c:	78a3      	ldrb	r3, [r4, #2]
 800180e:	2b39      	cmp	r3, #57	; 0x39
 8001810:	d12c      	bne.n	800186c <TIM2_IRQHandler+0x17c>
		if(hr[1]=='9'){
 8001812:	7863      	ldrb	r3, [r4, #1]
 8001814:	2b39      	cmp	r3, #57	; 0x39
 8001816:	d126      	bne.n	8001866 <TIM2_IRQHandler+0x176>
			if (hr[0]=='9'){
 8001818:	7823      	ldrb	r3, [r4, #0]
 800181a:	2230      	movs	r2, #48	; 0x30
 800181c:	2b39      	cmp	r3, #57	; 0x39
 800181e:	d11f      	bne.n	8001860 <TIM2_IRQHandler+0x170>
				hr[0]='0';
 8001820:	7022      	strb	r2, [r4, #0]
			}
			else{
				hr[0]=hr[0]+1;
			}
			hr[1]='0';
 8001822:	7062      	strb	r2, [r4, #1]
		}
		else{
			hr[1]=hr[1]+1;
		}
		hr[2]='0';
 8001824:	2330      	movs	r3, #48	; 0x30
	}
	else{
		hr[2]=hr[2]+1;
	}

	distance[1]=hr[0];
 8001826:	4d1b      	ldr	r5, [pc, #108]	; (8001894 <TIM2_IRQHandler+0x1a4>)
		hr[2]=hr[2]+1;
 8001828:	70a3      	strb	r3, [r4, #2]
	distance[1]=hr[0];
 800182a:	7823      	ldrb	r3, [r4, #0]
	distance[2]=hr[1];
	distance[3]=hr[2];
	user[0]='1';
 800182c:	4e1a      	ldr	r6, [pc, #104]	; (8001898 <TIM2_IRQHandler+0x1a8>)
	distance[1]=hr[0];
 800182e:	706b      	strb	r3, [r5, #1]
	distance[2]=hr[1];
 8001830:	7863      	ldrb	r3, [r4, #1]
	updateScreen(hr, hr, hr, user);
 8001832:	0022      	movs	r2, r4
	distance[2]=hr[1];
 8001834:	70ab      	strb	r3, [r5, #2]
	distance[3]=hr[2];
 8001836:	78a3      	ldrb	r3, [r4, #2]
	updateScreen(hr, hr, hr, user);
 8001838:	0021      	movs	r1, r4
	distance[3]=hr[2];
 800183a:	70eb      	strb	r3, [r5, #3]
	user[0]='1';
 800183c:	2331      	movs	r3, #49	; 0x31
	updateScreen(hr, hr, hr, user);
 800183e:	0020      	movs	r0, r4
	user[0]='1';
 8001840:	7033      	strb	r3, [r6, #0]
	updateScreen(hr, hr, hr, user);
 8001842:	0033      	movs	r3, r6
 8001844:	f7ff fe8c 	bl	8001560 <updateScreen>
	user[0]='2';
 8001848:	2332      	movs	r3, #50	; 0x32
	updateScreen(hr, hr, distance, user);
 800184a:	002a      	movs	r2, r5
	user[0]='2';
 800184c:	7033      	strb	r3, [r6, #0]
	updateScreen(hr, hr, distance, user);
 800184e:	0021      	movs	r1, r4
 8001850:	0033      	movs	r3, r6
 8001852:	0020      	movs	r0, r4
 8001854:	f7ff fe84 	bl	8001560 <updateScreen>
	//sedns stuff

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001858:	4810      	ldr	r0, [pc, #64]	; (800189c <TIM2_IRQHandler+0x1ac>)
 800185a:	f7ff fc08 	bl	800106e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800185e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
				hr[0]=hr[0]+1;
 8001860:	3301      	adds	r3, #1
 8001862:	7023      	strb	r3, [r4, #0]
 8001864:	e7dd      	b.n	8001822 <TIM2_IRQHandler+0x132>
			hr[1]=hr[1]+1;
 8001866:	3301      	adds	r3, #1
 8001868:	7063      	strb	r3, [r4, #1]
 800186a:	e7db      	b.n	8001824 <TIM2_IRQHandler+0x134>
		hr[2]=hr[2]+1;
 800186c:	3301      	adds	r3, #1
 800186e:	e7da      	b.n	8001826 <TIM2_IRQHandler+0x136>
 8001870:	080019e1 	.word	0x080019e1
 8001874:	200004fc 	.word	0x200004fc
 8001878:	080019e4 	.word	0x080019e4
 800187c:	080019fb 	.word	0x080019fb
 8001880:	080019ff 	.word	0x080019ff
 8001884:	200004fb 	.word	0x200004fb
 8001888:	08001a01 	.word	0x08001a01
 800188c:	08001a07 	.word	0x08001a07
 8001890:	200004f7 	.word	0x200004f7
 8001894:	200004f2 	.word	0x200004f2
 8001898:	200004fd 	.word	0x200004fd
 800189c:	20000580 	.word	0x20000580

080018a0 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 80018a0:	2280      	movs	r2, #128	; 0x80
 80018a2:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <SystemInit+0x44>)
 80018a4:	0052      	lsls	r2, r2, #1
 80018a6:	6819      	ldr	r1, [r3, #0]
 80018a8:	430a      	orrs	r2, r1
 80018aa:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80018ac:	68da      	ldr	r2, [r3, #12]
 80018ae:	490e      	ldr	r1, [pc, #56]	; (80018e8 <SystemInit+0x48>)
 80018b0:	400a      	ands	r2, r1
 80018b2:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	490d      	ldr	r1, [pc, #52]	; (80018ec <SystemInit+0x4c>)
 80018b8:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80018ba:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80018bc:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	438a      	bics	r2, r1
 80018c2:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	490a      	ldr	r1, [pc, #40]	; (80018f0 <SystemInit+0x50>)
 80018c8:	400a      	ands	r2, r1
 80018ca:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80018cc:	68da      	ldr	r2, [r3, #12]
 80018ce:	4909      	ldr	r1, [pc, #36]	; (80018f4 <SystemInit+0x54>)
 80018d0:	400a      	ands	r2, r1
 80018d2:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80018d4:	2200      	movs	r2, #0
 80018d6:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018d8:	2280      	movs	r2, #128	; 0x80
 80018da:	4b07      	ldr	r3, [pc, #28]	; (80018f8 <SystemInit+0x58>)
 80018dc:	0512      	lsls	r2, r2, #20
 80018de:	609a      	str	r2, [r3, #8]
#endif
}
 80018e0:	4770      	bx	lr
 80018e2:	46c0      	nop			; (mov r8, r8)
 80018e4:	40021000 	.word	0x40021000
 80018e8:	88ff400c 	.word	0x88ff400c
 80018ec:	fef6fff6 	.word	0xfef6fff6
 80018f0:	fffbffff 	.word	0xfffbffff
 80018f4:	ff02ffff 	.word	0xff02ffff
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80018fc:	480d      	ldr	r0, [pc, #52]	; (8001934 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018fe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001900:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001902:	e003      	b.n	800190c <LoopCopyDataInit>

08001904 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8001906:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001908:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800190a:	3104      	adds	r1, #4

0800190c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 800190c:	480b      	ldr	r0, [pc, #44]	; (800193c <LoopForever+0xa>)
  ldr  r3, =_edata
 800190e:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <LoopForever+0xe>)
  adds  r2, r0, r1
 8001910:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001912:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001914:	d3f6      	bcc.n	8001904 <CopyDataInit>
  ldr  r2, =_sbss
 8001916:	4a0b      	ldr	r2, [pc, #44]	; (8001944 <LoopForever+0x12>)
  b  LoopFillZerobss
 8001918:	e002      	b.n	8001920 <LoopFillZerobss>

0800191a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800191a:	2300      	movs	r3, #0
  str  r3, [r2]
 800191c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800191e:	3204      	adds	r2, #4

08001920 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8001920:	4b09      	ldr	r3, [pc, #36]	; (8001948 <LoopForever+0x16>)
  cmp  r2, r3
 8001922:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001924:	d3f9      	bcc.n	800191a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001926:	f7ff ffbb 	bl	80018a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800192a:	f000 f811 	bl	8001950 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800192e:	f7ff fc75 	bl	800121c <main>

08001932 <LoopForever>:

LoopForever:
    b LoopForever
 8001932:	e7fe      	b.n	8001932 <LoopForever>
  ldr   r0, =_estack
 8001934:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8001938:	08001a2c 	.word	0x08001a2c
  ldr  r0, =_sdata
 800193c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001940:	20000504 	.word	0x20000504
  ldr  r2, =_sbss
 8001944:	20000504 	.word	0x20000504
  ldr  r3, = _ebss
 8001948:	200005bc 	.word	0x200005bc

0800194c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800194c:	e7fe      	b.n	800194c <ADC1_COMP_IRQHandler>
	...

08001950 <__libc_init_array>:
 8001950:	b570      	push	{r4, r5, r6, lr}
 8001952:	2600      	movs	r6, #0
 8001954:	4d0c      	ldr	r5, [pc, #48]	; (8001988 <__libc_init_array+0x38>)
 8001956:	4c0d      	ldr	r4, [pc, #52]	; (800198c <__libc_init_array+0x3c>)
 8001958:	1b64      	subs	r4, r4, r5
 800195a:	10a4      	asrs	r4, r4, #2
 800195c:	42a6      	cmp	r6, r4
 800195e:	d109      	bne.n	8001974 <__libc_init_array+0x24>
 8001960:	2600      	movs	r6, #0
 8001962:	f000 f82b 	bl	80019bc <_init>
 8001966:	4d0a      	ldr	r5, [pc, #40]	; (8001990 <__libc_init_array+0x40>)
 8001968:	4c0a      	ldr	r4, [pc, #40]	; (8001994 <__libc_init_array+0x44>)
 800196a:	1b64      	subs	r4, r4, r5
 800196c:	10a4      	asrs	r4, r4, #2
 800196e:	42a6      	cmp	r6, r4
 8001970:	d105      	bne.n	800197e <__libc_init_array+0x2e>
 8001972:	bd70      	pop	{r4, r5, r6, pc}
 8001974:	00b3      	lsls	r3, r6, #2
 8001976:	58eb      	ldr	r3, [r5, r3]
 8001978:	4798      	blx	r3
 800197a:	3601      	adds	r6, #1
 800197c:	e7ee      	b.n	800195c <__libc_init_array+0xc>
 800197e:	00b3      	lsls	r3, r6, #2
 8001980:	58eb      	ldr	r3, [r5, r3]
 8001982:	4798      	blx	r3
 8001984:	3601      	adds	r6, #1
 8001986:	e7f2      	b.n	800196e <__libc_init_array+0x1e>
 8001988:	08001a24 	.word	0x08001a24
 800198c:	08001a24 	.word	0x08001a24
 8001990:	08001a24 	.word	0x08001a24
 8001994:	08001a28 	.word	0x08001a28

08001998 <memcpy>:
 8001998:	2300      	movs	r3, #0
 800199a:	b510      	push	{r4, lr}
 800199c:	429a      	cmp	r2, r3
 800199e:	d100      	bne.n	80019a2 <memcpy+0xa>
 80019a0:	bd10      	pop	{r4, pc}
 80019a2:	5ccc      	ldrb	r4, [r1, r3]
 80019a4:	54c4      	strb	r4, [r0, r3]
 80019a6:	3301      	adds	r3, #1
 80019a8:	e7f8      	b.n	800199c <memcpy+0x4>

080019aa <memset>:
 80019aa:	0003      	movs	r3, r0
 80019ac:	1882      	adds	r2, r0, r2
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d100      	bne.n	80019b4 <memset+0xa>
 80019b2:	4770      	bx	lr
 80019b4:	7019      	strb	r1, [r3, #0]
 80019b6:	3301      	adds	r3, #1
 80019b8:	e7f9      	b.n	80019ae <memset+0x4>
	...

080019bc <_init>:
 80019bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019be:	46c0      	nop			; (mov r8, r8)
 80019c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019c2:	bc08      	pop	{r3}
 80019c4:	469e      	mov	lr, r3
 80019c6:	4770      	bx	lr

080019c8 <_fini>:
 80019c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ca:	46c0      	nop			; (mov r8, r8)
 80019cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019ce:	bc08      	pop	{r3}
 80019d0:	469e      	mov	lr, r3
 80019d2:	4770      	bx	lr
