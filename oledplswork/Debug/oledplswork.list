
oledplswork.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000128c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800134c  0800134c  0001134c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800136c  0800136c  0001136c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001370  08001370  00011370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000008c  20000000  08001374  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000007c  2000008c  08001400  0002008c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000108  08001400  00020108  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00006c81  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000013c8  00000000  00000000  00026d35  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000027da  00000000  00000000  000280fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000004d8  00000000  00000000  0002a8d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000688  00000000  00000000  0002adb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000029d6  00000000  00000000  0002b438  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001dbd  00000000  00000000  0002de0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002fbcb  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000cb8  00000000  00000000  0002fc48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000008c 	.word	0x2000008c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001334 	.word	0x08001334

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000090 	.word	0x20000090
 8000104:	08001334 	.word	0x08001334

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000220:	21fa      	movs	r1, #250	; 0xfa
 8000222:	4b0a      	ldr	r3, [pc, #40]	; (800024c <HAL_InitTick+0x2c>)
{
 8000224:	b570      	push	{r4, r5, r6, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000226:	0089      	lsls	r1, r1, #2
{
 8000228:	0005      	movs	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 800022a:	6818      	ldr	r0, [r3, #0]
 800022c:	f7ff ff6c 	bl	8000108 <__udivsi3>
 8000230:	f000 f860 	bl	80002f4 <HAL_SYSTICK_Config>
 8000234:	0004      	movs	r4, r0
  {
    status = HAL_ERROR;
 8000236:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000238:	2c00      	cmp	r4, #0
 800023a:	d105      	bne.n	8000248 <HAL_InitTick+0x28>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 800023c:	3802      	subs	r0, #2
 800023e:	0022      	movs	r2, r4
 8000240:	0029      	movs	r1, r5
 8000242:	f000 f827 	bl	8000294 <HAL_NVIC_SetPriority>
 8000246:	0020      	movs	r0, r4
  }

  /* Return function status */
  return status;
}
 8000248:	bd70      	pop	{r4, r5, r6, pc}
 800024a:	46c0      	nop			; (mov r8, r8)
 800024c:	20000088 	.word	0x20000088

08000250 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000250:	2340      	movs	r3, #64	; 0x40
 8000252:	4a08      	ldr	r2, [pc, #32]	; (8000274 <HAL_Init+0x24>)
{
 8000254:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000256:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000258:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800025a:	430b      	orrs	r3, r1
 800025c:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800025e:	f7ff ffdf 	bl	8000220 <HAL_InitTick>
 8000262:	1e04      	subs	r4, r0, #0
 8000264:	d103      	bne.n	800026e <HAL_Init+0x1e>
    HAL_MspInit();
 8000266:	f000 ff95 	bl	8001194 <HAL_MspInit>
}
 800026a:	0020      	movs	r0, r4
 800026c:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800026e:	2401      	movs	r4, #1
 8000270:	e7fb      	b.n	800026a <HAL_Init+0x1a>
 8000272:	46c0      	nop			; (mov r8, r8)
 8000274:	40022000 	.word	0x40022000

08000278 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000278:	4a02      	ldr	r2, [pc, #8]	; (8000284 <HAL_IncTick+0xc>)
 800027a:	6813      	ldr	r3, [r2, #0]
 800027c:	3301      	adds	r3, #1
 800027e:	6013      	str	r3, [r2, #0]
}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	200000ac 	.word	0x200000ac

08000288 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000288:	4b01      	ldr	r3, [pc, #4]	; (8000290 <HAL_GetTick+0x8>)
 800028a:	6818      	ldr	r0, [r3, #0]
}
 800028c:	4770      	bx	lr
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	200000ac 	.word	0x200000ac

08000294 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000294:	b570      	push	{r4, r5, r6, lr}
 8000296:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000298:	2800      	cmp	r0, #0
 800029a:	da14      	bge.n	80002c6 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800029c:	230f      	movs	r3, #15
 800029e:	b2c0      	uxtb	r0, r0
 80002a0:	4003      	ands	r3, r0
 80002a2:	3b08      	subs	r3, #8
 80002a4:	4a11      	ldr	r2, [pc, #68]	; (80002ec <HAL_NVIC_SetPriority+0x58>)
 80002a6:	089b      	lsrs	r3, r3, #2
 80002a8:	009b      	lsls	r3, r3, #2
 80002aa:	189b      	adds	r3, r3, r2
 80002ac:	2203      	movs	r2, #3
 80002ae:	4010      	ands	r0, r2
 80002b0:	4090      	lsls	r0, r2
 80002b2:	32fc      	adds	r2, #252	; 0xfc
 80002b4:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002b6:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b8:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ba:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002bc:	69dc      	ldr	r4, [r3, #28]
 80002be:	43ac      	bics	r4, r5
 80002c0:	4321      	orrs	r1, r4
 80002c2:	61d9      	str	r1, [r3, #28]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80002c4:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002c6:	2503      	movs	r5, #3
 80002c8:	0883      	lsrs	r3, r0, #2
 80002ca:	4028      	ands	r0, r5
 80002cc:	40a8      	lsls	r0, r5
 80002ce:	35fc      	adds	r5, #252	; 0xfc
 80002d0:	002e      	movs	r6, r5
 80002d2:	4a07      	ldr	r2, [pc, #28]	; (80002f0 <HAL_NVIC_SetPriority+0x5c>)
 80002d4:	009b      	lsls	r3, r3, #2
 80002d6:	189b      	adds	r3, r3, r2
 80002d8:	22c0      	movs	r2, #192	; 0xc0
 80002da:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002dc:	4029      	ands	r1, r5
 80002de:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002e0:	0092      	lsls	r2, r2, #2
 80002e2:	589c      	ldr	r4, [r3, r2]
 80002e4:	43b4      	bics	r4, r6
 80002e6:	4321      	orrs	r1, r4
 80002e8:	5099      	str	r1, [r3, r2]
 80002ea:	e7eb      	b.n	80002c4 <HAL_NVIC_SetPriority+0x30>
 80002ec:	e000ed00 	.word	0xe000ed00
 80002f0:	e000e100 	.word	0xe000e100

080002f4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002f4:	4a09      	ldr	r2, [pc, #36]	; (800031c <HAL_SYSTICK_Config+0x28>)
 80002f6:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 80002f8:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002fa:	4293      	cmp	r3, r2
 80002fc:	d80d      	bhi.n	800031a <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002fe:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000300:	4a07      	ldr	r2, [pc, #28]	; (8000320 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000302:	4808      	ldr	r0, [pc, #32]	; (8000324 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000304:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000306:	6a03      	ldr	r3, [r0, #32]
 8000308:	0609      	lsls	r1, r1, #24
 800030a:	021b      	lsls	r3, r3, #8
 800030c:	0a1b      	lsrs	r3, r3, #8
 800030e:	430b      	orrs	r3, r1
 8000310:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000312:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000314:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000316:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000318:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800031a:	4770      	bx	lr
 800031c:	00ffffff 	.word	0x00ffffff
 8000320:	e000e010 	.word	0xe000e010
 8000324:	e000ed00 	.word	0xe000ed00

08000328 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000328:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800032a:	4a53      	ldr	r2, [pc, #332]	; (8000478 <HAL_GPIO_Init+0x150>)
  while (((GPIO_Init->Pin) >> position) != 0)
 800032c:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800032e:	1882      	adds	r2, r0, r2
 8000330:	1e54      	subs	r4, r2, #1
 8000332:	41a2      	sbcs	r2, r4
{
 8000334:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 8000336:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00U;
 8000338:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800033a:	3205      	adds	r2, #5
 800033c:	9203      	str	r2, [sp, #12]
  while (((GPIO_Init->Pin) >> position) != 0)
 800033e:	9a01      	ldr	r2, [sp, #4]
 8000340:	40da      	lsrs	r2, r3
 8000342:	d101      	bne.n	8000348 <HAL_GPIO_Init+0x20>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8000344:	b005      	add	sp, #20
 8000346:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000348:	2501      	movs	r5, #1
 800034a:	409d      	lsls	r5, r3
 800034c:	9a01      	ldr	r2, [sp, #4]
 800034e:	402a      	ands	r2, r5
 8000350:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 8000352:	d100      	bne.n	8000356 <HAL_GPIO_Init+0x2e>
 8000354:	e08d      	b.n	8000472 <HAL_GPIO_Init+0x14a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000356:	684a      	ldr	r2, [r1, #4]
 8000358:	4694      	mov	ip, r2
 800035a:	2210      	movs	r2, #16
 800035c:	4664      	mov	r4, ip
 800035e:	4394      	bics	r4, r2
 8000360:	0022      	movs	r2, r4
 8000362:	3c01      	subs	r4, #1
 8000364:	2a02      	cmp	r2, #2
 8000366:	d11f      	bne.n	80003a8 <HAL_GPIO_Init+0x80>
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000368:	2407      	movs	r4, #7
 800036a:	270f      	movs	r7, #15
 800036c:	401c      	ands	r4, r3
 800036e:	00a4      	lsls	r4, r4, #2
 8000370:	40a7      	lsls	r7, r4
        temp = GPIOx->AFR[position >> 3U];
 8000372:	08da      	lsrs	r2, r3, #3
 8000374:	0092      	lsls	r2, r2, #2
 8000376:	1882      	adds	r2, r0, r2
 8000378:	6a16      	ldr	r6, [r2, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800037a:	43be      	bics	r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 800037c:	690f      	ldr	r7, [r1, #16]
 800037e:	40a7      	lsls	r7, r4
 8000380:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 8000382:	6216      	str	r6, [r2, #32]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000384:	2403      	movs	r4, #3
 8000386:	005e      	lsls	r6, r3, #1
 8000388:	40b4      	lsls	r4, r6
        temp = GPIOx->OSPEEDR;
 800038a:	6882      	ldr	r2, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800038c:	43a2      	bics	r2, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800038e:	68cc      	ldr	r4, [r1, #12]
 8000390:	40b4      	lsls	r4, r6
 8000392:	4322      	orrs	r2, r4
        GPIOx->OSPEEDR = temp;
 8000394:	6082      	str	r2, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000396:	4662      	mov	r2, ip
 8000398:	06d2      	lsls	r2, r2, #27
 800039a:	0fd2      	lsrs	r2, r2, #31
 800039c:	409a      	lsls	r2, r3
        temp= GPIOx->OTYPER;
 800039e:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80003a0:	43ac      	bics	r4, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003a2:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80003a4:	6042      	str	r2, [r0, #4]
 80003a6:	e001      	b.n	80003ac <HAL_GPIO_Init+0x84>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003a8:	2c01      	cmp	r4, #1
 80003aa:	d9eb      	bls.n	8000384 <HAL_GPIO_Init+0x5c>
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80003ac:	2603      	movs	r6, #3
 80003ae:	0034      	movs	r4, r6
 80003b0:	005d      	lsls	r5, r3, #1
 80003b2:	40ac      	lsls	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003b4:	4662      	mov	r2, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80003b6:	43e4      	mvns	r4, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003b8:	4032      	ands	r2, r6
 80003ba:	40aa      	lsls	r2, r5
      temp = GPIOx->MODER;
 80003bc:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80003be:	4027      	ands	r7, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003c0:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 80003c2:	6002      	str	r2, [r0, #0]
      temp = GPIOx->PUPDR;
 80003c4:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80003c6:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 80003c8:	688a      	ldr	r2, [r1, #8]
 80003ca:	40aa      	lsls	r2, r5
 80003cc:	4314      	orrs	r4, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003ce:	4662      	mov	r2, ip
      GPIOx->PUPDR = temp;
 80003d0:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003d2:	00d2      	lsls	r2, r2, #3
 80003d4:	d54d      	bpl.n	8000472 <HAL_GPIO_Init+0x14a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003d6:	2501      	movs	r5, #1
 80003d8:	4c28      	ldr	r4, [pc, #160]	; (800047c <HAL_GPIO_Init+0x154>)
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80003da:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003dc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80003de:	432a      	orrs	r2, r5
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80003e0:	001d      	movs	r5, r3
 80003e2:	4035      	ands	r5, r6
 80003e4:	00ad      	lsls	r5, r5, #2
 80003e6:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003e8:	6362      	str	r2, [r4, #52]	; 0x34
 80003ea:	4a25      	ldr	r2, [pc, #148]	; (8000480 <HAL_GPIO_Init+0x158>)
        temp = SYSCFG->EXTICR[position >> 2U];
 80003ec:	089c      	lsrs	r4, r3, #2
 80003ee:	00a4      	lsls	r4, r4, #2
 80003f0:	18a4      	adds	r4, r4, r2
 80003f2:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80003f4:	43ba      	bics	r2, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80003f6:	27a0      	movs	r7, #160	; 0xa0
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80003f8:	9202      	str	r2, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80003fa:	05ff      	lsls	r7, r7, #23
 80003fc:	2200      	movs	r2, #0
 80003fe:	42b8      	cmp	r0, r7
 8000400:	d00c      	beq.n	800041c <HAL_GPIO_Init+0xf4>
 8000402:	4f20      	ldr	r7, [pc, #128]	; (8000484 <HAL_GPIO_Init+0x15c>)
 8000404:	3201      	adds	r2, #1
 8000406:	42b8      	cmp	r0, r7
 8000408:	d008      	beq.n	800041c <HAL_GPIO_Init+0xf4>
 800040a:	4f1f      	ldr	r7, [pc, #124]	; (8000488 <HAL_GPIO_Init+0x160>)
 800040c:	3201      	adds	r2, #1
 800040e:	42b8      	cmp	r0, r7
 8000410:	d004      	beq.n	800041c <HAL_GPIO_Init+0xf4>
 8000412:	4f1e      	ldr	r7, [pc, #120]	; (800048c <HAL_GPIO_Init+0x164>)
 8000414:	0032      	movs	r2, r6
 8000416:	42b8      	cmp	r0, r7
 8000418:	d000      	beq.n	800041c <HAL_GPIO_Init+0xf4>
 800041a:	9a03      	ldr	r2, [sp, #12]
 800041c:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800041e:	4667      	mov	r7, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000420:	9d02      	ldr	r5, [sp, #8]
 8000422:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000424:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8000426:	4a1a      	ldr	r2, [pc, #104]	; (8000490 <HAL_GPIO_Init+0x168>)
        temp &= ~((uint32_t)iocurrent);
 8000428:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->IMR;
 800042a:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 800042c:	9d00      	ldr	r5, [sp, #0]
        temp &= ~((uint32_t)iocurrent);
 800042e:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8000430:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000432:	03ff      	lsls	r7, r7, #15
 8000434:	d401      	bmi.n	800043a <HAL_GPIO_Init+0x112>
        temp &= ~((uint32_t)iocurrent);
 8000436:	0035      	movs	r5, r6
 8000438:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800043a:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 800043c:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 800043e:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8000440:	9d00      	ldr	r5, [sp, #0]
 8000442:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000444:	03bf      	lsls	r7, r7, #14
 8000446:	d401      	bmi.n	800044c <HAL_GPIO_Init+0x124>
        temp &= ~((uint32_t)iocurrent);
 8000448:	0035      	movs	r5, r6
 800044a:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800044c:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 800044e:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000450:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8000452:	9d00      	ldr	r5, [sp, #0]
 8000454:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000456:	02ff      	lsls	r7, r7, #11
 8000458:	d401      	bmi.n	800045e <HAL_GPIO_Init+0x136>
        temp &= ~((uint32_t)iocurrent);
 800045a:	0035      	movs	r5, r6
 800045c:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800045e:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8000460:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000462:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8000464:	9e00      	ldr	r6, [sp, #0]
 8000466:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000468:	02bf      	lsls	r7, r7, #10
 800046a:	d401      	bmi.n	8000470 <HAL_GPIO_Init+0x148>
        temp &= ~((uint32_t)iocurrent);
 800046c:	4025      	ands	r5, r4
 800046e:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8000470:	60d6      	str	r6, [r2, #12]
    position++;
 8000472:	3301      	adds	r3, #1
 8000474:	e763      	b.n	800033e <HAL_GPIO_Init+0x16>
 8000476:	46c0      	nop			; (mov r8, r8)
 8000478:	afffe400 	.word	0xafffe400
 800047c:	40021000 	.word	0x40021000
 8000480:	40010000 	.word	0x40010000
 8000484:	50000400 	.word	0x50000400
 8000488:	50000800 	.word	0x50000800
 800048c:	50000c00 	.word	0x50000c00
 8000490:	40010400 	.word	0x40010400

08000494 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8000494:	2a00      	cmp	r2, #0
 8000496:	d001      	beq.n	800049c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000498:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800049a:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 800049c:	6281      	str	r1, [r0, #40]	; 0x28
}
 800049e:	e7fc      	b.n	800049a <HAL_GPIO_WritePin+0x6>

080004a0 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80004a0:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 80004a2:	4b18      	ldr	r3, [pc, #96]	; (8000504 <HAL_RCC_GetSysClockFreq+0x64>)
{
 80004a4:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 80004a6:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 80004a8:	400a      	ands	r2, r1
 80004aa:	2a08      	cmp	r2, #8
 80004ac:	d026      	beq.n	80004fc <HAL_RCC_GetSysClockFreq+0x5c>
 80004ae:	2a0c      	cmp	r2, #12
 80004b0:	d006      	beq.n	80004c0 <HAL_RCC_GetSysClockFreq+0x20>
 80004b2:	2a04      	cmp	r2, #4
 80004b4:	d11a      	bne.n	80004ec <HAL_RCC_GetSysClockFreq+0x4c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	06db      	lsls	r3, r3, #27
 80004ba:	d421      	bmi.n	8000500 <HAL_RCC_GetSysClockFreq+0x60>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 80004bc:	4812      	ldr	r0, [pc, #72]	; (8000508 <HAL_RCC_GetSysClockFreq+0x68>)
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 80004be:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80004c0:	028a      	lsls	r2, r1, #10
 80004c2:	4812      	ldr	r0, [pc, #72]	; (800050c <HAL_RCC_GetSysClockFreq+0x6c>)
 80004c4:	0f12      	lsrs	r2, r2, #28
 80004c6:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80004c8:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80004ca:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80004cc:	0f89      	lsrs	r1, r1, #30
 80004ce:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80004d0:	03c0      	lsls	r0, r0, #15
 80004d2:	d504      	bpl.n	80004de <HAL_RCC_GetSysClockFreq+0x3e>
        pllvco = (HSE_VALUE * pllm) / plld;
 80004d4:	480e      	ldr	r0, [pc, #56]	; (8000510 <HAL_RCC_GetSysClockFreq+0x70>)
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80004d6:	4350      	muls	r0, r2
 80004d8:	f7ff fe16 	bl	8000108 <__udivsi3>
 80004dc:	e7ef      	b.n	80004be <HAL_RCC_GetSysClockFreq+0x1e>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	06db      	lsls	r3, r3, #27
 80004e2:	d501      	bpl.n	80004e8 <HAL_RCC_GetSysClockFreq+0x48>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80004e4:	480b      	ldr	r0, [pc, #44]	; (8000514 <HAL_RCC_GetSysClockFreq+0x74>)
 80004e6:	e7f6      	b.n	80004d6 <HAL_RCC_GetSysClockFreq+0x36>
         pllvco = (HSI_VALUE * pllm) / plld;
 80004e8:	4807      	ldr	r0, [pc, #28]	; (8000508 <HAL_RCC_GetSysClockFreq+0x68>)
 80004ea:	e7f4      	b.n	80004d6 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80004ec:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80004ee:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80004f0:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80004f2:	041b      	lsls	r3, r3, #16
 80004f4:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80004f6:	3301      	adds	r3, #1
 80004f8:	4098      	lsls	r0, r3
 80004fa:	e7e0      	b.n	80004be <HAL_RCC_GetSysClockFreq+0x1e>
      sysclockfreq = HSE_VALUE;
 80004fc:	4804      	ldr	r0, [pc, #16]	; (8000510 <HAL_RCC_GetSysClockFreq+0x70>)
 80004fe:	e7de      	b.n	80004be <HAL_RCC_GetSysClockFreq+0x1e>
        sysclockfreq =  (HSI_VALUE >> 2);
 8000500:	4804      	ldr	r0, [pc, #16]	; (8000514 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 8000502:	e7dc      	b.n	80004be <HAL_RCC_GetSysClockFreq+0x1e>
 8000504:	40021000 	.word	0x40021000
 8000508:	00f42400 	.word	0x00f42400
 800050c:	08001362 	.word	0x08001362
 8000510:	007a1200 	.word	0x007a1200
 8000514:	003d0900 	.word	0x003d0900

08000518 <HAL_RCC_OscConfig>:
{
 8000518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800051a:	0005      	movs	r5, r0
 800051c:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 800051e:	2800      	cmp	r0, #0
 8000520:	d102      	bne.n	8000528 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8000522:	2001      	movs	r0, #1
}
 8000524:	b007      	add	sp, #28
 8000526:	bdf0      	pop	{r4, r5, r6, r7, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000528:	230c      	movs	r3, #12
 800052a:	4cbe      	ldr	r4, [pc, #760]	; (8000824 <HAL_RCC_OscConfig+0x30c>)
 800052c:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800052e:	68e2      	ldr	r2, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000530:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000532:	2380      	movs	r3, #128	; 0x80
 8000534:	025b      	lsls	r3, r3, #9
 8000536:	401a      	ands	r2, r3
 8000538:	9201      	str	r2, [sp, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800053a:	6802      	ldr	r2, [r0, #0]
 800053c:	07d2      	lsls	r2, r2, #31
 800053e:	d441      	bmi.n	80005c4 <HAL_RCC_OscConfig+0xac>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000540:	682b      	ldr	r3, [r5, #0]
 8000542:	079b      	lsls	r3, r3, #30
 8000544:	d500      	bpl.n	8000548 <HAL_RCC_OscConfig+0x30>
 8000546:	e087      	b.n	8000658 <HAL_RCC_OscConfig+0x140>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000548:	682b      	ldr	r3, [r5, #0]
 800054a:	06db      	lsls	r3, r3, #27
 800054c:	d528      	bpl.n	80005a0 <HAL_RCC_OscConfig+0x88>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 800054e:	2e00      	cmp	r6, #0
 8000550:	d000      	beq.n	8000554 <HAL_RCC_OscConfig+0x3c>
 8000552:	e0d9      	b.n	8000708 <HAL_RCC_OscConfig+0x1f0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000554:	6823      	ldr	r3, [r4, #0]
 8000556:	059b      	lsls	r3, r3, #22
 8000558:	d502      	bpl.n	8000560 <HAL_RCC_OscConfig+0x48>
 800055a:	69eb      	ldr	r3, [r5, #28]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d0e0      	beq.n	8000522 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000560:	6862      	ldr	r2, [r4, #4]
 8000562:	49b1      	ldr	r1, [pc, #708]	; (8000828 <HAL_RCC_OscConfig+0x310>)
 8000564:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000566:	400a      	ands	r2, r1
 8000568:	431a      	orrs	r2, r3
 800056a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800056c:	6861      	ldr	r1, [r4, #4]
 800056e:	6a2a      	ldr	r2, [r5, #32]
 8000570:	0209      	lsls	r1, r1, #8
 8000572:	0a09      	lsrs	r1, r1, #8
 8000574:	0612      	lsls	r2, r2, #24
 8000576:	430a      	orrs	r2, r1
 8000578:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800057a:	2280      	movs	r2, #128	; 0x80
 800057c:	0b5b      	lsrs	r3, r3, #13
 800057e:	3301      	adds	r3, #1
 8000580:	0212      	lsls	r2, r2, #8
 8000582:	409a      	lsls	r2, r3
 8000584:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000586:	68e1      	ldr	r1, [r4, #12]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8000588:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800058a:	060a      	lsls	r2, r1, #24
 800058c:	49a7      	ldr	r1, [pc, #668]	; (800082c <HAL_RCC_OscConfig+0x314>)
 800058e:	0f12      	lsrs	r2, r2, #28
 8000590:	5c8a      	ldrb	r2, [r1, r2]
 8000592:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000594:	4aa6      	ldr	r2, [pc, #664]	; (8000830 <HAL_RCC_OscConfig+0x318>)
 8000596:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8000598:	f7ff fe42 	bl	8000220 <HAL_InitTick>
        if(status != HAL_OK)
 800059c:	2800      	cmp	r0, #0
 800059e:	d1c1      	bne.n	8000524 <HAL_RCC_OscConfig+0xc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80005a0:	682b      	ldr	r3, [r5, #0]
 80005a2:	071b      	lsls	r3, r3, #28
 80005a4:	d500      	bpl.n	80005a8 <HAL_RCC_OscConfig+0x90>
 80005a6:	e0e6      	b.n	8000776 <HAL_RCC_OscConfig+0x25e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80005a8:	682b      	ldr	r3, [r5, #0]
 80005aa:	075b      	lsls	r3, r3, #29
 80005ac:	d500      	bpl.n	80005b0 <HAL_RCC_OscConfig+0x98>
 80005ae:	e108      	b.n	80007c2 <HAL_RCC_OscConfig+0x2aa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80005b0:	682b      	ldr	r3, [r5, #0]
 80005b2:	069b      	lsls	r3, r3, #26
 80005b4:	d500      	bpl.n	80005b8 <HAL_RCC_OscConfig+0xa0>
 80005b6:	e18d      	b.n	80008d4 <HAL_RCC_OscConfig+0x3bc>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80005b8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d000      	beq.n	80005c0 <HAL_RCC_OscConfig+0xa8>
 80005be:	e1bc      	b.n	800093a <HAL_RCC_OscConfig+0x422>
  return HAL_OK;
 80005c0:	2000      	movs	r0, #0
 80005c2:	e7af      	b.n	8000524 <HAL_RCC_OscConfig+0xc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80005c4:	2e08      	cmp	r6, #8
 80005c6:	d004      	beq.n	80005d2 <HAL_RCC_OscConfig+0xba>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80005c8:	2e0c      	cmp	r6, #12
 80005ca:	d109      	bne.n	80005e0 <HAL_RCC_OscConfig+0xc8>
 80005cc:	9a01      	ldr	r2, [sp, #4]
 80005ce:	2a00      	cmp	r2, #0
 80005d0:	d006      	beq.n	80005e0 <HAL_RCC_OscConfig+0xc8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80005d2:	6823      	ldr	r3, [r4, #0]
 80005d4:	039b      	lsls	r3, r3, #14
 80005d6:	d5b3      	bpl.n	8000540 <HAL_RCC_OscConfig+0x28>
 80005d8:	686b      	ldr	r3, [r5, #4]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d1b0      	bne.n	8000540 <HAL_RCC_OscConfig+0x28>
 80005de:	e7a0      	b.n	8000522 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005e0:	686a      	ldr	r2, [r5, #4]
 80005e2:	429a      	cmp	r2, r3
 80005e4:	d111      	bne.n	800060a <HAL_RCC_OscConfig+0xf2>
 80005e6:	6822      	ldr	r2, [r4, #0]
 80005e8:	4313      	orrs	r3, r2
 80005ea:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80005ec:	f7ff fe4c 	bl	8000288 <HAL_GetTick>
 80005f0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80005f2:	2280      	movs	r2, #128	; 0x80
 80005f4:	6823      	ldr	r3, [r4, #0]
 80005f6:	0292      	lsls	r2, r2, #10
 80005f8:	4213      	tst	r3, r2
 80005fa:	d1a1      	bne.n	8000540 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005fc:	f7ff fe44 	bl	8000288 <HAL_GetTick>
 8000600:	1bc0      	subs	r0, r0, r7
 8000602:	2864      	cmp	r0, #100	; 0x64
 8000604:	d9f5      	bls.n	80005f2 <HAL_RCC_OscConfig+0xda>
            return HAL_TIMEOUT;
 8000606:	2003      	movs	r0, #3
 8000608:	e78c      	b.n	8000524 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800060a:	21a0      	movs	r1, #160	; 0xa0
 800060c:	02c9      	lsls	r1, r1, #11
 800060e:	428a      	cmp	r2, r1
 8000610:	d105      	bne.n	800061e <HAL_RCC_OscConfig+0x106>
 8000612:	2280      	movs	r2, #128	; 0x80
 8000614:	6821      	ldr	r1, [r4, #0]
 8000616:	02d2      	lsls	r2, r2, #11
 8000618:	430a      	orrs	r2, r1
 800061a:	6022      	str	r2, [r4, #0]
 800061c:	e7e3      	b.n	80005e6 <HAL_RCC_OscConfig+0xce>
 800061e:	6821      	ldr	r1, [r4, #0]
 8000620:	4884      	ldr	r0, [pc, #528]	; (8000834 <HAL_RCC_OscConfig+0x31c>)
 8000622:	4001      	ands	r1, r0
 8000624:	6021      	str	r1, [r4, #0]
 8000626:	6821      	ldr	r1, [r4, #0]
 8000628:	400b      	ands	r3, r1
 800062a:	9305      	str	r3, [sp, #20]
 800062c:	9b05      	ldr	r3, [sp, #20]
 800062e:	4982      	ldr	r1, [pc, #520]	; (8000838 <HAL_RCC_OscConfig+0x320>)
 8000630:	6823      	ldr	r3, [r4, #0]
 8000632:	400b      	ands	r3, r1
 8000634:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000636:	2a00      	cmp	r2, #0
 8000638:	d1d8      	bne.n	80005ec <HAL_RCC_OscConfig+0xd4>
        tickstart = HAL_GetTick();
 800063a:	f7ff fe25 	bl	8000288 <HAL_GetTick>
 800063e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000640:	2280      	movs	r2, #128	; 0x80
 8000642:	6823      	ldr	r3, [r4, #0]
 8000644:	0292      	lsls	r2, r2, #10
 8000646:	4213      	tst	r3, r2
 8000648:	d100      	bne.n	800064c <HAL_RCC_OscConfig+0x134>
 800064a:	e779      	b.n	8000540 <HAL_RCC_OscConfig+0x28>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800064c:	f7ff fe1c 	bl	8000288 <HAL_GetTick>
 8000650:	1bc0      	subs	r0, r0, r7
 8000652:	2864      	cmp	r0, #100	; 0x64
 8000654:	d9f4      	bls.n	8000640 <HAL_RCC_OscConfig+0x128>
 8000656:	e7d6      	b.n	8000606 <HAL_RCC_OscConfig+0xee>
    hsi_state = RCC_OscInitStruct->HSIState;
 8000658:	68ea      	ldr	r2, [r5, #12]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800065a:	2e04      	cmp	r6, #4
 800065c:	d004      	beq.n	8000668 <HAL_RCC_OscConfig+0x150>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800065e:	2e0c      	cmp	r6, #12
 8000660:	d125      	bne.n	80006ae <HAL_RCC_OscConfig+0x196>
 8000662:	9b01      	ldr	r3, [sp, #4]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d122      	bne.n	80006ae <HAL_RCC_OscConfig+0x196>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000668:	6823      	ldr	r3, [r4, #0]
 800066a:	075b      	lsls	r3, r3, #29
 800066c:	d502      	bpl.n	8000674 <HAL_RCC_OscConfig+0x15c>
 800066e:	2a00      	cmp	r2, #0
 8000670:	d100      	bne.n	8000674 <HAL_RCC_OscConfig+0x15c>
 8000672:	e756      	b.n	8000522 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000674:	6861      	ldr	r1, [r4, #4]
 8000676:	692b      	ldr	r3, [r5, #16]
 8000678:	4870      	ldr	r0, [pc, #448]	; (800083c <HAL_RCC_OscConfig+0x324>)
 800067a:	021b      	lsls	r3, r3, #8
 800067c:	4001      	ands	r1, r0
 800067e:	430b      	orrs	r3, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000680:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000682:	6063      	str	r3, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000684:	6823      	ldr	r3, [r4, #0]
 8000686:	438b      	bics	r3, r1
 8000688:	4313      	orrs	r3, r2
 800068a:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800068c:	f7ff ff08 	bl	80004a0 <HAL_RCC_GetSysClockFreq>
 8000690:	68e3      	ldr	r3, [r4, #12]
 8000692:	4a66      	ldr	r2, [pc, #408]	; (800082c <HAL_RCC_OscConfig+0x314>)
 8000694:	061b      	lsls	r3, r3, #24
 8000696:	0f1b      	lsrs	r3, r3, #28
 8000698:	5cd3      	ldrb	r3, [r2, r3]
 800069a:	40d8      	lsrs	r0, r3
 800069c:	4b64      	ldr	r3, [pc, #400]	; (8000830 <HAL_RCC_OscConfig+0x318>)
 800069e:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 80006a0:	2000      	movs	r0, #0
 80006a2:	f7ff fdbd 	bl	8000220 <HAL_InitTick>
      if(status != HAL_OK)
 80006a6:	2800      	cmp	r0, #0
 80006a8:	d100      	bne.n	80006ac <HAL_RCC_OscConfig+0x194>
 80006aa:	e74d      	b.n	8000548 <HAL_RCC_OscConfig+0x30>
 80006ac:	e73a      	b.n	8000524 <HAL_RCC_OscConfig+0xc>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80006ae:	6823      	ldr	r3, [r4, #0]
      if(hsi_state != RCC_HSI_OFF)
 80006b0:	2a00      	cmp	r2, #0
 80006b2:	d018      	beq.n	80006e6 <HAL_RCC_OscConfig+0x1ce>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80006b4:	2109      	movs	r1, #9
 80006b6:	438b      	bics	r3, r1
 80006b8:	4313      	orrs	r3, r2
 80006ba:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80006bc:	f7ff fde4 	bl	8000288 <HAL_GetTick>
 80006c0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80006c2:	2204      	movs	r2, #4
 80006c4:	6823      	ldr	r3, [r4, #0]
 80006c6:	4213      	tst	r3, r2
 80006c8:	d007      	beq.n	80006da <HAL_RCC_OscConfig+0x1c2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80006ca:	6862      	ldr	r2, [r4, #4]
 80006cc:	692b      	ldr	r3, [r5, #16]
 80006ce:	495b      	ldr	r1, [pc, #364]	; (800083c <HAL_RCC_OscConfig+0x324>)
 80006d0:	021b      	lsls	r3, r3, #8
 80006d2:	400a      	ands	r2, r1
 80006d4:	4313      	orrs	r3, r2
 80006d6:	6063      	str	r3, [r4, #4]
 80006d8:	e736      	b.n	8000548 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006da:	f7ff fdd5 	bl	8000288 <HAL_GetTick>
 80006de:	1bc0      	subs	r0, r0, r7
 80006e0:	2802      	cmp	r0, #2
 80006e2:	d9ee      	bls.n	80006c2 <HAL_RCC_OscConfig+0x1aa>
 80006e4:	e78f      	b.n	8000606 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_DISABLE();
 80006e6:	2201      	movs	r2, #1
 80006e8:	4393      	bics	r3, r2
 80006ea:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80006ec:	f7ff fdcc 	bl	8000288 <HAL_GetTick>
 80006f0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80006f2:	2204      	movs	r2, #4
 80006f4:	6823      	ldr	r3, [r4, #0]
 80006f6:	4213      	tst	r3, r2
 80006f8:	d100      	bne.n	80006fc <HAL_RCC_OscConfig+0x1e4>
 80006fa:	e725      	b.n	8000548 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006fc:	f7ff fdc4 	bl	8000288 <HAL_GetTick>
 8000700:	1bc0      	subs	r0, r0, r7
 8000702:	2802      	cmp	r0, #2
 8000704:	d9f5      	bls.n	80006f2 <HAL_RCC_OscConfig+0x1da>
 8000706:	e77e      	b.n	8000606 <HAL_RCC_OscConfig+0xee>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000708:	69eb      	ldr	r3, [r5, #28]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d020      	beq.n	8000750 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_MSI_ENABLE();
 800070e:	2380      	movs	r3, #128	; 0x80
 8000710:	6822      	ldr	r2, [r4, #0]
 8000712:	005b      	lsls	r3, r3, #1
 8000714:	4313      	orrs	r3, r2
 8000716:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000718:	f7ff fdb6 	bl	8000288 <HAL_GetTick>
 800071c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800071e:	2280      	movs	r2, #128	; 0x80
 8000720:	6823      	ldr	r3, [r4, #0]
 8000722:	0092      	lsls	r2, r2, #2
 8000724:	4213      	tst	r3, r2
 8000726:	d00d      	beq.n	8000744 <HAL_RCC_OscConfig+0x22c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000728:	6863      	ldr	r3, [r4, #4]
 800072a:	4a3f      	ldr	r2, [pc, #252]	; (8000828 <HAL_RCC_OscConfig+0x310>)
 800072c:	4013      	ands	r3, r2
 800072e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000730:	4313      	orrs	r3, r2
 8000732:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000734:	6862      	ldr	r2, [r4, #4]
 8000736:	6a2b      	ldr	r3, [r5, #32]
 8000738:	0212      	lsls	r2, r2, #8
 800073a:	061b      	lsls	r3, r3, #24
 800073c:	0a12      	lsrs	r2, r2, #8
 800073e:	4313      	orrs	r3, r2
 8000740:	6063      	str	r3, [r4, #4]
 8000742:	e72d      	b.n	80005a0 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000744:	f7ff fda0 	bl	8000288 <HAL_GetTick>
 8000748:	1bc0      	subs	r0, r0, r7
 800074a:	2802      	cmp	r0, #2
 800074c:	d9e7      	bls.n	800071e <HAL_RCC_OscConfig+0x206>
 800074e:	e75a      	b.n	8000606 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_MSI_DISABLE();
 8000750:	6823      	ldr	r3, [r4, #0]
 8000752:	4a3b      	ldr	r2, [pc, #236]	; (8000840 <HAL_RCC_OscConfig+0x328>)
 8000754:	4013      	ands	r3, r2
 8000756:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000758:	f7ff fd96 	bl	8000288 <HAL_GetTick>
 800075c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800075e:	2280      	movs	r2, #128	; 0x80
 8000760:	6823      	ldr	r3, [r4, #0]
 8000762:	0092      	lsls	r2, r2, #2
 8000764:	4213      	tst	r3, r2
 8000766:	d100      	bne.n	800076a <HAL_RCC_OscConfig+0x252>
 8000768:	e71a      	b.n	80005a0 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800076a:	f7ff fd8d 	bl	8000288 <HAL_GetTick>
 800076e:	1bc0      	subs	r0, r0, r7
 8000770:	2802      	cmp	r0, #2
 8000772:	d9f4      	bls.n	800075e <HAL_RCC_OscConfig+0x246>
 8000774:	e747      	b.n	8000606 <HAL_RCC_OscConfig+0xee>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000776:	696a      	ldr	r2, [r5, #20]
 8000778:	2301      	movs	r3, #1
 800077a:	2a00      	cmp	r2, #0
 800077c:	d010      	beq.n	80007a0 <HAL_RCC_OscConfig+0x288>
      __HAL_RCC_LSI_ENABLE();
 800077e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000780:	4313      	orrs	r3, r2
 8000782:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000784:	f7ff fd80 	bl	8000288 <HAL_GetTick>
 8000788:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800078a:	2202      	movs	r2, #2
 800078c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800078e:	4213      	tst	r3, r2
 8000790:	d000      	beq.n	8000794 <HAL_RCC_OscConfig+0x27c>
 8000792:	e709      	b.n	80005a8 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000794:	f7ff fd78 	bl	8000288 <HAL_GetTick>
 8000798:	1bc0      	subs	r0, r0, r7
 800079a:	2802      	cmp	r0, #2
 800079c:	d9f5      	bls.n	800078a <HAL_RCC_OscConfig+0x272>
 800079e:	e732      	b.n	8000606 <HAL_RCC_OscConfig+0xee>
      __HAL_RCC_LSI_DISABLE();
 80007a0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80007a2:	439a      	bics	r2, r3
 80007a4:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80007a6:	f7ff fd6f 	bl	8000288 <HAL_GetTick>
 80007aa:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80007ac:	2202      	movs	r2, #2
 80007ae:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80007b0:	4213      	tst	r3, r2
 80007b2:	d100      	bne.n	80007b6 <HAL_RCC_OscConfig+0x29e>
 80007b4:	e6f8      	b.n	80005a8 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007b6:	f7ff fd67 	bl	8000288 <HAL_GetTick>
 80007ba:	1bc0      	subs	r0, r0, r7
 80007bc:	2802      	cmp	r0, #2
 80007be:	d9f5      	bls.n	80007ac <HAL_RCC_OscConfig+0x294>
 80007c0:	e721      	b.n	8000606 <HAL_RCC_OscConfig+0xee>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80007c2:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80007c4:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80007c6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80007c8:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 80007ca:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80007cc:	421a      	tst	r2, r3
 80007ce:	d104      	bne.n	80007da <HAL_RCC_OscConfig+0x2c2>
      __HAL_RCC_PWR_CLK_ENABLE();
 80007d0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80007d2:	4313      	orrs	r3, r2
 80007d4:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 80007d6:	2301      	movs	r3, #1
 80007d8:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80007da:	2280      	movs	r2, #128	; 0x80
 80007dc:	4f19      	ldr	r7, [pc, #100]	; (8000844 <HAL_RCC_OscConfig+0x32c>)
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	4213      	tst	r3, r2
 80007e4:	d008      	beq.n	80007f8 <HAL_RCC_OscConfig+0x2e0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007e6:	2280      	movs	r2, #128	; 0x80
 80007e8:	68ab      	ldr	r3, [r5, #8]
 80007ea:	0052      	lsls	r2, r2, #1
 80007ec:	4293      	cmp	r3, r2
 80007ee:	d12b      	bne.n	8000848 <HAL_RCC_OscConfig+0x330>
 80007f0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80007f2:	4313      	orrs	r3, r2
 80007f4:	6523      	str	r3, [r4, #80]	; 0x50
 80007f6:	e04c      	b.n	8000892 <HAL_RCC_OscConfig+0x37a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80007f8:	2280      	movs	r2, #128	; 0x80
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	0052      	lsls	r2, r2, #1
 80007fe:	4313      	orrs	r3, r2
 8000800:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000802:	f7ff fd41 	bl	8000288 <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000806:	2380      	movs	r3, #128	; 0x80
 8000808:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 800080a:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800080c:	9303      	str	r3, [sp, #12]
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	9a03      	ldr	r2, [sp, #12]
 8000812:	4213      	tst	r3, r2
 8000814:	d1e7      	bne.n	80007e6 <HAL_RCC_OscConfig+0x2ce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000816:	f7ff fd37 	bl	8000288 <HAL_GetTick>
 800081a:	9b02      	ldr	r3, [sp, #8]
 800081c:	1ac0      	subs	r0, r0, r3
 800081e:	2864      	cmp	r0, #100	; 0x64
 8000820:	d9f5      	bls.n	800080e <HAL_RCC_OscConfig+0x2f6>
 8000822:	e6f0      	b.n	8000606 <HAL_RCC_OscConfig+0xee>
 8000824:	40021000 	.word	0x40021000
 8000828:	ffff1fff 	.word	0xffff1fff
 800082c:	08001352 	.word	0x08001352
 8000830:	20000088 	.word	0x20000088
 8000834:	fffeffff 	.word	0xfffeffff
 8000838:	fffbffff 	.word	0xfffbffff
 800083c:	ffffe0ff 	.word	0xffffe0ff
 8000840:	fffffeff 	.word	0xfffffeff
 8000844:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000848:	2b00      	cmp	r3, #0
 800084a:	d116      	bne.n	800087a <HAL_RCC_OscConfig+0x362>
 800084c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800084e:	4a6c      	ldr	r2, [pc, #432]	; (8000a00 <HAL_RCC_OscConfig+0x4e8>)
 8000850:	4013      	ands	r3, r2
 8000852:	6523      	str	r3, [r4, #80]	; 0x50
 8000854:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000856:	4a6b      	ldr	r2, [pc, #428]	; (8000a04 <HAL_RCC_OscConfig+0x4ec>)
 8000858:	4013      	ands	r3, r2
 800085a:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800085c:	f7ff fd14 	bl	8000288 <HAL_GetTick>
 8000860:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000862:	2280      	movs	r2, #128	; 0x80
 8000864:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000866:	0092      	lsls	r2, r2, #2
 8000868:	4213      	tst	r3, r2
 800086a:	d02a      	beq.n	80008c2 <HAL_RCC_OscConfig+0x3aa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800086c:	f7ff fd0c 	bl	8000288 <HAL_GetTick>
 8000870:	4b65      	ldr	r3, [pc, #404]	; (8000a08 <HAL_RCC_OscConfig+0x4f0>)
 8000872:	1bc0      	subs	r0, r0, r7
 8000874:	4298      	cmp	r0, r3
 8000876:	d9f4      	bls.n	8000862 <HAL_RCC_OscConfig+0x34a>
 8000878:	e6c5      	b.n	8000606 <HAL_RCC_OscConfig+0xee>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800087a:	21a0      	movs	r1, #160	; 0xa0
 800087c:	00c9      	lsls	r1, r1, #3
 800087e:	428b      	cmp	r3, r1
 8000880:	d10b      	bne.n	800089a <HAL_RCC_OscConfig+0x382>
 8000882:	2380      	movs	r3, #128	; 0x80
 8000884:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8000886:	00db      	lsls	r3, r3, #3
 8000888:	430b      	orrs	r3, r1
 800088a:	6523      	str	r3, [r4, #80]	; 0x50
 800088c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800088e:	431a      	orrs	r2, r3
 8000890:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000892:	f7ff fcf9 	bl	8000288 <HAL_GetTick>
 8000896:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000898:	e00e      	b.n	80008b8 <HAL_RCC_OscConfig+0x3a0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800089a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800089c:	4a58      	ldr	r2, [pc, #352]	; (8000a00 <HAL_RCC_OscConfig+0x4e8>)
 800089e:	4013      	ands	r3, r2
 80008a0:	6523      	str	r3, [r4, #80]	; 0x50
 80008a2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80008a4:	4a57      	ldr	r2, [pc, #348]	; (8000a04 <HAL_RCC_OscConfig+0x4ec>)
 80008a6:	4013      	ands	r3, r2
 80008a8:	e7a4      	b.n	80007f4 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008aa:	f7ff fced 	bl	8000288 <HAL_GetTick>
 80008ae:	4b56      	ldr	r3, [pc, #344]	; (8000a08 <HAL_RCC_OscConfig+0x4f0>)
 80008b0:	1bc0      	subs	r0, r0, r7
 80008b2:	4298      	cmp	r0, r3
 80008b4:	d900      	bls.n	80008b8 <HAL_RCC_OscConfig+0x3a0>
 80008b6:	e6a6      	b.n	8000606 <HAL_RCC_OscConfig+0xee>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80008b8:	2280      	movs	r2, #128	; 0x80
 80008ba:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80008bc:	0092      	lsls	r2, r2, #2
 80008be:	4213      	tst	r3, r2
 80008c0:	d0f3      	beq.n	80008aa <HAL_RCC_OscConfig+0x392>
    if(pwrclkchanged == SET)
 80008c2:	9b01      	ldr	r3, [sp, #4]
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d000      	beq.n	80008ca <HAL_RCC_OscConfig+0x3b2>
 80008c8:	e672      	b.n	80005b0 <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_PWR_CLK_DISABLE();
 80008ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80008cc:	4a4f      	ldr	r2, [pc, #316]	; (8000a0c <HAL_RCC_OscConfig+0x4f4>)
 80008ce:	4013      	ands	r3, r2
 80008d0:	63a3      	str	r3, [r4, #56]	; 0x38
 80008d2:	e66d      	b.n	80005b0 <HAL_RCC_OscConfig+0x98>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80008d4:	69a9      	ldr	r1, [r5, #24]
 80008d6:	2301      	movs	r3, #1
 80008d8:	4a4d      	ldr	r2, [pc, #308]	; (8000a10 <HAL_RCC_OscConfig+0x4f8>)
 80008da:	2900      	cmp	r1, #0
 80008dc:	d018      	beq.n	8000910 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_HSI48_ENABLE();
 80008de:	68a1      	ldr	r1, [r4, #8]
 80008e0:	4319      	orrs	r1, r3
 80008e2:	60a1      	str	r1, [r4, #8]
 80008e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80008e6:	430b      	orrs	r3, r1
 80008e8:	6363      	str	r3, [r4, #52]	; 0x34
 80008ea:	2380      	movs	r3, #128	; 0x80
 80008ec:	6a11      	ldr	r1, [r2, #32]
 80008ee:	019b      	lsls	r3, r3, #6
 80008f0:	430b      	orrs	r3, r1
 80008f2:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 80008f4:	f7ff fcc8 	bl	8000288 <HAL_GetTick>
 80008f8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80008fa:	2202      	movs	r2, #2
 80008fc:	68a3      	ldr	r3, [r4, #8]
 80008fe:	4213      	tst	r3, r2
 8000900:	d000      	beq.n	8000904 <HAL_RCC_OscConfig+0x3ec>
 8000902:	e659      	b.n	80005b8 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000904:	f7ff fcc0 	bl	8000288 <HAL_GetTick>
 8000908:	1bc0      	subs	r0, r0, r7
 800090a:	2802      	cmp	r0, #2
 800090c:	d9f5      	bls.n	80008fa <HAL_RCC_OscConfig+0x3e2>
 800090e:	e67a      	b.n	8000606 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI48_DISABLE();
 8000910:	68a1      	ldr	r1, [r4, #8]
 8000912:	4399      	bics	r1, r3
 8000914:	60a1      	str	r1, [r4, #8]
 8000916:	6a13      	ldr	r3, [r2, #32]
 8000918:	493e      	ldr	r1, [pc, #248]	; (8000a14 <HAL_RCC_OscConfig+0x4fc>)
 800091a:	400b      	ands	r3, r1
 800091c:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 800091e:	f7ff fcb3 	bl	8000288 <HAL_GetTick>
 8000922:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000924:	2202      	movs	r2, #2
 8000926:	68a3      	ldr	r3, [r4, #8]
 8000928:	4213      	tst	r3, r2
 800092a:	d100      	bne.n	800092e <HAL_RCC_OscConfig+0x416>
 800092c:	e644      	b.n	80005b8 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800092e:	f7ff fcab 	bl	8000288 <HAL_GetTick>
 8000932:	1bc0      	subs	r0, r0, r7
 8000934:	2802      	cmp	r0, #2
 8000936:	d9f5      	bls.n	8000924 <HAL_RCC_OscConfig+0x40c>
 8000938:	e665      	b.n	8000606 <HAL_RCC_OscConfig+0xee>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800093a:	2e0c      	cmp	r6, #12
 800093c:	d043      	beq.n	80009c6 <HAL_RCC_OscConfig+0x4ae>
 800093e:	4a36      	ldr	r2, [pc, #216]	; (8000a18 <HAL_RCC_OscConfig+0x500>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000940:	2b02      	cmp	r3, #2
 8000942:	d12e      	bne.n	80009a2 <HAL_RCC_OscConfig+0x48a>
        __HAL_RCC_PLL_DISABLE();
 8000944:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000946:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8000948:	4013      	ands	r3, r2
 800094a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800094c:	f7ff fc9c 	bl	8000288 <HAL_GetTick>
 8000950:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000952:	04b6      	lsls	r6, r6, #18
 8000954:	6823      	ldr	r3, [r4, #0]
 8000956:	4233      	tst	r3, r6
 8000958:	d11d      	bne.n	8000996 <HAL_RCC_OscConfig+0x47e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800095a:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800095c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800095e:	68e2      	ldr	r2, [r4, #12]
 8000960:	430b      	orrs	r3, r1
 8000962:	492e      	ldr	r1, [pc, #184]	; (8000a1c <HAL_RCC_OscConfig+0x504>)
 8000964:	400a      	ands	r2, r1
 8000966:	4313      	orrs	r3, r2
 8000968:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800096a:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800096c:	4313      	orrs	r3, r2
 800096e:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8000970:	2380      	movs	r3, #128	; 0x80
 8000972:	6822      	ldr	r2, [r4, #0]
 8000974:	045b      	lsls	r3, r3, #17
 8000976:	4313      	orrs	r3, r2
 8000978:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800097a:	f7ff fc85 	bl	8000288 <HAL_GetTick>
 800097e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8000980:	04ad      	lsls	r5, r5, #18
 8000982:	6823      	ldr	r3, [r4, #0]
 8000984:	422b      	tst	r3, r5
 8000986:	d000      	beq.n	800098a <HAL_RCC_OscConfig+0x472>
 8000988:	e61a      	b.n	80005c0 <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800098a:	f7ff fc7d 	bl	8000288 <HAL_GetTick>
 800098e:	1b80      	subs	r0, r0, r6
 8000990:	2802      	cmp	r0, #2
 8000992:	d9f6      	bls.n	8000982 <HAL_RCC_OscConfig+0x46a>
 8000994:	e637      	b.n	8000606 <HAL_RCC_OscConfig+0xee>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000996:	f7ff fc77 	bl	8000288 <HAL_GetTick>
 800099a:	1bc0      	subs	r0, r0, r7
 800099c:	2802      	cmp	r0, #2
 800099e:	d9d9      	bls.n	8000954 <HAL_RCC_OscConfig+0x43c>
 80009a0:	e631      	b.n	8000606 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_PLL_DISABLE();
 80009a2:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80009a4:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80009a6:	4013      	ands	r3, r2
 80009a8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80009aa:	f7ff fc6d 	bl	8000288 <HAL_GetTick>
 80009ae:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80009b0:	04ad      	lsls	r5, r5, #18
 80009b2:	6823      	ldr	r3, [r4, #0]
 80009b4:	422b      	tst	r3, r5
 80009b6:	d100      	bne.n	80009ba <HAL_RCC_OscConfig+0x4a2>
 80009b8:	e602      	b.n	80005c0 <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009ba:	f7ff fc65 	bl	8000288 <HAL_GetTick>
 80009be:	1b80      	subs	r0, r0, r6
 80009c0:	2802      	cmp	r0, #2
 80009c2:	d9f6      	bls.n	80009b2 <HAL_RCC_OscConfig+0x49a>
 80009c4:	e61f      	b.n	8000606 <HAL_RCC_OscConfig+0xee>
        return HAL_ERROR;
 80009c6:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d100      	bne.n	80009ce <HAL_RCC_OscConfig+0x4b6>
 80009cc:	e5aa      	b.n	8000524 <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80009ce:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 80009d0:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80009d2:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80009d4:	0252      	lsls	r2, r2, #9
 80009d6:	401a      	ands	r2, r3
        return HAL_ERROR;
 80009d8:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80009da:	428a      	cmp	r2, r1
 80009dc:	d000      	beq.n	80009e0 <HAL_RCC_OscConfig+0x4c8>
 80009de:	e5a1      	b.n	8000524 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80009e0:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80009e2:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80009e4:	0392      	lsls	r2, r2, #14
 80009e6:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80009e8:	428a      	cmp	r2, r1
 80009ea:	d000      	beq.n	80009ee <HAL_RCC_OscConfig+0x4d6>
 80009ec:	e59a      	b.n	8000524 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80009ee:	20c0      	movs	r0, #192	; 0xc0
 80009f0:	0400      	lsls	r0, r0, #16
 80009f2:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80009f4:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80009f6:	1a18      	subs	r0, r3, r0
 80009f8:	1e43      	subs	r3, r0, #1
 80009fa:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 80009fc:	b2c0      	uxtb	r0, r0
 80009fe:	e591      	b.n	8000524 <HAL_RCC_OscConfig+0xc>
 8000a00:	fffffeff 	.word	0xfffffeff
 8000a04:	fffffbff 	.word	0xfffffbff
 8000a08:	00001388 	.word	0x00001388
 8000a0c:	efffffff 	.word	0xefffffff
 8000a10:	40010000 	.word	0x40010000
 8000a14:	ffffdfff 	.word	0xffffdfff
 8000a18:	feffffff 	.word	0xfeffffff
 8000a1c:	ff02ffff 	.word	0xff02ffff

08000a20 <HAL_RCC_ClockConfig>:
{
 8000a20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000a22:	1e06      	subs	r6, r0, #0
 8000a24:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8000a26:	d101      	bne.n	8000a2c <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8000a28:	2001      	movs	r0, #1
}
 8000a2a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	4c51      	ldr	r4, [pc, #324]	; (8000b74 <HAL_RCC_ClockConfig+0x154>)
 8000a30:	9901      	ldr	r1, [sp, #4]
 8000a32:	6823      	ldr	r3, [r4, #0]
 8000a34:	4013      	ands	r3, r2
 8000a36:	428b      	cmp	r3, r1
 8000a38:	d327      	bcc.n	8000a8a <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a3a:	6832      	ldr	r2, [r6, #0]
 8000a3c:	0793      	lsls	r3, r2, #30
 8000a3e:	d42f      	bmi.n	8000aa0 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a40:	07d3      	lsls	r3, r2, #31
 8000a42:	d435      	bmi.n	8000ab0 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000a44:	2301      	movs	r3, #1
 8000a46:	6822      	ldr	r2, [r4, #0]
 8000a48:	9901      	ldr	r1, [sp, #4]
 8000a4a:	401a      	ands	r2, r3
 8000a4c:	4291      	cmp	r1, r2
 8000a4e:	d200      	bcs.n	8000a52 <HAL_RCC_ClockConfig+0x32>
 8000a50:	e081      	b.n	8000b56 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a52:	6832      	ldr	r2, [r6, #0]
 8000a54:	4c48      	ldr	r4, [pc, #288]	; (8000b78 <HAL_RCC_ClockConfig+0x158>)
 8000a56:	0753      	lsls	r3, r2, #29
 8000a58:	d500      	bpl.n	8000a5c <HAL_RCC_ClockConfig+0x3c>
 8000a5a:	e084      	b.n	8000b66 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a5c:	0713      	lsls	r3, r2, #28
 8000a5e:	d506      	bpl.n	8000a6e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000a60:	68e2      	ldr	r2, [r4, #12]
 8000a62:	6933      	ldr	r3, [r6, #16]
 8000a64:	4945      	ldr	r1, [pc, #276]	; (8000b7c <HAL_RCC_ClockConfig+0x15c>)
 8000a66:	00db      	lsls	r3, r3, #3
 8000a68:	400a      	ands	r2, r1
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000a6e:	f7ff fd17 	bl	80004a0 <HAL_RCC_GetSysClockFreq>
 8000a72:	68e3      	ldr	r3, [r4, #12]
 8000a74:	4a42      	ldr	r2, [pc, #264]	; (8000b80 <HAL_RCC_ClockConfig+0x160>)
 8000a76:	061b      	lsls	r3, r3, #24
 8000a78:	0f1b      	lsrs	r3, r3, #28
 8000a7a:	5cd3      	ldrb	r3, [r2, r3]
 8000a7c:	40d8      	lsrs	r0, r3
 8000a7e:	4b41      	ldr	r3, [pc, #260]	; (8000b84 <HAL_RCC_ClockConfig+0x164>)
 8000a80:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8000a82:	2000      	movs	r0, #0
 8000a84:	f7ff fbcc 	bl	8000220 <HAL_InitTick>
 8000a88:	e7cf      	b.n	8000a2a <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a8a:	6823      	ldr	r3, [r4, #0]
 8000a8c:	9901      	ldr	r1, [sp, #4]
 8000a8e:	4393      	bics	r3, r2
 8000a90:	430b      	orrs	r3, r1
 8000a92:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000a94:	6823      	ldr	r3, [r4, #0]
 8000a96:	4013      	ands	r3, r2
 8000a98:	9a01      	ldr	r2, [sp, #4]
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	d1c4      	bne.n	8000a28 <HAL_RCC_ClockConfig+0x8>
 8000a9e:	e7cc      	b.n	8000a3a <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000aa0:	20f0      	movs	r0, #240	; 0xf0
 8000aa2:	4935      	ldr	r1, [pc, #212]	; (8000b78 <HAL_RCC_ClockConfig+0x158>)
 8000aa4:	68cb      	ldr	r3, [r1, #12]
 8000aa6:	4383      	bics	r3, r0
 8000aa8:	68b0      	ldr	r0, [r6, #8]
 8000aaa:	4303      	orrs	r3, r0
 8000aac:	60cb      	str	r3, [r1, #12]
 8000aae:	e7c7      	b.n	8000a40 <HAL_RCC_ClockConfig+0x20>
 8000ab0:	4d31      	ldr	r5, [pc, #196]	; (8000b78 <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ab2:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000ab4:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ab6:	2a02      	cmp	r2, #2
 8000ab8:	d119      	bne.n	8000aee <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000aba:	039b      	lsls	r3, r3, #14
 8000abc:	d5b4      	bpl.n	8000a28 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000abe:	2103      	movs	r1, #3
 8000ac0:	68eb      	ldr	r3, [r5, #12]
 8000ac2:	438b      	bics	r3, r1
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8000ac8:	f7ff fbde 	bl	8000288 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000acc:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000ace:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ad0:	2b02      	cmp	r3, #2
 8000ad2:	d119      	bne.n	8000b08 <HAL_RCC_ClockConfig+0xe8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ad4:	220c      	movs	r2, #12
 8000ad6:	68eb      	ldr	r3, [r5, #12]
 8000ad8:	4013      	ands	r3, r2
 8000ada:	2b08      	cmp	r3, #8
 8000adc:	d0b2      	beq.n	8000a44 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ade:	f7ff fbd3 	bl	8000288 <HAL_GetTick>
 8000ae2:	4b29      	ldr	r3, [pc, #164]	; (8000b88 <HAL_RCC_ClockConfig+0x168>)
 8000ae4:	1bc0      	subs	r0, r0, r7
 8000ae6:	4298      	cmp	r0, r3
 8000ae8:	d9f4      	bls.n	8000ad4 <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 8000aea:	2003      	movs	r0, #3
 8000aec:	e79d      	b.n	8000a2a <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000aee:	2a03      	cmp	r2, #3
 8000af0:	d102      	bne.n	8000af8 <HAL_RCC_ClockConfig+0xd8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000af2:	019b      	lsls	r3, r3, #6
 8000af4:	d4e3      	bmi.n	8000abe <HAL_RCC_ClockConfig+0x9e>
 8000af6:	e797      	b.n	8000a28 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000af8:	2a01      	cmp	r2, #1
 8000afa:	d102      	bne.n	8000b02 <HAL_RCC_ClockConfig+0xe2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000afc:	075b      	lsls	r3, r3, #29
 8000afe:	d4de      	bmi.n	8000abe <HAL_RCC_ClockConfig+0x9e>
 8000b00:	e792      	b.n	8000a28 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000b02:	059b      	lsls	r3, r3, #22
 8000b04:	d4db      	bmi.n	8000abe <HAL_RCC_ClockConfig+0x9e>
 8000b06:	e78f      	b.n	8000a28 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b08:	2b03      	cmp	r3, #3
 8000b0a:	d10b      	bne.n	8000b24 <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b0c:	220c      	movs	r2, #12
 8000b0e:	68eb      	ldr	r3, [r5, #12]
 8000b10:	4013      	ands	r3, r2
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d096      	beq.n	8000a44 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b16:	f7ff fbb7 	bl	8000288 <HAL_GetTick>
 8000b1a:	4b1b      	ldr	r3, [pc, #108]	; (8000b88 <HAL_RCC_ClockConfig+0x168>)
 8000b1c:	1bc0      	subs	r0, r0, r7
 8000b1e:	4298      	cmp	r0, r3
 8000b20:	d9f4      	bls.n	8000b0c <HAL_RCC_ClockConfig+0xec>
 8000b22:	e7e2      	b.n	8000aea <HAL_RCC_ClockConfig+0xca>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d010      	beq.n	8000b4a <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8000b28:	220c      	movs	r2, #12
 8000b2a:	68eb      	ldr	r3, [r5, #12]
 8000b2c:	4213      	tst	r3, r2
 8000b2e:	d089      	beq.n	8000a44 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b30:	f7ff fbaa 	bl	8000288 <HAL_GetTick>
 8000b34:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <HAL_RCC_ClockConfig+0x168>)
 8000b36:	1bc0      	subs	r0, r0, r7
 8000b38:	4298      	cmp	r0, r3
 8000b3a:	d9f5      	bls.n	8000b28 <HAL_RCC_ClockConfig+0x108>
 8000b3c:	e7d5      	b.n	8000aea <HAL_RCC_ClockConfig+0xca>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b3e:	f7ff fba3 	bl	8000288 <HAL_GetTick>
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <HAL_RCC_ClockConfig+0x168>)
 8000b44:	1bc0      	subs	r0, r0, r7
 8000b46:	4298      	cmp	r0, r3
 8000b48:	d8cf      	bhi.n	8000aea <HAL_RCC_ClockConfig+0xca>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b4a:	220c      	movs	r2, #12
 8000b4c:	68eb      	ldr	r3, [r5, #12]
 8000b4e:	4013      	ands	r3, r2
 8000b50:	2b04      	cmp	r3, #4
 8000b52:	d1f4      	bne.n	8000b3e <HAL_RCC_ClockConfig+0x11e>
 8000b54:	e776      	b.n	8000a44 <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b56:	6822      	ldr	r2, [r4, #0]
 8000b58:	439a      	bics	r2, r3
 8000b5a:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000b5c:	6822      	ldr	r2, [r4, #0]
 8000b5e:	421a      	tst	r2, r3
 8000b60:	d000      	beq.n	8000b64 <HAL_RCC_ClockConfig+0x144>
 8000b62:	e761      	b.n	8000a28 <HAL_RCC_ClockConfig+0x8>
 8000b64:	e775      	b.n	8000a52 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000b66:	68e3      	ldr	r3, [r4, #12]
 8000b68:	4908      	ldr	r1, [pc, #32]	; (8000b8c <HAL_RCC_ClockConfig+0x16c>)
 8000b6a:	400b      	ands	r3, r1
 8000b6c:	68f1      	ldr	r1, [r6, #12]
 8000b6e:	430b      	orrs	r3, r1
 8000b70:	60e3      	str	r3, [r4, #12]
 8000b72:	e773      	b.n	8000a5c <HAL_RCC_ClockConfig+0x3c>
 8000b74:	40022000 	.word	0x40022000
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	ffffc7ff 	.word	0xffffc7ff
 8000b80:	08001352 	.word	0x08001352
 8000b84:	20000088 	.word	0x20000088
 8000b88:	00001388 	.word	0x00001388
 8000b8c:	fffff8ff 	.word	0xfffff8ff

08000b90 <SPI_WaitFlagStateUntilTimeout.constprop.8>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8000b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b92:	0004      	movs	r4, r0
 8000b94:	000d      	movs	r5, r1
 8000b96:	0016      	movs	r6, r2
 8000b98:	001f      	movs	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000b9a:	6822      	ldr	r2, [r4, #0]
 8000b9c:	6893      	ldr	r3, [r2, #8]
 8000b9e:	402b      	ands	r3, r5
 8000ba0:	429d      	cmp	r5, r3
 8000ba2:	d001      	beq.n	8000ba8 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	e031      	b.n	8000c0c <SPI_WaitFlagStateUntilTimeout.constprop.8+0x7c>
    if (Timeout != HAL_MAX_DELAY)
 8000ba8:	1c73      	adds	r3, r6, #1
 8000baa:	d0f7      	beq.n	8000b9c <SPI_WaitFlagStateUntilTimeout.constprop.8+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8000bac:	f7ff fb6c 	bl	8000288 <HAL_GetTick>
 8000bb0:	1bc0      	subs	r0, r0, r7
 8000bb2:	4286      	cmp	r6, r0
 8000bb4:	d8f1      	bhi.n	8000b9a <SPI_WaitFlagStateUntilTimeout.constprop.8+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000bb6:	21e0      	movs	r1, #224	; 0xe0
 8000bb8:	6823      	ldr	r3, [r4, #0]
 8000bba:	685a      	ldr	r2, [r3, #4]
 8000bbc:	438a      	bics	r2, r1
 8000bbe:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000bc0:	2282      	movs	r2, #130	; 0x82
 8000bc2:	6861      	ldr	r1, [r4, #4]
 8000bc4:	0052      	lsls	r2, r2, #1
 8000bc6:	4291      	cmp	r1, r2
 8000bc8:	d10c      	bne.n	8000be4 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x54>
 8000bca:	2180      	movs	r1, #128	; 0x80
 8000bcc:	68a2      	ldr	r2, [r4, #8]
 8000bce:	0209      	lsls	r1, r1, #8
 8000bd0:	428a      	cmp	r2, r1
 8000bd2:	d003      	beq.n	8000bdc <SPI_WaitFlagStateUntilTimeout.constprop.8+0x4c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000bd4:	2180      	movs	r1, #128	; 0x80
 8000bd6:	00c9      	lsls	r1, r1, #3
 8000bd8:	428a      	cmp	r2, r1
 8000bda:	d103      	bne.n	8000be4 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x54>
          __HAL_SPI_DISABLE(hspi);
 8000bdc:	2140      	movs	r1, #64	; 0x40
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	438a      	bics	r2, r1
 8000be2:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000be4:	2180      	movs	r1, #128	; 0x80
 8000be6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000be8:	0189      	lsls	r1, r1, #6
 8000bea:	428a      	cmp	r2, r1
 8000bec:	d106      	bne.n	8000bfc <SPI_WaitFlagStateUntilTimeout.constprop.8+0x6c>
          SPI_RESET_CRC(hspi);
 8000bee:	6819      	ldr	r1, [r3, #0]
 8000bf0:	4807      	ldr	r0, [pc, #28]	; (8000c10 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x80>)
 8000bf2:	4001      	ands	r1, r0
 8000bf4:	6019      	str	r1, [r3, #0]
 8000bf6:	6819      	ldr	r1, [r3, #0]
 8000bf8:	430a      	orrs	r2, r1
 8000bfa:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8000bfc:	0023      	movs	r3, r4
 8000bfe:	2201      	movs	r2, #1
 8000c00:	3351      	adds	r3, #81	; 0x51
 8000c02:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 8000c04:	2300      	movs	r3, #0
 8000c06:	2003      	movs	r0, #3
 8000c08:	3450      	adds	r4, #80	; 0x50
 8000c0a:	7023      	strb	r3, [r4, #0]
}
 8000c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	ffffdfff 	.word	0xffffdfff

08000c14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000c14:	0013      	movs	r3, r2
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000c16:	2282      	movs	r2, #130	; 0x82
{
 8000c18:	b510      	push	{r4, lr}
 8000c1a:	0004      	movs	r4, r0
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000c1c:	6840      	ldr	r0, [r0, #4]
 8000c1e:	0052      	lsls	r2, r2, #1
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d108      	bne.n	8000c36 <SPI_EndRxTxTransaction+0x22>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000c24:	000a      	movs	r2, r1
 8000c26:	2180      	movs	r1, #128	; 0x80
 8000c28:	0020      	movs	r0, r4
 8000c2a:	f7ff ffb1 	bl	8000b90 <SPI_WaitFlagStateUntilTimeout.constprop.8>
 8000c2e:	2800      	cmp	r0, #0
 8000c30:	d109      	bne.n	8000c46 <SPI_EndRxTxTransaction+0x32>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8000c32:	2000      	movs	r0, #0
}
 8000c34:	bd10      	pop	{r4, pc}
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 8000c36:	0022      	movs	r2, r4
 8000c38:	3251      	adds	r2, #81	; 0x51
 8000c3a:	7812      	ldrb	r2, [r2, #0]
 8000c3c:	2a05      	cmp	r2, #5
 8000c3e:	d1f8      	bne.n	8000c32 <SPI_EndRxTxTransaction+0x1e>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8000c40:	000a      	movs	r2, r1
 8000c42:	2101      	movs	r1, #1
 8000c44:	e7f0      	b.n	8000c28 <SPI_EndRxTxTransaction+0x14>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000c46:	2320      	movs	r3, #32
 8000c48:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8000c4a:	2003      	movs	r0, #3
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8000c50:	e7f0      	b.n	8000c34 <SPI_EndRxTxTransaction+0x20>
	...

08000c54 <HAL_SPI_Init>:
{
 8000c54:	b570      	push	{r4, r5, r6, lr}
 8000c56:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000c58:	2001      	movs	r0, #1
  if (hspi == NULL)
 8000c5a:	2c00      	cmp	r4, #0
 8000c5c:	d037      	beq.n	8000cce <HAL_SPI_Init+0x7a>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c5e:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8000c60:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c62:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8000c64:	3551      	adds	r5, #81	; 0x51
 8000c66:	782b      	ldrb	r3, [r5, #0]
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d105      	bne.n	8000c7a <HAL_SPI_Init+0x26>
    hspi->Lock = HAL_UNLOCKED;
 8000c6e:	0022      	movs	r2, r4
 8000c70:	3250      	adds	r2, #80	; 0x50
 8000c72:	7013      	strb	r3, [r2, #0]
    HAL_SPI_MspInit(hspi);
 8000c74:	0020      	movs	r0, r4
 8000c76:	f000 fa9b 	bl	80011b0 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8000c7a:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8000c7c:	2240      	movs	r2, #64	; 0x40
 8000c7e:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000c80:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8000c82:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000c84:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8000c86:	4393      	bics	r3, r2
 8000c88:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000c8a:	6863      	ldr	r3, [r4, #4]
 8000c8c:	69a2      	ldr	r2, [r4, #24]
 8000c8e:	4303      	orrs	r3, r0
 8000c90:	68e0      	ldr	r0, [r4, #12]
 8000c92:	4303      	orrs	r3, r0
 8000c94:	6920      	ldr	r0, [r4, #16]
 8000c96:	4303      	orrs	r3, r0
 8000c98:	6960      	ldr	r0, [r4, #20]
 8000c9a:	4303      	orrs	r3, r0
 8000c9c:	69e0      	ldr	r0, [r4, #28]
 8000c9e:	4303      	orrs	r3, r0
 8000ca0:	6a20      	ldr	r0, [r4, #32]
 8000ca2:	4303      	orrs	r3, r0
 8000ca4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000ca6:	4303      	orrs	r3, r0
 8000ca8:	2080      	movs	r0, #128	; 0x80
 8000caa:	0080      	lsls	r0, r0, #2
 8000cac:	4010      	ands	r0, r2
 8000cae:	4303      	orrs	r3, r0
 8000cb0:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000cb2:	2304      	movs	r3, #4
 8000cb4:	0c12      	lsrs	r2, r2, #16
 8000cb6:	401a      	ands	r2, r3
 8000cb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000cba:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000cbc:	431a      	orrs	r2, r3
 8000cbe:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000cc0:	69cb      	ldr	r3, [r1, #28]
 8000cc2:	4a03      	ldr	r2, [pc, #12]	; (8000cd0 <HAL_SPI_Init+0x7c>)
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8000cc8:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000cca:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000ccc:	702b      	strb	r3, [r5, #0]
}
 8000cce:	bd70      	pop	{r4, r5, r6, pc}
 8000cd0:	fffff7ff 	.word	0xfffff7ff

08000cd4 <HAL_SPI_Transmit>:
{
 8000cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cd6:	b087      	sub	sp, #28
 8000cd8:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hspi);
 8000cda:	0003      	movs	r3, r0
 8000cdc:	3350      	adds	r3, #80	; 0x50
 8000cde:	9303      	str	r3, [sp, #12]
 8000ce0:	781b      	ldrb	r3, [r3, #0]
{
 8000ce2:	0004      	movs	r4, r0
 8000ce4:	000e      	movs	r6, r1
 8000ce6:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 8000ce8:	2502      	movs	r5, #2
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d079      	beq.n	8000de2 <HAL_SPI_Transmit+0x10e>
 8000cee:	2301      	movs	r3, #1
 8000cf0:	9a03      	ldr	r2, [sp, #12]
 8000cf2:	7013      	strb	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8000cf4:	f7ff fac8 	bl	8000288 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8000cf8:	0022      	movs	r2, r4
  tickstart = HAL_GetTick();
 8000cfa:	9002      	str	r0, [sp, #8]
  if (hspi->State != HAL_SPI_STATE_READY)
 8000cfc:	3251      	adds	r2, #81	; 0x51
 8000cfe:	7813      	ldrb	r3, [r2, #0]
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d167      	bne.n	8000dd6 <HAL_SPI_Transmit+0x102>
    errorcode = HAL_ERROR;
 8000d06:	001d      	movs	r5, r3
  if ((pData == NULL) || (Size == 0U))
 8000d08:	2e00      	cmp	r6, #0
 8000d0a:	d064      	beq.n	8000dd6 <HAL_SPI_Transmit+0x102>
 8000d0c:	2f00      	cmp	r7, #0
 8000d0e:	d062      	beq.n	8000dd6 <HAL_SPI_Transmit+0x102>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8000d10:	3302      	adds	r3, #2
 8000d12:	7013      	strb	r3, [r2, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000d14:	2300      	movs	r3, #0
 8000d16:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8000d18:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8000d1a:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8000d1c:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8000d1e:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8000d20:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8000d22:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000d24:	2380      	movs	r3, #128	; 0x80
 8000d26:	68a2      	ldr	r2, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8000d28:	6326      	str	r6, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8000d2a:	86a7      	strh	r7, [r4, #52]	; 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000d2c:	021b      	lsls	r3, r3, #8
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d105      	bne.n	8000d3e <HAL_SPI_Transmit+0x6a>
    SPI_1LINE_TX(hspi);
 8000d32:	2380      	movs	r3, #128	; 0x80
 8000d34:	6822      	ldr	r2, [r4, #0]
 8000d36:	01db      	lsls	r3, r3, #7
 8000d38:	6811      	ldr	r1, [r2, #0]
 8000d3a:	430b      	orrs	r3, r1
 8000d3c:	6013      	str	r3, [r2, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000d3e:	2240      	movs	r2, #64	; 0x40
 8000d40:	6823      	ldr	r3, [r4, #0]
 8000d42:	6819      	ldr	r1, [r3, #0]
 8000d44:	4211      	tst	r1, r2
 8000d46:	d102      	bne.n	8000d4e <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 8000d48:	6819      	ldr	r1, [r3, #0]
 8000d4a:	430a      	orrs	r2, r1
 8000d4c:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000d4e:	2180      	movs	r1, #128	; 0x80
 8000d50:	68e0      	ldr	r0, [r4, #12]
 8000d52:	0109      	lsls	r1, r1, #4
 8000d54:	6862      	ldr	r2, [r4, #4]
 8000d56:	4288      	cmp	r0, r1
 8000d58:	d146      	bne.n	8000de8 <HAL_SPI_Transmit+0x114>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000d5a:	2a00      	cmp	r2, #0
 8000d5c:	d001      	beq.n	8000d62 <HAL_SPI_Transmit+0x8e>
 8000d5e:	2f01      	cmp	r7, #1
 8000d60:	d107      	bne.n	8000d72 <HAL_SPI_Transmit+0x9e>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000d62:	8832      	ldrh	r2, [r6, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8000d64:	3602      	adds	r6, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000d66:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8000d68:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8000d6a:	6326      	str	r6, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8000d6c:	3b01      	subs	r3, #1
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	86e3      	strh	r3, [r4, #54]	; 0x36
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000d72:	2502      	movs	r5, #2
    while (hspi->TxXferCount > 0U)
 8000d74:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d115      	bne.n	8000da6 <HAL_SPI_Transmit+0xd2>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8000d7a:	9a02      	ldr	r2, [sp, #8]
 8000d7c:	9901      	ldr	r1, [sp, #4]
 8000d7e:	0020      	movs	r0, r4
 8000d80:	f7ff ff48 	bl	8000c14 <SPI_EndRxTxTransaction>
 8000d84:	2800      	cmp	r0, #0
 8000d86:	d159      	bne.n	8000e3c <HAL_SPI_Transmit+0x168>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000d88:	68a3      	ldr	r3, [r4, #8]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d106      	bne.n	8000d9c <HAL_SPI_Transmit+0xc8>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000d8e:	9305      	str	r3, [sp, #20]
 8000d90:	6823      	ldr	r3, [r4, #0]
 8000d92:	68da      	ldr	r2, [r3, #12]
 8000d94:	9205      	str	r2, [sp, #20]
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	9305      	str	r3, [sp, #20]
 8000d9a:	9b05      	ldr	r3, [sp, #20]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000d9c:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8000d9e:	1e6b      	subs	r3, r5, #1
 8000da0:	419d      	sbcs	r5, r3
    errorcode = HAL_BUSY;
 8000da2:	b2ed      	uxtb	r5, r5
 8000da4:	e017      	b.n	8000dd6 <HAL_SPI_Transmit+0x102>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000da6:	6822      	ldr	r2, [r4, #0]
 8000da8:	6893      	ldr	r3, [r2, #8]
 8000daa:	422b      	tst	r3, r5
 8000dac:	d009      	beq.n	8000dc2 <HAL_SPI_Transmit+0xee>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000dae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000db0:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8000db2:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000db4:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8000db6:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8000db8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	86e3      	strh	r3, [r4, #54]	; 0x36
 8000dc0:	e7d8      	b.n	8000d74 <HAL_SPI_Transmit+0xa0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8000dc2:	f7ff fa61 	bl	8000288 <HAL_GetTick>
 8000dc6:	9b02      	ldr	r3, [sp, #8]
 8000dc8:	1ac0      	subs	r0, r0, r3
 8000dca:	9b01      	ldr	r3, [sp, #4]
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	d3d1      	bcc.n	8000d74 <HAL_SPI_Transmit+0xa0>
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	d0cf      	beq.n	8000d74 <HAL_SPI_Transmit+0xa0>
          errorcode = HAL_TIMEOUT;
 8000dd4:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	3451      	adds	r4, #81	; 0x51
 8000dda:	7023      	strb	r3, [r4, #0]
  __HAL_UNLOCK(hspi);
 8000ddc:	2300      	movs	r3, #0
 8000dde:	9a03      	ldr	r2, [sp, #12]
 8000de0:	7013      	strb	r3, [r2, #0]
}
 8000de2:	0028      	movs	r0, r5
 8000de4:	b007      	add	sp, #28
 8000de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000de8:	2a00      	cmp	r2, #0
 8000dea:	d001      	beq.n	8000df0 <HAL_SPI_Transmit+0x11c>
 8000dec:	2f01      	cmp	r7, #1
 8000dee:	d108      	bne.n	8000e02 <HAL_SPI_Transmit+0x12e>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8000df0:	7832      	ldrb	r2, [r6, #0]
 8000df2:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8000df4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000df6:	3301      	adds	r3, #1
 8000df8:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8000dfa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000dfc:	3b01      	subs	r3, #1
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	86e3      	strh	r3, [r4, #54]	; 0x36
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000e02:	2502      	movs	r5, #2
    while (hspi->TxXferCount > 0U)
 8000e04:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d0b7      	beq.n	8000d7a <HAL_SPI_Transmit+0xa6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000e0a:	6823      	ldr	r3, [r4, #0]
 8000e0c:	689a      	ldr	r2, [r3, #8]
 8000e0e:	422a      	tst	r2, r5
 8000e10:	d00a      	beq.n	8000e28 <HAL_SPI_Transmit+0x154>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8000e12:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000e14:	7812      	ldrb	r2, [r2, #0]
 8000e16:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8000e18:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8000e1e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000e20:	3b01      	subs	r3, #1
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	86e3      	strh	r3, [r4, #54]	; 0x36
 8000e26:	e7ed      	b.n	8000e04 <HAL_SPI_Transmit+0x130>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8000e28:	f7ff fa2e 	bl	8000288 <HAL_GetTick>
 8000e2c:	9b02      	ldr	r3, [sp, #8]
 8000e2e:	1ac0      	subs	r0, r0, r3
 8000e30:	9b01      	ldr	r3, [sp, #4]
 8000e32:	4283      	cmp	r3, r0
 8000e34:	d8e6      	bhi.n	8000e04 <HAL_SPI_Transmit+0x130>
 8000e36:	3301      	adds	r3, #1
 8000e38:	d0e4      	beq.n	8000e04 <HAL_SPI_Transmit+0x130>
 8000e3a:	e7cb      	b.n	8000dd4 <HAL_SPI_Transmit+0x100>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000e3c:	2320      	movs	r3, #32
 8000e3e:	6563      	str	r3, [r4, #84]	; 0x54
 8000e40:	e7a2      	b.n	8000d88 <HAL_SPI_Transmit+0xb4>
	...

08000e44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e44:	b510      	push	{r4, lr}
 8000e46:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e48:	2238      	movs	r2, #56	; 0x38
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	a806      	add	r0, sp, #24
 8000e4e:	f000 fa68 	bl	8001322 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e52:	2214      	movs	r2, #20
 8000e54:	2100      	movs	r1, #0
 8000e56:	a801      	add	r0, sp, #4
 8000e58:	f000 fa63 	bl	8001322 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e5c:	4910      	ldr	r1, [pc, #64]	; (8000ea0 <SystemClock_Config+0x5c>)
 8000e5e:	4a11      	ldr	r2, [pc, #68]	; (8000ea4 <SystemClock_Config+0x60>)
 8000e60:	680b      	ldr	r3, [r1, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000e62:	2400      	movs	r4, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e64:	401a      	ands	r2, r3
 8000e66:	2380      	movs	r3, #128	; 0x80
 8000e68:	011b      	lsls	r3, r3, #4
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000e6e:	2310      	movs	r3, #16
 8000e70:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e72:	3b0f      	subs	r3, #15
 8000e74:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000e76:	23a0      	movs	r3, #160	; 0xa0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e78:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000e7a:	021b      	lsls	r3, r3, #8
 8000e7c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000e7e:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e80:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e82:	f7ff fb49 	bl	8000518 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e86:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e88:	0021      	movs	r1, r4
 8000e8a:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e8c:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000e8e:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e90:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e92:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e94:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e96:	f7ff fdc3 	bl	8000a20 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8000e9a:	b014      	add	sp, #80	; 0x50
 8000e9c:	bd10      	pop	{r4, pc}
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	40007000 	.word	0x40007000
 8000ea4:	ffffe7ff 	.word	0xffffe7ff

08000ea8 <sendCMD>:
  HAL_GPIO_Init(oled_DC_GPIO_Port, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */
void sendCMD(uint8_t *cmd, uint16_t size) {
 8000ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eaa:	0006      	movs	r6, r0
 8000eac:	000f      	movs	r7, r1
	//set dc low
	HAL_GPIO_WritePin(oled_DC_GPIO_Port,  oled_DC_Pin, GPIO_PIN_RESET);
 8000eae:	20a0      	movs	r0, #160	; 0xa0
 8000eb0:	2180      	movs	r1, #128	; 0x80
	//set CS low

	HAL_GPIO_WritePin(oled_NSS_GPIO_Port,  oled_NSS_Pin, GPIO_PIN_RESET);
 8000eb2:	2580      	movs	r5, #128	; 0x80
 8000eb4:	4c0c      	ldr	r4, [pc, #48]	; (8000ee8 <sendCMD+0x40>)
 8000eb6:	016d      	lsls	r5, r5, #5
	HAL_GPIO_WritePin(oled_DC_GPIO_Port,  oled_DC_Pin, GPIO_PIN_RESET);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	0049      	lsls	r1, r1, #1
 8000ebc:	05c0      	lsls	r0, r0, #23
 8000ebe:	f7ff fae9 	bl	8000494 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(oled_NSS_GPIO_Port,  oled_NSS_Pin, GPIO_PIN_RESET);
 8000ec2:	0029      	movs	r1, r5
 8000ec4:	0020      	movs	r0, r4
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f7ff fae4 	bl	8000494 <HAL_GPIO_WritePin>
	//send cmd
	HAL_SPI_Transmit(&hspi2, cmd, size, 1000);
 8000ecc:	23fa      	movs	r3, #250	; 0xfa
 8000ece:	003a      	movs	r2, r7
 8000ed0:	0031      	movs	r1, r6
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	4805      	ldr	r0, [pc, #20]	; (8000eec <sendCMD+0x44>)
 8000ed6:	f7ff fefd 	bl	8000cd4 <HAL_SPI_Transmit>
	//set CS high

	HAL_GPIO_WritePin(oled_NSS_GPIO_Port,  oled_NSS_Pin, GPIO_PIN_SET);
 8000eda:	0029      	movs	r1, r5
 8000edc:	2201      	movs	r2, #1
 8000ede:	0020      	movs	r0, r4
 8000ee0:	f7ff fad8 	bl	8000494 <HAL_GPIO_WritePin>

}
 8000ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ee6:	46c0      	nop			; (mov r8, r8)
 8000ee8:	50000400 	.word	0x50000400
 8000eec:	200000b0 	.word	0x200000b0

08000ef0 <sendDATA>:

void sendDATA(uint8_t *data, uint16_t size) {
 8000ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ef2:	0006      	movs	r6, r0
 8000ef4:	000f      	movs	r7, r1
	//send and go through buffer
	//set dc high

	HAL_GPIO_WritePin(oled_DC_GPIO_Port, oled_DC_Pin, GPIO_PIN_SET);
 8000ef6:	20a0      	movs	r0, #160	; 0xa0
 8000ef8:	2180      	movs	r1, #128	; 0x80
	//set CS low

	HAL_GPIO_WritePin(oled_NSS_GPIO_Port,  oled_NSS_Pin, GPIO_PIN_RESET);
 8000efa:	2580      	movs	r5, #128	; 0x80
 8000efc:	4c0c      	ldr	r4, [pc, #48]	; (8000f30 <sendDATA+0x40>)
 8000efe:	016d      	lsls	r5, r5, #5
	HAL_GPIO_WritePin(oled_DC_GPIO_Port, oled_DC_Pin, GPIO_PIN_SET);
 8000f00:	2201      	movs	r2, #1
 8000f02:	0049      	lsls	r1, r1, #1
 8000f04:	05c0      	lsls	r0, r0, #23
 8000f06:	f7ff fac5 	bl	8000494 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(oled_NSS_GPIO_Port,  oled_NSS_Pin, GPIO_PIN_RESET);
 8000f0a:	0029      	movs	r1, r5
 8000f0c:	0020      	movs	r0, r4
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f7ff fac0 	bl	8000494 <HAL_GPIO_WritePin>
	//sendData
	//for(int i=0; i<dataSize;i++);
	HAL_SPI_Transmit(&hspi2, data, size, 1000);
 8000f14:	23fa      	movs	r3, #250	; 0xfa
 8000f16:	003a      	movs	r2, r7
 8000f18:	0031      	movs	r1, r6
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	4805      	ldr	r0, [pc, #20]	; (8000f34 <sendDATA+0x44>)
 8000f1e:	f7ff fed9 	bl	8000cd4 <HAL_SPI_Transmit>
	//set CS high
	HAL_GPIO_WritePin(oled_NSS_GPIO_Port,  oled_NSS_Pin, GPIO_PIN_SET);
 8000f22:	0029      	movs	r1, r5
 8000f24:	2201      	movs	r2, #1
 8000f26:	0020      	movs	r0, r4
 8000f28:	f7ff fab4 	bl	8000494 <HAL_GPIO_WritePin>
	//set dc high

	//HAL_GPIO_WritePin(oled_DC_GPIO_Port, oled_DC_Pin, GPIO_PIN_RESET);
}
 8000f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f2e:	46c0      	nop			; (mov r8, r8)
 8000f30:	50000400 	.word	0x50000400
 8000f34:	200000b0 	.word	0x200000b0

08000f38 <main>:
{
 8000f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f3a:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8000f3c:	f7ff f988 	bl	8000250 <HAL_Init>
  SystemClock_Config();
 8000f40:	f7ff ff80 	bl	8000e44 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	2214      	movs	r2, #20
 8000f46:	2100      	movs	r1, #0
 8000f48:	a803      	add	r0, sp, #12
 8000f4a:	f000 f9ea 	bl	8001322 <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4e:	2002      	movs	r0, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f50:	2501      	movs	r5, #1
  HAL_GPIO_WritePin(GPIOB, oled_NSS_Pin|ole_RES_Pin, GPIO_PIN_RESET);
 8000f52:	26a0      	movs	r6, #160	; 0xa0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f54:	4b73      	ldr	r3, [pc, #460]	; (8001124 <main+0x1ec>)
  HAL_GPIO_WritePin(GPIOB, oled_NSS_Pin|ole_RES_Pin, GPIO_PIN_RESET);
 8000f56:	01f6      	lsls	r6, r6, #7
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(oled_DC_GPIO_Port, oled_DC_Pin, GPIO_PIN_RESET);
 8000f5a:	2780      	movs	r7, #128	; 0x80
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5c:	4301      	orrs	r1, r0
 8000f5e:	62d9      	str	r1, [r3, #44]	; 0x2c
 8000f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOB, oled_NSS_Pin|ole_RES_Pin, GPIO_PIN_RESET);
 8000f62:	0031      	movs	r1, r6
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f64:	4002      	ands	r2, r0
 8000f66:	9201      	str	r2, [sp, #4]
 8000f68:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOB, oled_NSS_Pin|ole_RES_Pin, GPIO_PIN_RESET);
 8000f6c:	486e      	ldr	r0, [pc, #440]	; (8001128 <main+0x1f0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6e:	432a      	orrs	r2, r5
 8000f70:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOB, oled_NSS_Pin|ole_RES_Pin, GPIO_PIN_RESET);
 8000f74:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f76:	402b      	ands	r3, r5
 8000f78:	9302      	str	r3, [sp, #8]
 8000f7a:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, oled_NSS_Pin|ole_RES_Pin, GPIO_PIN_RESET);
 8000f7c:	f7ff fa8a 	bl	8000494 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(oled_DC_GPIO_Port, oled_DC_Pin, GPIO_PIN_RESET);
 8000f80:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(oled_DC_GPIO_Port, oled_DC_Pin, GPIO_PIN_RESET);
 8000f84:	007f      	lsls	r7, r7, #1
 8000f86:	2200      	movs	r2, #0
 8000f88:	0039      	movs	r1, r7
 8000f8a:	05c0      	lsls	r0, r0, #23
 8000f8c:	f7ff fa82 	bl	8000494 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f90:	a903      	add	r1, sp, #12
 8000f92:	4865      	ldr	r0, [pc, #404]	; (8001128 <main+0x1f0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f96:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = oled_NSS_Pin|ole_RES_Pin;
 8000f98:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9a:	9504      	str	r5, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9c:	f7ff f9c4 	bl	8000328 <HAL_GPIO_Init>
  HAL_GPIO_Init(oled_DC_GPIO_Port, &GPIO_InitStruct);
 8000fa0:	20a0      	movs	r0, #160	; 0xa0
 8000fa2:	a903      	add	r1, sp, #12
 8000fa4:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa8:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = oled_DC_Pin;
 8000faa:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fac:	9504      	str	r5, [sp, #16]
  HAL_GPIO_Init(oled_DC_GPIO_Port, &GPIO_InitStruct);
 8000fae:	f7ff f9bb 	bl	8000328 <HAL_GPIO_Init>
  hspi2.Instance = SPI2;
 8000fb2:	485e      	ldr	r0, [pc, #376]	; (800112c <main+0x1f4>)
 8000fb4:	4b5e      	ldr	r3, [pc, #376]	; (8001130 <main+0x1f8>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000fb6:	6084      	str	r4, [r0, #8]
  hspi2.Instance = SPI2;
 8000fb8:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000fba:	2382      	movs	r3, #130	; 0x82
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	6043      	str	r3, [r0, #4]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000fc0:	33fc      	adds	r3, #252	; 0xfc
 8000fc2:	6183      	str	r3, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000fc4:	3bd1      	subs	r3, #209	; 0xd1
 8000fc6:	3bff      	subs	r3, #255	; 0xff
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fc8:	60c4      	str	r4, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fca:	6104      	str	r4, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fcc:	6144      	str	r4, [r0, #20]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fce:	6204      	str	r4, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fd0:	6244      	str	r4, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fd2:	6284      	str	r4, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000fd4:	3407      	adds	r4, #7
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000fd6:	61c3      	str	r3, [r0, #28]
  hspi2.Init.CRCPolynomial = 7;
 8000fd8:	62c4      	str	r4, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000fda:	f7ff fe3b 	bl	8000c54 <HAL_SPI_Init>
  HAL_GPIO_WritePin(GPIOB, oled_NSS_Pin|ole_RES_Pin, GPIO_PIN_SET);
 8000fde:	002a      	movs	r2, r5
 8000fe0:	0031      	movs	r1, r6
 8000fe2:	4851      	ldr	r0, [pc, #324]	; (8001128 <main+0x1f0>)
 8000fe4:	f7ff fa56 	bl	8000494 <HAL_GPIO_WritePin>
  sendCMD(turnOn, (uint16_t)sizeof(turnOn));
 8000fe8:	0021      	movs	r1, r4
 8000fea:	4852      	ldr	r0, [pc, #328]	; (8001134 <main+0x1fc>)
 8000fec:	2480      	movs	r4, #128	; 0x80
 8000fee:	f7ff ff5b 	bl	8000ea8 <sendCMD>
 8000ff2:	00e4      	lsls	r4, r4, #3
	  sendDATA(space, (uint16_t)sizeof(space));
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	4850      	ldr	r0, [pc, #320]	; (8001138 <main+0x200>)
 8000ff8:	3c01      	subs	r4, #1
 8000ffa:	f7ff ff79 	bl	8000ef0 <sendDATA>
  for (int i=0; i<1024; i++){
 8000ffe:	2c00      	cmp	r4, #0
 8001000:	d1f8      	bne.n	8000ff4 <main+0xbc>
	  uint8_t page[] = {0x22, 0xB0,0xB0};
 8001002:	2503      	movs	r5, #3
	  sendDATA(A, (uint16_t)sizeof(A));
 8001004:	3406      	adds	r4, #6
	  uint8_t page[] = {0x22, 0xB0,0xB0};
 8001006:	4e4d      	ldr	r6, [pc, #308]	; (800113c <main+0x204>)
 8001008:	002a      	movs	r2, r5
 800100a:	0031      	movs	r1, r6
 800100c:	4668      	mov	r0, sp
 800100e:	f000 f97f 	bl	8001310 <memcpy>
	  uint8_t col[]= {0x21, 0x00, 0x7F};
 8001012:	002a      	movs	r2, r5
 8001014:	1cf1      	adds	r1, r6, #3
 8001016:	a803      	add	r0, sp, #12
 8001018:	f000 f97a 	bl	8001310 <memcpy>
	  sendCMD(page,(uint16_t)sizeof(page));
 800101c:	0029      	movs	r1, r5
 800101e:	4668      	mov	r0, sp
 8001020:	f7ff ff42 	bl	8000ea8 <sendCMD>
	  sendCMD(col, (uint16_t)sizeof(col));
 8001024:	0029      	movs	r1, r5
 8001026:	a803      	add	r0, sp, #12
 8001028:	f7ff ff3e 	bl	8000ea8 <sendCMD>
	  sendDATA(A, (uint16_t)sizeof(A));
 800102c:	0021      	movs	r1, r4
 800102e:	4844      	ldr	r0, [pc, #272]	; (8001140 <main+0x208>)
 8001030:	f7ff ff5e 	bl	8000ef0 <sendDATA>
	  sendDATA(B, (uint16_t)sizeof(B));
 8001034:	0021      	movs	r1, r4
 8001036:	4843      	ldr	r0, [pc, #268]	; (8001144 <main+0x20c>)
 8001038:	f7ff ff5a 	bl	8000ef0 <sendDATA>
	  sendDATA(C, (uint16_t)sizeof(C));
 800103c:	0021      	movs	r1, r4
 800103e:	4842      	ldr	r0, [pc, #264]	; (8001148 <main+0x210>)
 8001040:	f7ff ff56 	bl	8000ef0 <sendDATA>
	  sendDATA(D, (uint16_t)sizeof(D));
 8001044:	0021      	movs	r1, r4
 8001046:	4841      	ldr	r0, [pc, #260]	; (800114c <main+0x214>)
 8001048:	f7ff ff52 	bl	8000ef0 <sendDATA>
	  sendDATA(E, (uint16_t)sizeof(E));
 800104c:	0021      	movs	r1, r4
 800104e:	4840      	ldr	r0, [pc, #256]	; (8001150 <main+0x218>)
 8001050:	f7ff ff4e 	bl	8000ef0 <sendDATA>
	  sendDATA(F, (uint16_t)sizeof(E));
 8001054:	0021      	movs	r1, r4
 8001056:	483f      	ldr	r0, [pc, #252]	; (8001154 <main+0x21c>)
 8001058:	f7ff ff4a 	bl	8000ef0 <sendDATA>
	  sendDATA(G, (uint16_t)sizeof(E));
 800105c:	0021      	movs	r1, r4
 800105e:	483e      	ldr	r0, [pc, #248]	; (8001158 <main+0x220>)
 8001060:	f7ff ff46 	bl	8000ef0 <sendDATA>
	  sendDATA(H, (uint16_t)sizeof(E));
 8001064:	4f3d      	ldr	r7, [pc, #244]	; (800115c <main+0x224>)
 8001066:	0021      	movs	r1, r4
 8001068:	0038      	movs	r0, r7
 800106a:	f7ff ff41 	bl	8000ef0 <sendDATA>
	  sendDATA(I, (uint16_t)sizeof(E));
 800106e:	0021      	movs	r1, r4
 8001070:	483b      	ldr	r0, [pc, #236]	; (8001160 <main+0x228>)
 8001072:	f7ff ff3d 	bl	8000ef0 <sendDATA>
	  sendDATA(J, (uint16_t)sizeof(E));
 8001076:	0021      	movs	r1, r4
 8001078:	483a      	ldr	r0, [pc, #232]	; (8001164 <main+0x22c>)
 800107a:	f7ff ff39 	bl	8000ef0 <sendDATA>
	  sendDATA(K, (uint16_t)sizeof(E));
 800107e:	0021      	movs	r1, r4
 8001080:	4839      	ldr	r0, [pc, #228]	; (8001168 <main+0x230>)
 8001082:	f7ff ff35 	bl	8000ef0 <sendDATA>
	  sendDATA(L, (uint16_t)sizeof(E));
 8001086:	4e39      	ldr	r6, [pc, #228]	; (800116c <main+0x234>)
 8001088:	0021      	movs	r1, r4
 800108a:	0030      	movs	r0, r6
 800108c:	f7ff ff30 	bl	8000ef0 <sendDATA>
	  sendDATA(M, (uint16_t)sizeof(E));
 8001090:	0021      	movs	r1, r4
 8001092:	4837      	ldr	r0, [pc, #220]	; (8001170 <main+0x238>)
 8001094:	f7ff ff2c 	bl	8000ef0 <sendDATA>
	  sendDATA(N, (uint16_t)sizeof(E));
 8001098:	0021      	movs	r1, r4
 800109a:	4836      	ldr	r0, [pc, #216]	; (8001174 <main+0x23c>)
 800109c:	f7ff ff28 	bl	8000ef0 <sendDATA>
	  sendDATA(O, (uint16_t)sizeof(E));
 80010a0:	0021      	movs	r1, r4
 80010a2:	4835      	ldr	r0, [pc, #212]	; (8001178 <main+0x240>)
 80010a4:	f7ff ff24 	bl	8000ef0 <sendDATA>
	  sendDATA(P, (uint16_t)sizeof(E));
 80010a8:	0021      	movs	r1, r4
 80010aa:	4834      	ldr	r0, [pc, #208]	; (800117c <main+0x244>)
 80010ac:	f7ff ff20 	bl	8000ef0 <sendDATA>
	  sendDATA(Q, (uint16_t)sizeof(E));
 80010b0:	0021      	movs	r1, r4
 80010b2:	4833      	ldr	r0, [pc, #204]	; (8001180 <main+0x248>)
 80010b4:	f7ff ff1c 	bl	8000ef0 <sendDATA>
	  sendDATA(R, (uint16_t)sizeof(E));
 80010b8:	0021      	movs	r1, r4
 80010ba:	4832      	ldr	r0, [pc, #200]	; (8001184 <main+0x24c>)
 80010bc:	f7ff ff18 	bl	8000ef0 <sendDATA>
	  sendDATA(S, (uint16_t)sizeof(E));
 80010c0:	0021      	movs	r1, r4
 80010c2:	4831      	ldr	r0, [pc, #196]	; (8001188 <main+0x250>)
 80010c4:	f7ff ff14 	bl	8000ef0 <sendDATA>
	  sendDATA(T, (uint16_t)sizeof(E));
 80010c8:	0021      	movs	r1, r4
 80010ca:	4830      	ldr	r0, [pc, #192]	; (800118c <main+0x254>)
 80010cc:	f7ff ff10 	bl	8000ef0 <sendDATA>
	  sendDATA(U, (uint16_t)sizeof(E));
 80010d0:	0021      	movs	r1, r4
 80010d2:	482f      	ldr	r0, [pc, #188]	; (8001190 <main+0x258>)
 80010d4:	f7ff ff0c 	bl	8000ef0 <sendDATA>
	  page[1]=0xB1;
 80010d8:	23b1      	movs	r3, #177	; 0xb1
 80010da:	466a      	mov	r2, sp
	  sendCMD(page,(uint16_t)sizeof(page));
 80010dc:	0029      	movs	r1, r5
 80010de:	4668      	mov	r0, sp
	  page[1]=0xB1;
 80010e0:	7053      	strb	r3, [r2, #1]
	  page[2]=0xB1;
 80010e2:	7093      	strb	r3, [r2, #2]
	  sendCMD(page,(uint16_t)sizeof(page));
 80010e4:	f7ff fee0 	bl	8000ea8 <sendCMD>
	  sendCMD(col, (uint16_t)sizeof(col));
 80010e8:	0029      	movs	r1, r5
 80010ea:	a803      	add	r0, sp, #12
 80010ec:	f7ff fedc 	bl	8000ea8 <sendCMD>
	  sendDATA(H, (uint16_t)sizeof(H));
 80010f0:	0021      	movs	r1, r4
 80010f2:	0038      	movs	r0, r7
 80010f4:	f7ff fefc 	bl	8000ef0 <sendDATA>
	  sendDATA(E, (uint16_t)sizeof(E));
 80010f8:	0021      	movs	r1, r4
 80010fa:	4815      	ldr	r0, [pc, #84]	; (8001150 <main+0x218>)
 80010fc:	f7ff fef8 	bl	8000ef0 <sendDATA>
	  sendDATA(L, (uint16_t)sizeof(L));
 8001100:	0021      	movs	r1, r4
 8001102:	0030      	movs	r0, r6
 8001104:	f7ff fef4 	bl	8000ef0 <sendDATA>
	  sendDATA(L, (uint16_t)sizeof(L));
 8001108:	0021      	movs	r1, r4
 800110a:	0030      	movs	r0, r6
 800110c:	f7ff fef0 	bl	8000ef0 <sendDATA>
	  sendDATA(O, (uint16_t)sizeof(O));
 8001110:	0021      	movs	r1, r4
 8001112:	4819      	ldr	r0, [pc, #100]	; (8001178 <main+0x240>)
 8001114:	f7ff feec 	bl	8000ef0 <sendDATA>
	  sendDATA(space, (uint16_t)sizeof(space));
 8001118:	2101      	movs	r1, #1
 800111a:	4807      	ldr	r0, [pc, #28]	; (8001138 <main+0x200>)
 800111c:	f7ff fee8 	bl	8000ef0 <sendDATA>
 8001120:	e771      	b.n	8001006 <main+0xce>
 8001122:	46c0      	nop			; (mov r8, r8)
 8001124:	40021000 	.word	0x40021000
 8001128:	50000400 	.word	0x50000400
 800112c:	200000b0 	.word	0x200000b0
 8001130:	40003800 	.word	0x40003800
 8001134:	2000007e 	.word	0x2000007e
 8001138:	200000a8 	.word	0x200000a8
 800113c:	0800134c 	.word	0x0800134c
 8001140:	20000000 	.word	0x20000000
 8001144:	20000006 	.word	0x20000006
 8001148:	2000000c 	.word	0x2000000c
 800114c:	20000012 	.word	0x20000012
 8001150:	20000018 	.word	0x20000018
 8001154:	2000001e 	.word	0x2000001e
 8001158:	20000024 	.word	0x20000024
 800115c:	2000002a 	.word	0x2000002a
 8001160:	20000030 	.word	0x20000030
 8001164:	20000036 	.word	0x20000036
 8001168:	2000003c 	.word	0x2000003c
 800116c:	20000042 	.word	0x20000042
 8001170:	20000048 	.word	0x20000048
 8001174:	2000004e 	.word	0x2000004e
 8001178:	20000054 	.word	0x20000054
 800117c:	2000005a 	.word	0x2000005a
 8001180:	20000060 	.word	0x20000060
 8001184:	20000066 	.word	0x20000066
 8001188:	2000006c 	.word	0x2000006c
 800118c:	20000072 	.word	0x20000072
 8001190:	20000078 	.word	0x20000078

08001194 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001194:	2201      	movs	r2, #1
 8001196:	4b05      	ldr	r3, [pc, #20]	; (80011ac <HAL_MspInit+0x18>)
 8001198:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800119a:	430a      	orrs	r2, r1
 800119c:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800119e:	2280      	movs	r2, #128	; 0x80
 80011a0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80011a2:	0552      	lsls	r2, r2, #21
 80011a4:	430a      	orrs	r2, r1
 80011a6:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011a8:	4770      	bx	lr
 80011aa:	46c0      	nop			; (mov r8, r8)
 80011ac:	40021000 	.word	0x40021000

080011b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011b0:	b510      	push	{r4, lr}
 80011b2:	0004      	movs	r4, r0
 80011b4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b6:	2214      	movs	r2, #20
 80011b8:	2100      	movs	r1, #0
 80011ba:	a801      	add	r0, sp, #4
 80011bc:	f000 f8b1 	bl	8001322 <memset>
  if(hspi->Instance==SPI2)
 80011c0:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <HAL_SPI_MspInit+0x4c>)
 80011c2:	6822      	ldr	r2, [r4, #0]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d117      	bne.n	80011f8 <HAL_SPI_MspInit+0x48>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011c8:	2280      	movs	r2, #128	; 0x80
 80011ca:	4b0d      	ldr	r3, [pc, #52]	; (8001200 <HAL_SPI_MspInit+0x50>)
 80011cc:	01d2      	lsls	r2, r2, #7
 80011ce:	6b99      	ldr	r1, [r3, #56]	; 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d0:	480c      	ldr	r0, [pc, #48]	; (8001204 <HAL_SPI_MspInit+0x54>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011d2:	430a      	orrs	r2, r1
 80011d4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d6:	2202      	movs	r2, #2
 80011d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011da:	4311      	orrs	r1, r2
 80011dc:	62d9      	str	r1, [r3, #44]	; 0x2c
 80011de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e0:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e2:	4013      	ands	r3, r2
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80011e8:	23a0      	movs	r3, #160	; 0xa0
 80011ea:	021b      	lsls	r3, r3, #8
 80011ec:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ee:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f0:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f2:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f4:	f7ff f898 	bl	8000328 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80011f8:	b006      	add	sp, #24
 80011fa:	bd10      	pop	{r4, pc}
 80011fc:	40003800 	.word	0x40003800
 8001200:	40021000 	.word	0x40021000
 8001204:	50000400 	.word	0x50000400

08001208 <NMI_Handler>:
 8001208:	4770      	bx	lr

0800120a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800120a:	e7fe      	b.n	800120a <HardFault_Handler>

0800120c <SVC_Handler>:
 800120c:	4770      	bx	lr

0800120e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800120e:	4770      	bx	lr

08001210 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001210:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001212:	f7ff f831 	bl	8000278 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001216:	bd10      	pop	{r4, pc}

08001218 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8001218:	2280      	movs	r2, #128	; 0x80
 800121a:	4b10      	ldr	r3, [pc, #64]	; (800125c <SystemInit+0x44>)
 800121c:	0052      	lsls	r2, r2, #1
 800121e:	6819      	ldr	r1, [r3, #0]
 8001220:	430a      	orrs	r2, r1
 8001222:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8001224:	68da      	ldr	r2, [r3, #12]
 8001226:	490e      	ldr	r1, [pc, #56]	; (8001260 <SystemInit+0x48>)
 8001228:	400a      	ands	r2, r1
 800122a:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	490d      	ldr	r1, [pc, #52]	; (8001264 <SystemInit+0x4c>)
 8001230:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001232:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8001234:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001236:	689a      	ldr	r2, [r3, #8]
 8001238:	438a      	bics	r2, r1
 800123a:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	490a      	ldr	r1, [pc, #40]	; (8001268 <SystemInit+0x50>)
 8001240:	400a      	ands	r2, r1
 8001242:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8001244:	68da      	ldr	r2, [r3, #12]
 8001246:	4909      	ldr	r1, [pc, #36]	; (800126c <SystemInit+0x54>)
 8001248:	400a      	ands	r2, r1
 800124a:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800124c:	2200      	movs	r2, #0
 800124e:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001250:	2280      	movs	r2, #128	; 0x80
 8001252:	4b07      	ldr	r3, [pc, #28]	; (8001270 <SystemInit+0x58>)
 8001254:	0512      	lsls	r2, r2, #20
 8001256:	609a      	str	r2, [r3, #8]
#endif
}
 8001258:	4770      	bx	lr
 800125a:	46c0      	nop			; (mov r8, r8)
 800125c:	40021000 	.word	0x40021000
 8001260:	88ff400c 	.word	0x88ff400c
 8001264:	fef6fff6 	.word	0xfef6fff6
 8001268:	fffbffff 	.word	0xfffbffff
 800126c:	ff02ffff 	.word	0xff02ffff
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8001274:	480d      	ldr	r0, [pc, #52]	; (80012ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001276:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001278:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800127a:	e003      	b.n	8001284 <LoopCopyDataInit>

0800127c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800127c:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 800127e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001280:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001282:	3104      	adds	r1, #4

08001284 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8001284:	480b      	ldr	r0, [pc, #44]	; (80012b4 <LoopForever+0xa>)
  ldr  r3, =_edata
 8001286:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <LoopForever+0xe>)
  adds  r2, r0, r1
 8001288:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800128a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800128c:	d3f6      	bcc.n	800127c <CopyDataInit>
  ldr  r2, =_sbss
 800128e:	4a0b      	ldr	r2, [pc, #44]	; (80012bc <LoopForever+0x12>)
  b  LoopFillZerobss
 8001290:	e002      	b.n	8001298 <LoopFillZerobss>

08001292 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001292:	2300      	movs	r3, #0
  str  r3, [r2]
 8001294:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001296:	3204      	adds	r2, #4

08001298 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8001298:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <LoopForever+0x16>)
  cmp  r2, r3
 800129a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800129c:	d3f9      	bcc.n	8001292 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800129e:	f7ff ffbb 	bl	8001218 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012a2:	f000 f811 	bl	80012c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012a6:	f7ff fe47 	bl	8000f38 <main>

080012aa <LoopForever>:

LoopForever:
    b LoopForever
 80012aa:	e7fe      	b.n	80012aa <LoopForever>
  ldr   r0, =_estack
 80012ac:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 80012b0:	08001374 	.word	0x08001374
  ldr  r0, =_sdata
 80012b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80012b8:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 80012bc:	2000008c 	.word	0x2000008c
  ldr  r3, = _ebss
 80012c0:	20000108 	.word	0x20000108

080012c4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012c4:	e7fe      	b.n	80012c4 <ADC1_COMP_IRQHandler>
	...

080012c8 <__libc_init_array>:
 80012c8:	b570      	push	{r4, r5, r6, lr}
 80012ca:	2600      	movs	r6, #0
 80012cc:	4d0c      	ldr	r5, [pc, #48]	; (8001300 <__libc_init_array+0x38>)
 80012ce:	4c0d      	ldr	r4, [pc, #52]	; (8001304 <__libc_init_array+0x3c>)
 80012d0:	1b64      	subs	r4, r4, r5
 80012d2:	10a4      	asrs	r4, r4, #2
 80012d4:	42a6      	cmp	r6, r4
 80012d6:	d109      	bne.n	80012ec <__libc_init_array+0x24>
 80012d8:	2600      	movs	r6, #0
 80012da:	f000 f82b 	bl	8001334 <_init>
 80012de:	4d0a      	ldr	r5, [pc, #40]	; (8001308 <__libc_init_array+0x40>)
 80012e0:	4c0a      	ldr	r4, [pc, #40]	; (800130c <__libc_init_array+0x44>)
 80012e2:	1b64      	subs	r4, r4, r5
 80012e4:	10a4      	asrs	r4, r4, #2
 80012e6:	42a6      	cmp	r6, r4
 80012e8:	d105      	bne.n	80012f6 <__libc_init_array+0x2e>
 80012ea:	bd70      	pop	{r4, r5, r6, pc}
 80012ec:	00b3      	lsls	r3, r6, #2
 80012ee:	58eb      	ldr	r3, [r5, r3]
 80012f0:	4798      	blx	r3
 80012f2:	3601      	adds	r6, #1
 80012f4:	e7ee      	b.n	80012d4 <__libc_init_array+0xc>
 80012f6:	00b3      	lsls	r3, r6, #2
 80012f8:	58eb      	ldr	r3, [r5, r3]
 80012fa:	4798      	blx	r3
 80012fc:	3601      	adds	r6, #1
 80012fe:	e7f2      	b.n	80012e6 <__libc_init_array+0x1e>
 8001300:	0800136c 	.word	0x0800136c
 8001304:	0800136c 	.word	0x0800136c
 8001308:	0800136c 	.word	0x0800136c
 800130c:	08001370 	.word	0x08001370

08001310 <memcpy>:
 8001310:	2300      	movs	r3, #0
 8001312:	b510      	push	{r4, lr}
 8001314:	429a      	cmp	r2, r3
 8001316:	d100      	bne.n	800131a <memcpy+0xa>
 8001318:	bd10      	pop	{r4, pc}
 800131a:	5ccc      	ldrb	r4, [r1, r3]
 800131c:	54c4      	strb	r4, [r0, r3]
 800131e:	3301      	adds	r3, #1
 8001320:	e7f8      	b.n	8001314 <memcpy+0x4>

08001322 <memset>:
 8001322:	0003      	movs	r3, r0
 8001324:	1882      	adds	r2, r0, r2
 8001326:	4293      	cmp	r3, r2
 8001328:	d100      	bne.n	800132c <memset+0xa>
 800132a:	4770      	bx	lr
 800132c:	7019      	strb	r1, [r3, #0]
 800132e:	3301      	adds	r3, #1
 8001330:	e7f9      	b.n	8001326 <memset+0x4>
	...

08001334 <_init>:
 8001334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800133a:	bc08      	pop	{r3}
 800133c:	469e      	mov	lr, r3
 800133e:	4770      	bx	lr

08001340 <_fini>:
 8001340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001342:	46c0      	nop			; (mov r8, r8)
 8001344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001346:	bc08      	pop	{r3}
 8001348:	469e      	mov	lr, r3
 800134a:	4770      	bx	lr
